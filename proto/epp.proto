syntax = "proto3";
package epp;
option go_package = "github.com/as207960/epp-proxy/gen/go/epp";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "contact.proto";
import "domain.proto";
import "host.proto";
import "rgp.proto";
import "nominet.proto";
import "traficom.proto";
import "maintenance.proto";
import "eurid.proto";
import "tmch.proto";
import "dac.proto";
import "common.proto";

service EPPProxy {
    rpc DomainCheck              (domain.DomainCheckRequest)                returns (domain.DomainCheckReply) {
        option (google.api.http) = {
            post: "/domain/{name}/check"
            body: "*"
        };
    }
    rpc DomainClaimsCheck        (domain.DomainClaimsCheckRequest)          returns (domain.DomainClaimsCheckReply) {
        option (google.api.http) = {
            post: "/domain/{name}/claims_check"
            body: "*"
        };
    }
    rpc DomainTrademarkCheck     (domain.DomainTrademarkCheckRequest)       returns (domain.DomainClaimsCheckReply) {
        option (google.api.http) = {
            post: "/domain/{name}/trademark_check"
            body: "*"
        };
    }
    rpc DomainInfo               (domain.DomainInfoRequest)                 returns (domain.DomainInfoReply) {
        option (google.api.http) = {
            post: "/domain/{name}"
            body: "*"
        };
    }
    rpc DomainCreate             (domain.DomainCreateRequest)               returns (domain.DomainCreateReply) {
        option (google.api.http) = {
            post: "/domain/{name}/create"
            body: "*"
        };
    }
    rpc DomainDelete             (domain.DomainDeleteRequest)               returns (domain.DomainDeleteReply) {
        option (google.api.http) = {
            post: "/domain/{name}/delete"
            body: "*"
        };
    }
    rpc DomainUpdate             (domain.DomainUpdateRequest)               returns (domain.DomainUpdateReply) {
        option (google.api.http) = {
            post: "/domain/{name}/update"
            body: "*"
        };
    }
    rpc DomainRenew              (domain.DomainRenewRequest)                returns (domain.DomainRenewReply) {
        option (google.api.http) = {
            post: "/domain/{name}/renew"
            body: "*"
        };
    }
    rpc DomainTransferQuery      (domain.DomainTransferQueryRequest)        returns (domain.DomainTransferReply) {
        option (google.api.http) = {
            post: "/domain/{name}/transfer"
            body: "*"
        };
    }
    rpc DomainTransferRequest    (domain.DomainTransferRequestRequest)      returns (domain.DomainTransferReply) {
        option (google.api.http) = {
            post: "/domain/{name}/transfer/request"
            body: "*"
        };
    }
    rpc DomainTransferCancel     (domain.DomainTransferAcceptRejectRequest) returns (domain.DomainTransferReply) {
        option (google.api.http) = {
            post: "/domain/{name}/transfer/cancel"
            body: "*"
        };
    }
    rpc DomainTransferAccept     (domain.DomainTransferAcceptRejectRequest) returns (domain.DomainTransferReply) {
        option (google.api.http) = {
            post: "/domain/{name}/transfer/accept"
            body: "*"
        };
    }
    rpc DomainTransferReject     (domain.DomainTransferAcceptRejectRequest) returns (domain.DomainTransferReply) {
        option (google.api.http) = {
            post: "/domain/{name}/transfer/reject"
            body: "*"
        };
    }
    rpc DomainRestoreRequest     (rgp.RequestRequest)                       returns (rgp.RestoreReply) {
        option (google.api.http) = {
            post: "/domain/{name}/restore"
            body: "*"
        };
    }
    rpc DomainSync               (domain.DomainSyncRequest)                 returns (domain.DomainUpdateReply) {
        option (google.api.http) = {
            post: "/domain/{name}/sync"
            body: "*"
        };
    }
    rpc HostCheck                (host.HostCheckRequest)                    returns (host.HostCheckReply) {
        option (google.api.http) = {
            get: "/host/{registry_name}/{name}/check"
        };
    }
    rpc HostInfo                 (host.HostInfoRequest)                     returns (host.HostInfoReply) {
        option (google.api.http) = {
            get: "/host/{registry_name}/{name}"
        };
    }
    rpc HostCreate               (host.HostCreateRequest)                   returns (host.HostCreateReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{name}/create"
            body: "*"
        };
    }
    rpc HostDelete               (host.HostDeleteRequest)                   returns (host.HostDeleteReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{name}/delete"
        };
    }
    rpc HostUpdate               (host.HostUpdateRequest)                   returns (host.HostUpdateReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{name}/update"
            body: "*"
        };
    }
    rpc ContactCheck             (contact.ContactCheckRequest)              returns (contact.ContactCheckReply) {
        option (google.api.http) = {
            get: "/host/{registry_name}/{id}/check"
        };
    }
    rpc ContactInfo              (contact.ContactInfoRequest)               returns (contact.ContactInfoReply) {
        option (google.api.http) = {
            get: "/host/{registry_name}/{id}"
        };
    }
    rpc ContactCreate            (contact.ContactCreateRequest)             returns (contact.ContactCreateReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/create"
            body: "*"
        };
    }
    rpc ContactDelete            (contact.ContactDeleteRequest)             returns (contact.ContactDeleteReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/delete"
        };
    }
    rpc ContactUpdate            (contact.ContactUpdateRequest)             returns (contact.ContactUpdateReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/update"
            body: "*"
        };
    }
    rpc ContactTransferQuery     (contact.ContactTransferQueryRequest)      returns (contact.ContactTransferReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/transfer"
            body: "*"
        };
    }
    rpc ContactTransferRequest   (contact.ContactTransferRequestRequest)    returns (contact.ContactTransferReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/transfer/request"
            body: "*"
        };
    }
    rpc ContactTransferAccept    (contact.ContactTransferRequestRequest)    returns (contact.ContactTransferReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/transfer/accept"
            body: "*"
        };
    }
    rpc ContactTransferReject    (contact.ContactTransferRequestRequest)    returns (contact.ContactTransferReply) {
        option (google.api.http) = {
            post: "/host/{registry_name}/{id}/transfer/reject"
            body: "*"
        };
    }
    rpc MaintenanceList          (RegistryInfo)                             returns (maintenance.MaintenanceListReply) {
        option (google.api.http) = {
            get: "/maintenance/{registry_name}"
        };
    }
    rpc MaintenanceInfo          (maintenance.MaintenanceInfoRequest)       returns (maintenance.MaintenanceInfoReply) {
        option (google.api.http) = {
            get: "/maintenance/{registry_name}/{id}"
        };
    }
    rpc Poll                     (stream PollAck)                           returns (stream PollReply) {
        option (google.api.http) = {
            post: "/poll"
        };
    }
    rpc NominetTagList           (RegistryInfo)                             returns (nominet.NominetTagListReply) {
        option (google.api.http) = {
            get: "/nominet/{registry_name}/tag_list"
        };
    }
    rpc NominetAccept            (nominet.HandshakeAcceptRequest)           returns (nominet.HandshakeReply) {
        option (google.api.http) = {
            post: "/nominet/{registry_name}/case/{case_id}/accept"
            body: "*"
        };
    }
    rpc NominetReject            (nominet.HandshakeRejectRequest)           returns (nominet.HandshakeReply){
        option (google.api.http) = {
            post: "/nominet/{registry_name}/case/{case_id}/reject"
        };
    }
    rpc NominetRelease           (nominet.ReleaseRequest)                   returns (nominet.ReleaseReply) {
        option (google.api.http) = {
            post: "/nominet/{registry_name}/release"
            body: "*"
        };
    }
    rpc NominetContactValidate   (nominet.ContactValidateRequest)           returns (nominet.ContactValidateReply) {
        option (google.api.http) = {
            post: "/nominet/{registry_name}/contact_validate"
            body: "*"
        };
    }
    rpc NominetLock              (nominet.LockRequest)                      returns (nominet.LockReply) {
        option (google.api.http) = {
            post: "/nominet/{registry_name}/lock"
            body: "*"
        };
    }
    rpc NominetUnlock            (nominet.LockRequest)                      returns (nominet.LockReply) {
        option (google.api.http) = {
            post: "/nominet/{registry_name}/unlock"
            body: "*"
        };
    }
    rpc BalanceInfo              (RegistryInfo)                             returns (BalanceReply) {
        option (google.api.http) = {
          get: "/balance_info/{registry_name}"
        };
    }
    rpc HitPointsInfo            (RegistryInfo)                             returns (eurid.HitPointsReply);
    rpc RegistrationLimitInfo    (RegistryInfo)                             returns (eurid.RegistrationLimitReply);
    rpc DNSQualityInfo           (eurid.DNSQualityRequest)                  returns (eurid.DNSQualityReply);
    rpc DNSSECEligibilityInfo    (eurid.DNSSECEligibilityRequest)           returns (eurid.DNSSECEligibilityReply);
    rpc TMCHMarkCheck            (tmch.MarkCheckRequest)                    returns (tmch.MarkCheckResponse);
    rpc TMCHMarkCreate           (tmch.MarkCreateRequest)                   returns (tmch.MarkCreateResponse);
    rpc TMCHMarkInfo             (tmch.MarkInfoRequest)                     returns (tmch.MarkInfoResponse);
    rpc TMCHMarkSMDInfo          (tmch.MarkInfoRequest)                     returns (tmch.MarkSMDInfoResponse);
    rpc TMCHMarkEncodedSMDInfo   (tmch.MarkInfoRequest)                     returns (tmch.MarkSMDInfoResponse);
    rpc TMCHMarkFileInfo         (tmch.MarkInfoRequest)                     returns (tmch.MarkSMDInfoResponse);
    rpc TMCHMarkUpdate           (tmch.MarkUpdateRequest)                   returns (tmch.MarkUpdateResponse);
    rpc TMCHMarkRenew            (tmch.MarkRenewRequest)                    returns (tmch.MarkRenewResponse);
    rpc TMCHMarkTransferInitiate (tmch.MarkTransferInitiateRequest)         returns (tmch.MarkTransferInitiateResponse);
    rpc TMCHMarkTransfer         (tmch.MarkTransferRequest)                 returns (tmch.MarkTransferResponse);
    rpc DACDomain                (dac.DomainRequest)                        returns (dac.DomainResponse);
    rpc DACUsage                 (dac.UsageRequest)                         returns (dac.UsageResponse);
    rpc DACLimits                (dac.UsageRequest)                         returns (dac.UsageResponse);
}

message RegistryInfo {
    string registry_name = 1;
}

message PollAck {
    string msg_id = 1;
}

message PollReply {
    string msg_id = 1;
    google.protobuf.Timestamp enqueue_date = 2;
    string message = 3;
    oneof data {
        domain.DomainInfoReply domain_info = 4;
        domain.DomainTransferReply domain_transfer = 6;
        domain.DomainCreateReply domain_create = 7;
        domain.DomainRenewReply domain_renew = 8;
        domain.DomainPANReply domain_pan = 9;
        contact.ContactInfoReply contact_info = 5;
        contact.ContactTransferReply contact_transfer = 20;
        contact.ContactPANReply contact_pan = 21;
        nominet.DomainCancel nominet_domain_cancel = 11;
        nominet.DomainRelease nominet_domain_release = 12;
        nominet.DomainRegistrarChange nominet_domain_registrar_change = 13;
        nominet.HostCancel nominet_host_cancel = 14;
        nominet.Process nominet_process = 15;
        nominet.Suspend nominet_suspend = 16;
        nominet.DomainFail nominet_domain_fail = 17;
        nominet.RegistrantTransfer nominet_registrant_transfer = 18;
        traficom.TrnData traficom_trn = 22;
        BalanceReply verisign_low_balance = 19;
        maintenance.MaintenanceInfoReply maintenance_info = 24;
        eurid.PollReply eurid_poll = 25;
        host.HostInfoReply host_info = 26;
    }
    ChangeData change_data = 10;
    common.CommandResponse cmd_resp = 23;
}

message ChangeData {
    enum ChangeState {
        AFTER = 0;
        BEFORE = 1;
    }

    message ChangeOperation {
        enum ChangeOperationType {
            Custom = 0;
            Create = 1;
            Delete = 2;
            Renew = 3;
            Transfer = 4;
            Update = 5;
            Restore = 6;
            AutoRenew = 7;
            AutoDelete = 8;
            AutoPurge = 9;
        }

        ChangeOperationType operation_type = 1;
        google.protobuf.StringValue operation = 2;
    }

    message CaseID {
        enum CaseIDType {
            Custom = 0;
            UDRP = 1;
            URS = 2;
        }

        CaseIDType case_id_type = 1;
        google.protobuf.StringValue name = 2;
        string case_id = 3;
    }

    ChangeState change_state = 1;
    ChangeOperation operation = 2;
    google.protobuf.Timestamp date = 3;
    string server_transaction_id = 4;
    string who = 5;
    CaseID case_id = 6;
    google.protobuf.StringValue reason = 7;
}

message BalanceReply {
    string balance = 1;
    string currency = 2;
    google.protobuf.StringValue credit_limit = 3;
    google.protobuf.StringValue available_credit = 4;
    oneof credit_threshold {
        google.protobuf.StringValue fixed_credit_threshold = 5;
        google.protobuf.UInt32Value percentage_credit_threshold = 6;
    }
    common.CommandResponse cmd_resp = 7;
}
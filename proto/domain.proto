syntax = "proto3";
package epp.domain;
option go_package = "github.com/as207960/epp-proxy/gen/go/epp/domain";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "common.proto";
import "rgp.proto";
import "fee.proto";
import "eurid.proto";
import "launch.proto";
import "domain_common.proto";
import "isnic.proto";
import "personal_registration.proto";

message Contact {
    string id = 1;
    string type = 2;
}

message NameServer {
    oneof server {
        string host_obj = 1;
        string host_name = 3;
    }
    repeated common.IPAddress addresses = 2;
    eurid.IDN eurid_idn = 4;
}

enum DomainHostsType {
    All = 0;
    Delegated = 1;
    Subordinate = 2;
    None = 3;
}

message DomainHosts {
    DomainHostsType hosts = 1;
}

message DomainCheckRequest {
    string name = 1;
    fee.FeeCheck fee_check = 2;
    launch.Phase launch_check = 3;
    google.protobuf.StringValue registry_name = 4;
}

message DomainClaimsCheckRequest {
    string name = 1;
    launch.Phase launch_check = 2;
    google.protobuf.StringValue registry_name = 3;
}

message DomainTrademarkCheckRequest {
    string name = 1;
    google.protobuf.StringValue registry_name = 2;
}

message DomainCheckReply {
    bool available = 1;
    google.protobuf.StringValue reason = 2;
    fee.FeeCheckData fee_check = 4;
    fee.DonutsFeeData donuts_fee_check = 5;
    string registry_name = 3;
    common.CommandResponse cmd_resp = 6;
    eurid.IDN eurid_idn = 7;
    eurid.DomainCheckData eurid_data = 8;
}

message DomainClaimsCheckReply {
    bool exists = 1;
    repeated launch.ClaimsKey claims_keys = 2;
    string registry_name = 3;
    common.CommandResponse cmd_resp = 4;
}

message DomainInfoRequest {
    string name = 1;
    google.protobuf.StringValue auth_info = 2;
    DomainHosts hosts = 6;
    launch.LaunchInfo launch_info = 3;
    google.protobuf.StringValue registry_name = 4;
    fee.DonutsFeeData donuts_fee_agreement = 5;
    eurid.DomainInfoRequest eurid_data = 7;
}

message DomainInfoReply {
    string name = 1;
    string registry_id = 2;
    repeated DomainStatus statuses = 3;
    string registrant = 4;
    repeated Contact contacts = 5;
    repeated NameServer nameservers = 6;
    repeated string hosts = 7;
    string client_id = 8;
    google.protobuf.StringValue client_created_id = 9;
    google.protobuf.Timestamp creation_date = 10;
    google.protobuf.Timestamp expiry_date = 11;
    google.protobuf.StringValue last_updated_client = 12;
    google.protobuf.Timestamp last_updated_date = 13;
    google.protobuf.Timestamp last_transfer_date = 14;
    string registry_name = 15;
    repeated rgp.RGPState rgp_state = 16;
    google.protobuf.StringValue auth_info = 17;
    SecDNSData sec_dns = 18;
    launch.LaunchInfoData launch_info = 19;
    fee.DonutsFeeData donuts_fee_data = 20;
    VerisignWhoisInfo verisign_whois_info = 21;
    common.CommandResponse cmd_resp = 22;
    eurid.IDN eurid_idn = 23;
    eurid.DomainInfo eurid_data = 24;
    isnic.DomainInfo isnic_info = 25;
    personal_registration.PersonalRegistrationInfo personal_registration = 26;
}

message DomainCreateRequest {
    string name = 1;
    common.Period period = 2;
    string registrant = 3;
    repeated Contact contacts = 4;
    repeated NameServer nameservers = 5;
    string auth_info = 6;
    SecDNSData sec_dns = 7;
    launch.LaunchCreate launch_data = 8;
    google.protobuf.StringValue registry_name = 9;
    fee.DonutsFeeData donuts_fee_agreement = 10;
    fee.FeeAgreement fee_agreement = 11;
    eurid.DomainCreateExtension eurid_data = 12;
    isnic.PaymentInfo isnic_payment = 13;
    personal_registration.PersonalRegistrationInfo personal_registration = 14;
}

message DomainCreateReply {
    reserved 7;
    string name = 1;
    bool pending = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp expiry_date = 4;
    fee.FeeData fee_data = 6;
    fee.DonutsFeeData donuts_fee_data = 9;
    launch.LaunchData launch_data = 8;
    string registry_name = 5;
    common.CommandResponse cmd_resp = 10;
    eurid.IDN eurid_idn = 11;
    personal_registration.PersonalRegistrationCreate personal_registration = 12;
}

message DomainDeleteRequest {
    string name = 1;
    launch.LaunchData launch_data = 2;
    google.protobuf.StringValue registry_name = 3;
    fee.DonutsFeeData donuts_fee_agreement = 4;
    eurid.DomainDeleteExtension eurid_data = 5;
}

message DomainDeleteReply {
    reserved 4;
    bool pending = 1;
    fee.FeeData fee_data = 3;
    string registry_name = 2;
    common.CommandResponse cmd_resp = 5;
    eurid.IDN eurid_idn = 6;
}

message DomainUpdateRequest {
    message Param {
        oneof param {
            NameServer nameserver = 1;
            Contact contact = 2;
            DomainStatus state = 3;
        }
    }

    string name = 1;
    repeated Param add = 2;
    repeated Param remove = 3;
    google.protobuf.StringValue new_registrant = 4;
    google.protobuf.StringValue new_auth_info = 5;
    UpdateSecDNSData sec_dns = 6;
    launch.LaunchData launch_data = 7;
    google.protobuf.StringValue registry_name = 8;
    fee.DonutsFeeData donuts_fee_agreement = 9;
    fee.FeeAgreement fee_agreement = 10;
    eurid.DomainUpdateExtension eurid_data = 11;
    isnic.DomainUpdate isnic_info = 12;
}

message DomainSyncRequest {
    string name = 1;
    google.protobuf.StringValue registry_name = 2;
    uint32 month = 3;
    uint32 day = 4;
}

message DomainUpdateReply {
    reserved 4;
    bool pending = 1;
    fee.FeeData fee_data = 3;
    fee.DonutsFeeData donuts_fee_data = 5;
    string registry_name = 2;
    common.CommandResponse cmd_resp = 6;
}

message DomainRenewRequest {
    string name = 1;
    common.Period period = 2;
    google.protobuf.Timestamp current_expiry_date = 3;
    google.protobuf.StringValue registry_name = 4;
    fee.DonutsFeeData donuts_fee_agreement = 5;
    fee.FeeAgreement fee_agreement = 6;
    isnic.PaymentInfo isnic_payment = 7;
}

message DomainRenewReply {
    reserved 5;
    string name = 6;
    bool pending = 1;
    google.protobuf.Timestamp expiry_date = 2;
    fee.FeeData fee_data = 4;
    fee.DonutsFeeData donuts_fee_data = 7;
    string registry_name = 3;
    common.CommandResponse cmd_resp = 8;
    eurid.IDN eurid_idn = 9;
    eurid.DomainRenewInfo eurid_data = 10;
    personal_registration.PersonalRegistrationCreate personal_registration = 11;
}

message DomainTransferQueryRequest {
    string name = 1;
    google.protobuf.StringValue auth_info = 2;
    google.protobuf.StringValue registry_name = 3;
}

message DomainTransferRequestRequest {
    string name = 1;
    common.Period period = 2;
    string auth_info = 3;
    google.protobuf.StringValue registry_name = 4;
    fee.DonutsFeeData donuts_fee_agreement = 5;
    fee.FeeAgreement fee_agreement = 6;
    eurid.DomainTransferExtension eurid_data = 7;
}

message DomainTransferAcceptRejectRequest {
    string name = 1;
    string auth_info = 2;
    google.protobuf.StringValue registry_name = 3;
}

message DomainTransferReply {
    reserved 10;
    bool pending = 1;
    string name = 12;
    common.TransferStatus status = 2;
    string requested_client_id = 3;
    google.protobuf.Timestamp requested_date = 4;
    string act_client_id = 5;
    google.protobuf.Timestamp act_date = 6;
    google.protobuf.Timestamp expiry_date = 7;
    fee.FeeData fee_data = 9;
    fee.DonutsFeeData donuts_fee_data = 11;
    string registry_name = 8;
    common.CommandResponse cmd_resp = 13;
    eurid.IDN eurid_idn = 14;
    eurid.DomainTransferInfo eurid_data = 15;
    personal_registration.PersonalRegistrationCreate personal_registration = 16;
}

message SecDNSData {
    google.protobuf.Int64Value max_sig_life = 1;
    oneof data {
        SecDNSDSData ds_data = 2;
        SecDNSKeyData key_data = 3;
    }
}

message SecDNSDSData {
    repeated SecDNSDSDatum data = 1;
}

message SecDNSDSDatum {
    uint32 key_tag = 1;
    uint32 algorithm = 2;
    uint32 digest_type = 3;
    string digest = 4;
    SecDNSKeyDatum key_data = 5;
}

message SecDNSKeyData {
    repeated SecDNSKeyDatum data = 1;
}

message SecDNSKeyDatum {
    uint32 flags = 1;
    uint32 protocol = 2;
    uint32 algorithm = 3;
    string public_key = 4;
}

message UpdateSecDNSData {
    google.protobuf.BoolValue urgent = 1;
    google.protobuf.Int64Value new_max_sig_life = 2;
    oneof add {
        SecDNSDSData add_ds_data = 3;
        SecDNSKeyData add_key_data = 4;
    }
    oneof remove {
        bool all = 5;
        SecDNSDSData rem_ds_data = 6;
        SecDNSKeyData rem_key_data = 7;
    }
}

message VerisignWhoisInfo {
    string registrar = 1;
    google.protobuf.StringValue whois_server = 2;
    google.protobuf.StringValue url = 3;
    google.protobuf.StringValue iris_server = 4;
}

message DomainPANReply {
    string name = 1;
    bool result = 2;
    google.protobuf.StringValue server_transaction_id = 3;
    google.protobuf.StringValue client_transaction_id = 4;
    google.protobuf.Timestamp date = 5;
}
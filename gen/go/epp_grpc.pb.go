// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: epp.proto

package epp

import (
	context "context"
	contact "github.com/as207960/epp-proxy/gen/go/epp/contact"
	dac "github.com/as207960/epp-proxy/gen/go/epp/dac"
	domain "github.com/as207960/epp-proxy/gen/go/epp/domain"
	eurid "github.com/as207960/epp-proxy/gen/go/epp/eurid"
	host "github.com/as207960/epp-proxy/gen/go/epp/host"
	maintenance "github.com/as207960/epp-proxy/gen/go/epp/maintenance"
	nominet "github.com/as207960/epp-proxy/gen/go/epp/nominet"
	rgp "github.com/as207960/epp-proxy/gen/go/epp/rgp"
	tmch "github.com/as207960/epp-proxy/gen/go/epp/tmch"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EPPProxyClient is the client API for EPPProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EPPProxyClient interface {
	DomainCheck(ctx context.Context, in *domain.DomainCheckRequest, opts ...grpc.CallOption) (*domain.DomainCheckReply, error)
	DomainClaimsCheck(ctx context.Context, in *domain.DomainClaimsCheckRequest, opts ...grpc.CallOption) (*domain.DomainClaimsCheckReply, error)
	DomainTrademarkCheck(ctx context.Context, in *domain.DomainTrademarkCheckRequest, opts ...grpc.CallOption) (*domain.DomainClaimsCheckReply, error)
	DomainInfo(ctx context.Context, in *domain.DomainInfoRequest, opts ...grpc.CallOption) (*domain.DomainInfoReply, error)
	DomainCreate(ctx context.Context, in *domain.DomainCreateRequest, opts ...grpc.CallOption) (*domain.DomainCreateReply, error)
	DomainDelete(ctx context.Context, in *domain.DomainDeleteRequest, opts ...grpc.CallOption) (*domain.DomainDeleteReply, error)
	DomainUpdate(ctx context.Context, in *domain.DomainUpdateRequest, opts ...grpc.CallOption) (*domain.DomainUpdateReply, error)
	DomainRenew(ctx context.Context, in *domain.DomainRenewRequest, opts ...grpc.CallOption) (*domain.DomainRenewReply, error)
	DomainTransferQuery(ctx context.Context, in *domain.DomainTransferQueryRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error)
	DomainTransferRequest(ctx context.Context, in *domain.DomainTransferRequestRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error)
	DomainTransferCancel(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error)
	DomainTransferAccept(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error)
	DomainTransferReject(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error)
	DomainRestoreRequest(ctx context.Context, in *rgp.RequestRequest, opts ...grpc.CallOption) (*rgp.RestoreReply, error)
	DomainSync(ctx context.Context, in *domain.DomainSyncRequest, opts ...grpc.CallOption) (*domain.DomainUpdateReply, error)
	HostCheck(ctx context.Context, in *host.HostCheckRequest, opts ...grpc.CallOption) (*host.HostCheckReply, error)
	HostInfo(ctx context.Context, in *host.HostInfoRequest, opts ...grpc.CallOption) (*host.HostInfoReply, error)
	HostCreate(ctx context.Context, in *host.HostCreateRequest, opts ...grpc.CallOption) (*host.HostCreateReply, error)
	HostDelete(ctx context.Context, in *host.HostDeleteRequest, opts ...grpc.CallOption) (*host.HostDeleteReply, error)
	HostUpdate(ctx context.Context, in *host.HostUpdateRequest, opts ...grpc.CallOption) (*host.HostUpdateReply, error)
	ContactCheck(ctx context.Context, in *contact.ContactCheckRequest, opts ...grpc.CallOption) (*contact.ContactCheckReply, error)
	ContactInfo(ctx context.Context, in *contact.ContactInfoRequest, opts ...grpc.CallOption) (*contact.ContactInfoReply, error)
	ContactCreate(ctx context.Context, in *contact.ContactCreateRequest, opts ...grpc.CallOption) (*contact.ContactCreateReply, error)
	ContactDelete(ctx context.Context, in *contact.ContactDeleteRequest, opts ...grpc.CallOption) (*contact.ContactDeleteReply, error)
	ContactUpdate(ctx context.Context, in *contact.ContactUpdateRequest, opts ...grpc.CallOption) (*contact.ContactUpdateReply, error)
	ContactTransferQuery(ctx context.Context, in *contact.ContactTransferQueryRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error)
	ContactTransferRequest(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error)
	ContactTransferAccept(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error)
	ContactTransferReject(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error)
	MaintenanceList(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*maintenance.MaintenanceListReply, error)
	MaintenanceInfo(ctx context.Context, in *maintenance.MaintenanceInfoRequest, opts ...grpc.CallOption) (*maintenance.MaintenanceInfoReply, error)
	Poll(ctx context.Context, opts ...grpc.CallOption) (EPPProxy_PollClient, error)
	NominetTagList(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*nominet.NominetTagListReply, error)
	NominetAccept(ctx context.Context, in *nominet.HandshakeAcceptRequest, opts ...grpc.CallOption) (*nominet.HandshakeReply, error)
	NominetReject(ctx context.Context, in *nominet.HandshakeRejectRequest, opts ...grpc.CallOption) (*nominet.HandshakeReply, error)
	NominetRelease(ctx context.Context, in *nominet.ReleaseRequest, opts ...grpc.CallOption) (*nominet.ReleaseReply, error)
	NominetContactValidate(ctx context.Context, in *nominet.ContactValidateRequest, opts ...grpc.CallOption) (*nominet.ContactValidateReply, error)
	NominetLock(ctx context.Context, in *nominet.LockRequest, opts ...grpc.CallOption) (*nominet.LockReply, error)
	NominetUnlock(ctx context.Context, in *nominet.LockRequest, opts ...grpc.CallOption) (*nominet.LockReply, error)
	BalanceInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*BalanceReply, error)
	HitPointsInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*eurid.HitPointsReply, error)
	RegistrationLimitInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*eurid.RegistrationLimitReply, error)
	DNSQualityInfo(ctx context.Context, in *eurid.DNSQualityRequest, opts ...grpc.CallOption) (*eurid.DNSQualityReply, error)
	DNSSECEligibilityInfo(ctx context.Context, in *eurid.DNSSECEligibilityRequest, opts ...grpc.CallOption) (*eurid.DNSSECEligibilityReply, error)
	TMCHMarkCheck(ctx context.Context, in *tmch.MarkCheckRequest, opts ...grpc.CallOption) (*tmch.MarkCheckResponse, error)
	TMCHMarkCreate(ctx context.Context, in *tmch.MarkCreateRequest, opts ...grpc.CallOption) (*tmch.MarkCreateResponse, error)
	TMCHMarkInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkInfoResponse, error)
	TMCHMarkSMDInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkEncodedSMDInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkFileInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkUpdate(ctx context.Context, in *tmch.MarkUpdateRequest, opts ...grpc.CallOption) (*tmch.MarkUpdateResponse, error)
	TMCHMarkRenew(ctx context.Context, in *tmch.MarkRenewRequest, opts ...grpc.CallOption) (*tmch.MarkRenewResponse, error)
	TMCHMarkTransferInitiate(ctx context.Context, in *tmch.MarkTransferInitiateRequest, opts ...grpc.CallOption) (*tmch.MarkTransferInitiateResponse, error)
	TMCHMarkTransfer(ctx context.Context, in *tmch.MarkTransferRequest, opts ...grpc.CallOption) (*tmch.MarkTransferResponse, error)
	DACDomain(ctx context.Context, in *dac.DomainRequest, opts ...grpc.CallOption) (*dac.DomainResponse, error)
	DACUsage(ctx context.Context, in *dac.UsageRequest, opts ...grpc.CallOption) (*dac.UsageResponse, error)
	DACLimits(ctx context.Context, in *dac.UsageRequest, opts ...grpc.CallOption) (*dac.UsageResponse, error)
}

type ePPProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewEPPProxyClient(cc grpc.ClientConnInterface) EPPProxyClient {
	return &ePPProxyClient{cc}
}

func (c *ePPProxyClient) DomainCheck(ctx context.Context, in *domain.DomainCheckRequest, opts ...grpc.CallOption) (*domain.DomainCheckReply, error) {
	out := new(domain.DomainCheckReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainClaimsCheck(ctx context.Context, in *domain.DomainClaimsCheckRequest, opts ...grpc.CallOption) (*domain.DomainClaimsCheckReply, error) {
	out := new(domain.DomainClaimsCheckReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainClaimsCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTrademarkCheck(ctx context.Context, in *domain.DomainTrademarkCheckRequest, opts ...grpc.CallOption) (*domain.DomainClaimsCheckReply, error) {
	out := new(domain.DomainClaimsCheckReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTrademarkCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainInfo(ctx context.Context, in *domain.DomainInfoRequest, opts ...grpc.CallOption) (*domain.DomainInfoReply, error) {
	out := new(domain.DomainInfoReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainCreate(ctx context.Context, in *domain.DomainCreateRequest, opts ...grpc.CallOption) (*domain.DomainCreateReply, error) {
	out := new(domain.DomainCreateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainDelete(ctx context.Context, in *domain.DomainDeleteRequest, opts ...grpc.CallOption) (*domain.DomainDeleteReply, error) {
	out := new(domain.DomainDeleteReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainUpdate(ctx context.Context, in *domain.DomainUpdateRequest, opts ...grpc.CallOption) (*domain.DomainUpdateReply, error) {
	out := new(domain.DomainUpdateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainRenew(ctx context.Context, in *domain.DomainRenewRequest, opts ...grpc.CallOption) (*domain.DomainRenewReply, error) {
	out := new(domain.DomainRenewReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainRenew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTransferQuery(ctx context.Context, in *domain.DomainTransferQueryRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error) {
	out := new(domain.DomainTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTransferQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTransferRequest(ctx context.Context, in *domain.DomainTransferRequestRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error) {
	out := new(domain.DomainTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTransferRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTransferCancel(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error) {
	out := new(domain.DomainTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTransferCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTransferAccept(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error) {
	out := new(domain.DomainTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTransferAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainTransferReject(ctx context.Context, in *domain.DomainTransferAcceptRejectRequest, opts ...grpc.CallOption) (*domain.DomainTransferReply, error) {
	out := new(domain.DomainTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainTransferReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainRestoreRequest(ctx context.Context, in *rgp.RequestRequest, opts ...grpc.CallOption) (*rgp.RestoreReply, error) {
	out := new(rgp.RestoreReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainRestoreRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DomainSync(ctx context.Context, in *domain.DomainSyncRequest, opts ...grpc.CallOption) (*domain.DomainUpdateReply, error) {
	out := new(domain.DomainUpdateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DomainSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HostCheck(ctx context.Context, in *host.HostCheckRequest, opts ...grpc.CallOption) (*host.HostCheckReply, error) {
	out := new(host.HostCheckReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HostCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HostInfo(ctx context.Context, in *host.HostInfoRequest, opts ...grpc.CallOption) (*host.HostInfoReply, error) {
	out := new(host.HostInfoReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HostCreate(ctx context.Context, in *host.HostCreateRequest, opts ...grpc.CallOption) (*host.HostCreateReply, error) {
	out := new(host.HostCreateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HostCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HostDelete(ctx context.Context, in *host.HostDeleteRequest, opts ...grpc.CallOption) (*host.HostDeleteReply, error) {
	out := new(host.HostDeleteReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HostDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HostUpdate(ctx context.Context, in *host.HostUpdateRequest, opts ...grpc.CallOption) (*host.HostUpdateReply, error) {
	out := new(host.HostUpdateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HostUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactCheck(ctx context.Context, in *contact.ContactCheckRequest, opts ...grpc.CallOption) (*contact.ContactCheckReply, error) {
	out := new(contact.ContactCheckReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactInfo(ctx context.Context, in *contact.ContactInfoRequest, opts ...grpc.CallOption) (*contact.ContactInfoReply, error) {
	out := new(contact.ContactInfoReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactCreate(ctx context.Context, in *contact.ContactCreateRequest, opts ...grpc.CallOption) (*contact.ContactCreateReply, error) {
	out := new(contact.ContactCreateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactDelete(ctx context.Context, in *contact.ContactDeleteRequest, opts ...grpc.CallOption) (*contact.ContactDeleteReply, error) {
	out := new(contact.ContactDeleteReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactUpdate(ctx context.Context, in *contact.ContactUpdateRequest, opts ...grpc.CallOption) (*contact.ContactUpdateReply, error) {
	out := new(contact.ContactUpdateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactTransferQuery(ctx context.Context, in *contact.ContactTransferQueryRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error) {
	out := new(contact.ContactTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactTransferQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactTransferRequest(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error) {
	out := new(contact.ContactTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactTransferRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactTransferAccept(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error) {
	out := new(contact.ContactTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactTransferAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) ContactTransferReject(ctx context.Context, in *contact.ContactTransferRequestRequest, opts ...grpc.CallOption) (*contact.ContactTransferReply, error) {
	out := new(contact.ContactTransferReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/ContactTransferReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) MaintenanceList(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*maintenance.MaintenanceListReply, error) {
	out := new(maintenance.MaintenanceListReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/MaintenanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) MaintenanceInfo(ctx context.Context, in *maintenance.MaintenanceInfoRequest, opts ...grpc.CallOption) (*maintenance.MaintenanceInfoReply, error) {
	out := new(maintenance.MaintenanceInfoReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/MaintenanceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) Poll(ctx context.Context, opts ...grpc.CallOption) (EPPProxy_PollClient, error) {
	stream, err := c.cc.NewStream(ctx, &EPPProxy_ServiceDesc.Streams[0], "/epp.EPPProxy/Poll", opts...)
	if err != nil {
		return nil, err
	}
	x := &ePPProxyPollClient{stream}
	return x, nil
}

type EPPProxy_PollClient interface {
	Send(*PollAck) error
	Recv() (*PollReply, error)
	grpc.ClientStream
}

type ePPProxyPollClient struct {
	grpc.ClientStream
}

func (x *ePPProxyPollClient) Send(m *PollAck) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ePPProxyPollClient) Recv() (*PollReply, error) {
	m := new(PollReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ePPProxyClient) NominetTagList(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*nominet.NominetTagListReply, error) {
	out := new(nominet.NominetTagListReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetAccept(ctx context.Context, in *nominet.HandshakeAcceptRequest, opts ...grpc.CallOption) (*nominet.HandshakeReply, error) {
	out := new(nominet.HandshakeReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetReject(ctx context.Context, in *nominet.HandshakeRejectRequest, opts ...grpc.CallOption) (*nominet.HandshakeReply, error) {
	out := new(nominet.HandshakeReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetRelease(ctx context.Context, in *nominet.ReleaseRequest, opts ...grpc.CallOption) (*nominet.ReleaseReply, error) {
	out := new(nominet.ReleaseReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetContactValidate(ctx context.Context, in *nominet.ContactValidateRequest, opts ...grpc.CallOption) (*nominet.ContactValidateReply, error) {
	out := new(nominet.ContactValidateReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetContactValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetLock(ctx context.Context, in *nominet.LockRequest, opts ...grpc.CallOption) (*nominet.LockReply, error) {
	out := new(nominet.LockReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) NominetUnlock(ctx context.Context, in *nominet.LockRequest, opts ...grpc.CallOption) (*nominet.LockReply, error) {
	out := new(nominet.LockReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/NominetUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) BalanceInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/BalanceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) HitPointsInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*eurid.HitPointsReply, error) {
	out := new(eurid.HitPointsReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/HitPointsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) RegistrationLimitInfo(ctx context.Context, in *RegistryInfo, opts ...grpc.CallOption) (*eurid.RegistrationLimitReply, error) {
	out := new(eurid.RegistrationLimitReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/RegistrationLimitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DNSQualityInfo(ctx context.Context, in *eurid.DNSQualityRequest, opts ...grpc.CallOption) (*eurid.DNSQualityReply, error) {
	out := new(eurid.DNSQualityReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DNSQualityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DNSSECEligibilityInfo(ctx context.Context, in *eurid.DNSSECEligibilityRequest, opts ...grpc.CallOption) (*eurid.DNSSECEligibilityReply, error) {
	out := new(eurid.DNSSECEligibilityReply)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DNSSECEligibilityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkCheck(ctx context.Context, in *tmch.MarkCheckRequest, opts ...grpc.CallOption) (*tmch.MarkCheckResponse, error) {
	out := new(tmch.MarkCheckResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkCreate(ctx context.Context, in *tmch.MarkCreateRequest, opts ...grpc.CallOption) (*tmch.MarkCreateResponse, error) {
	out := new(tmch.MarkCreateResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkInfoResponse, error) {
	out := new(tmch.MarkInfoResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkSMDInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error) {
	out := new(tmch.MarkSMDInfoResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkSMDInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkEncodedSMDInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error) {
	out := new(tmch.MarkSMDInfoResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkEncodedSMDInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkFileInfo(ctx context.Context, in *tmch.MarkInfoRequest, opts ...grpc.CallOption) (*tmch.MarkSMDInfoResponse, error) {
	out := new(tmch.MarkSMDInfoResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkUpdate(ctx context.Context, in *tmch.MarkUpdateRequest, opts ...grpc.CallOption) (*tmch.MarkUpdateResponse, error) {
	out := new(tmch.MarkUpdateResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkRenew(ctx context.Context, in *tmch.MarkRenewRequest, opts ...grpc.CallOption) (*tmch.MarkRenewResponse, error) {
	out := new(tmch.MarkRenewResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkRenew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkTransferInitiate(ctx context.Context, in *tmch.MarkTransferInitiateRequest, opts ...grpc.CallOption) (*tmch.MarkTransferInitiateResponse, error) {
	out := new(tmch.MarkTransferInitiateResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkTransferInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) TMCHMarkTransfer(ctx context.Context, in *tmch.MarkTransferRequest, opts ...grpc.CallOption) (*tmch.MarkTransferResponse, error) {
	out := new(tmch.MarkTransferResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/TMCHMarkTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DACDomain(ctx context.Context, in *dac.DomainRequest, opts ...grpc.CallOption) (*dac.DomainResponse, error) {
	out := new(dac.DomainResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DACDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DACUsage(ctx context.Context, in *dac.UsageRequest, opts ...grpc.CallOption) (*dac.UsageResponse, error) {
	out := new(dac.UsageResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DACUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePPProxyClient) DACLimits(ctx context.Context, in *dac.UsageRequest, opts ...grpc.CallOption) (*dac.UsageResponse, error) {
	out := new(dac.UsageResponse)
	err := c.cc.Invoke(ctx, "/epp.EPPProxy/DACLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EPPProxyServer is the server API for EPPProxy service.
// All implementations must embed UnimplementedEPPProxyServer
// for forward compatibility
type EPPProxyServer interface {
	DomainCheck(context.Context, *domain.DomainCheckRequest) (*domain.DomainCheckReply, error)
	DomainClaimsCheck(context.Context, *domain.DomainClaimsCheckRequest) (*domain.DomainClaimsCheckReply, error)
	DomainTrademarkCheck(context.Context, *domain.DomainTrademarkCheckRequest) (*domain.DomainClaimsCheckReply, error)
	DomainInfo(context.Context, *domain.DomainInfoRequest) (*domain.DomainInfoReply, error)
	DomainCreate(context.Context, *domain.DomainCreateRequest) (*domain.DomainCreateReply, error)
	DomainDelete(context.Context, *domain.DomainDeleteRequest) (*domain.DomainDeleteReply, error)
	DomainUpdate(context.Context, *domain.DomainUpdateRequest) (*domain.DomainUpdateReply, error)
	DomainRenew(context.Context, *domain.DomainRenewRequest) (*domain.DomainRenewReply, error)
	DomainTransferQuery(context.Context, *domain.DomainTransferQueryRequest) (*domain.DomainTransferReply, error)
	DomainTransferRequest(context.Context, *domain.DomainTransferRequestRequest) (*domain.DomainTransferReply, error)
	DomainTransferCancel(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error)
	DomainTransferAccept(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error)
	DomainTransferReject(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error)
	DomainRestoreRequest(context.Context, *rgp.RequestRequest) (*rgp.RestoreReply, error)
	DomainSync(context.Context, *domain.DomainSyncRequest) (*domain.DomainUpdateReply, error)
	HostCheck(context.Context, *host.HostCheckRequest) (*host.HostCheckReply, error)
	HostInfo(context.Context, *host.HostInfoRequest) (*host.HostInfoReply, error)
	HostCreate(context.Context, *host.HostCreateRequest) (*host.HostCreateReply, error)
	HostDelete(context.Context, *host.HostDeleteRequest) (*host.HostDeleteReply, error)
	HostUpdate(context.Context, *host.HostUpdateRequest) (*host.HostUpdateReply, error)
	ContactCheck(context.Context, *contact.ContactCheckRequest) (*contact.ContactCheckReply, error)
	ContactInfo(context.Context, *contact.ContactInfoRequest) (*contact.ContactInfoReply, error)
	ContactCreate(context.Context, *contact.ContactCreateRequest) (*contact.ContactCreateReply, error)
	ContactDelete(context.Context, *contact.ContactDeleteRequest) (*contact.ContactDeleteReply, error)
	ContactUpdate(context.Context, *contact.ContactUpdateRequest) (*contact.ContactUpdateReply, error)
	ContactTransferQuery(context.Context, *contact.ContactTransferQueryRequest) (*contact.ContactTransferReply, error)
	ContactTransferRequest(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error)
	ContactTransferAccept(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error)
	ContactTransferReject(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error)
	MaintenanceList(context.Context, *RegistryInfo) (*maintenance.MaintenanceListReply, error)
	MaintenanceInfo(context.Context, *maintenance.MaintenanceInfoRequest) (*maintenance.MaintenanceInfoReply, error)
	Poll(EPPProxy_PollServer) error
	NominetTagList(context.Context, *RegistryInfo) (*nominet.NominetTagListReply, error)
	NominetAccept(context.Context, *nominet.HandshakeAcceptRequest) (*nominet.HandshakeReply, error)
	NominetReject(context.Context, *nominet.HandshakeRejectRequest) (*nominet.HandshakeReply, error)
	NominetRelease(context.Context, *nominet.ReleaseRequest) (*nominet.ReleaseReply, error)
	NominetContactValidate(context.Context, *nominet.ContactValidateRequest) (*nominet.ContactValidateReply, error)
	NominetLock(context.Context, *nominet.LockRequest) (*nominet.LockReply, error)
	NominetUnlock(context.Context, *nominet.LockRequest) (*nominet.LockReply, error)
	BalanceInfo(context.Context, *RegistryInfo) (*BalanceReply, error)
	HitPointsInfo(context.Context, *RegistryInfo) (*eurid.HitPointsReply, error)
	RegistrationLimitInfo(context.Context, *RegistryInfo) (*eurid.RegistrationLimitReply, error)
	DNSQualityInfo(context.Context, *eurid.DNSQualityRequest) (*eurid.DNSQualityReply, error)
	DNSSECEligibilityInfo(context.Context, *eurid.DNSSECEligibilityRequest) (*eurid.DNSSECEligibilityReply, error)
	TMCHMarkCheck(context.Context, *tmch.MarkCheckRequest) (*tmch.MarkCheckResponse, error)
	TMCHMarkCreate(context.Context, *tmch.MarkCreateRequest) (*tmch.MarkCreateResponse, error)
	TMCHMarkInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkInfoResponse, error)
	TMCHMarkSMDInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkEncodedSMDInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkFileInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error)
	TMCHMarkUpdate(context.Context, *tmch.MarkUpdateRequest) (*tmch.MarkUpdateResponse, error)
	TMCHMarkRenew(context.Context, *tmch.MarkRenewRequest) (*tmch.MarkRenewResponse, error)
	TMCHMarkTransferInitiate(context.Context, *tmch.MarkTransferInitiateRequest) (*tmch.MarkTransferInitiateResponse, error)
	TMCHMarkTransfer(context.Context, *tmch.MarkTransferRequest) (*tmch.MarkTransferResponse, error)
	DACDomain(context.Context, *dac.DomainRequest) (*dac.DomainResponse, error)
	DACUsage(context.Context, *dac.UsageRequest) (*dac.UsageResponse, error)
	DACLimits(context.Context, *dac.UsageRequest) (*dac.UsageResponse, error)
	mustEmbedUnimplementedEPPProxyServer()
}

// UnimplementedEPPProxyServer must be embedded to have forward compatible implementations.
type UnimplementedEPPProxyServer struct {
}

func (UnimplementedEPPProxyServer) DomainCheck(context.Context, *domain.DomainCheckRequest) (*domain.DomainCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCheck not implemented")
}
func (UnimplementedEPPProxyServer) DomainClaimsCheck(context.Context, *domain.DomainClaimsCheckRequest) (*domain.DomainClaimsCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainClaimsCheck not implemented")
}
func (UnimplementedEPPProxyServer) DomainTrademarkCheck(context.Context, *domain.DomainTrademarkCheckRequest) (*domain.DomainClaimsCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTrademarkCheck not implemented")
}
func (UnimplementedEPPProxyServer) DomainInfo(context.Context, *domain.DomainInfoRequest) (*domain.DomainInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainInfo not implemented")
}
func (UnimplementedEPPProxyServer) DomainCreate(context.Context, *domain.DomainCreateRequest) (*domain.DomainCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (UnimplementedEPPProxyServer) DomainDelete(context.Context, *domain.DomainDeleteRequest) (*domain.DomainDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDelete not implemented")
}
func (UnimplementedEPPProxyServer) DomainUpdate(context.Context, *domain.DomainUpdateRequest) (*domain.DomainUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainUpdate not implemented")
}
func (UnimplementedEPPProxyServer) DomainRenew(context.Context, *domain.DomainRenewRequest) (*domain.DomainRenewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainRenew not implemented")
}
func (UnimplementedEPPProxyServer) DomainTransferQuery(context.Context, *domain.DomainTransferQueryRequest) (*domain.DomainTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTransferQuery not implemented")
}
func (UnimplementedEPPProxyServer) DomainTransferRequest(context.Context, *domain.DomainTransferRequestRequest) (*domain.DomainTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTransferRequest not implemented")
}
func (UnimplementedEPPProxyServer) DomainTransferCancel(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTransferCancel not implemented")
}
func (UnimplementedEPPProxyServer) DomainTransferAccept(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTransferAccept not implemented")
}
func (UnimplementedEPPProxyServer) DomainTransferReject(context.Context, *domain.DomainTransferAcceptRejectRequest) (*domain.DomainTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainTransferReject not implemented")
}
func (UnimplementedEPPProxyServer) DomainRestoreRequest(context.Context, *rgp.RequestRequest) (*rgp.RestoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainRestoreRequest not implemented")
}
func (UnimplementedEPPProxyServer) DomainSync(context.Context, *domain.DomainSyncRequest) (*domain.DomainUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainSync not implemented")
}
func (UnimplementedEPPProxyServer) HostCheck(context.Context, *host.HostCheckRequest) (*host.HostCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostCheck not implemented")
}
func (UnimplementedEPPProxyServer) HostInfo(context.Context, *host.HostInfoRequest) (*host.HostInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostInfo not implemented")
}
func (UnimplementedEPPProxyServer) HostCreate(context.Context, *host.HostCreateRequest) (*host.HostCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostCreate not implemented")
}
func (UnimplementedEPPProxyServer) HostDelete(context.Context, *host.HostDeleteRequest) (*host.HostDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostDelete not implemented")
}
func (UnimplementedEPPProxyServer) HostUpdate(context.Context, *host.HostUpdateRequest) (*host.HostUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostUpdate not implemented")
}
func (UnimplementedEPPProxyServer) ContactCheck(context.Context, *contact.ContactCheckRequest) (*contact.ContactCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactCheck not implemented")
}
func (UnimplementedEPPProxyServer) ContactInfo(context.Context, *contact.ContactInfoRequest) (*contact.ContactInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactInfo not implemented")
}
func (UnimplementedEPPProxyServer) ContactCreate(context.Context, *contact.ContactCreateRequest) (*contact.ContactCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactCreate not implemented")
}
func (UnimplementedEPPProxyServer) ContactDelete(context.Context, *contact.ContactDeleteRequest) (*contact.ContactDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactDelete not implemented")
}
func (UnimplementedEPPProxyServer) ContactUpdate(context.Context, *contact.ContactUpdateRequest) (*contact.ContactUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUpdate not implemented")
}
func (UnimplementedEPPProxyServer) ContactTransferQuery(context.Context, *contact.ContactTransferQueryRequest) (*contact.ContactTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactTransferQuery not implemented")
}
func (UnimplementedEPPProxyServer) ContactTransferRequest(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactTransferRequest not implemented")
}
func (UnimplementedEPPProxyServer) ContactTransferAccept(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactTransferAccept not implemented")
}
func (UnimplementedEPPProxyServer) ContactTransferReject(context.Context, *contact.ContactTransferRequestRequest) (*contact.ContactTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactTransferReject not implemented")
}
func (UnimplementedEPPProxyServer) MaintenanceList(context.Context, *RegistryInfo) (*maintenance.MaintenanceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintenanceList not implemented")
}
func (UnimplementedEPPProxyServer) MaintenanceInfo(context.Context, *maintenance.MaintenanceInfoRequest) (*maintenance.MaintenanceInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintenanceInfo not implemented")
}
func (UnimplementedEPPProxyServer) Poll(EPPProxy_PollServer) error {
	return status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (UnimplementedEPPProxyServer) NominetTagList(context.Context, *RegistryInfo) (*nominet.NominetTagListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetTagList not implemented")
}
func (UnimplementedEPPProxyServer) NominetAccept(context.Context, *nominet.HandshakeAcceptRequest) (*nominet.HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetAccept not implemented")
}
func (UnimplementedEPPProxyServer) NominetReject(context.Context, *nominet.HandshakeRejectRequest) (*nominet.HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetReject not implemented")
}
func (UnimplementedEPPProxyServer) NominetRelease(context.Context, *nominet.ReleaseRequest) (*nominet.ReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetRelease not implemented")
}
func (UnimplementedEPPProxyServer) NominetContactValidate(context.Context, *nominet.ContactValidateRequest) (*nominet.ContactValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetContactValidate not implemented")
}
func (UnimplementedEPPProxyServer) NominetLock(context.Context, *nominet.LockRequest) (*nominet.LockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetLock not implemented")
}
func (UnimplementedEPPProxyServer) NominetUnlock(context.Context, *nominet.LockRequest) (*nominet.LockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominetUnlock not implemented")
}
func (UnimplementedEPPProxyServer) BalanceInfo(context.Context, *RegistryInfo) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceInfo not implemented")
}
func (UnimplementedEPPProxyServer) HitPointsInfo(context.Context, *RegistryInfo) (*eurid.HitPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitPointsInfo not implemented")
}
func (UnimplementedEPPProxyServer) RegistrationLimitInfo(context.Context, *RegistryInfo) (*eurid.RegistrationLimitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationLimitInfo not implemented")
}
func (UnimplementedEPPProxyServer) DNSQualityInfo(context.Context, *eurid.DNSQualityRequest) (*eurid.DNSQualityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSQualityInfo not implemented")
}
func (UnimplementedEPPProxyServer) DNSSECEligibilityInfo(context.Context, *eurid.DNSSECEligibilityRequest) (*eurid.DNSSECEligibilityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSSECEligibilityInfo not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkCheck(context.Context, *tmch.MarkCheckRequest) (*tmch.MarkCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkCheck not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkCreate(context.Context, *tmch.MarkCreateRequest) (*tmch.MarkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkCreate not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkInfo not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkSMDInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkSMDInfo not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkEncodedSMDInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkEncodedSMDInfo not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkFileInfo(context.Context, *tmch.MarkInfoRequest) (*tmch.MarkSMDInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkFileInfo not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkUpdate(context.Context, *tmch.MarkUpdateRequest) (*tmch.MarkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkUpdate not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkRenew(context.Context, *tmch.MarkRenewRequest) (*tmch.MarkRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkRenew not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkTransferInitiate(context.Context, *tmch.MarkTransferInitiateRequest) (*tmch.MarkTransferInitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkTransferInitiate not implemented")
}
func (UnimplementedEPPProxyServer) TMCHMarkTransfer(context.Context, *tmch.MarkTransferRequest) (*tmch.MarkTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMCHMarkTransfer not implemented")
}
func (UnimplementedEPPProxyServer) DACDomain(context.Context, *dac.DomainRequest) (*dac.DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DACDomain not implemented")
}
func (UnimplementedEPPProxyServer) DACUsage(context.Context, *dac.UsageRequest) (*dac.UsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DACUsage not implemented")
}
func (UnimplementedEPPProxyServer) DACLimits(context.Context, *dac.UsageRequest) (*dac.UsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DACLimits not implemented")
}
func (UnimplementedEPPProxyServer) mustEmbedUnimplementedEPPProxyServer() {}

// UnsafeEPPProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EPPProxyServer will
// result in compilation errors.
type UnsafeEPPProxyServer interface {
	mustEmbedUnimplementedEPPProxyServer()
}

func RegisterEPPProxyServer(s grpc.ServiceRegistrar, srv EPPProxyServer) {
	s.RegisterService(&EPPProxy_ServiceDesc, srv)
}

func _EPPProxy_DomainCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainCheck(ctx, req.(*domain.DomainCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainClaimsCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainClaimsCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainClaimsCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainClaimsCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainClaimsCheck(ctx, req.(*domain.DomainClaimsCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTrademarkCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTrademarkCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTrademarkCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTrademarkCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTrademarkCheck(ctx, req.(*domain.DomainTrademarkCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainInfo(ctx, req.(*domain.DomainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainCreate(ctx, req.(*domain.DomainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainDelete(ctx, req.(*domain.DomainDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainUpdate(ctx, req.(*domain.DomainUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainRenew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainRenew(ctx, req.(*domain.DomainRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTransferQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTransferQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTransferQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTransferQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTransferQuery(ctx, req.(*domain.DomainTransferQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTransferRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTransferRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTransferRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTransferRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTransferRequest(ctx, req.(*domain.DomainTransferRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTransferCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTransferAcceptRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTransferCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTransferCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTransferCancel(ctx, req.(*domain.DomainTransferAcceptRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTransferAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTransferAcceptRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTransferAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTransferAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTransferAccept(ctx, req.(*domain.DomainTransferAcceptRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainTransferReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainTransferAcceptRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainTransferReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainTransferReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainTransferReject(ctx, req.(*domain.DomainTransferAcceptRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainRestoreRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rgp.RequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainRestoreRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainRestoreRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainRestoreRequest(ctx, req.(*rgp.RequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DomainSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DomainSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DomainSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DomainSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DomainSync(ctx, req.(*domain.DomainSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HostCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(host.HostCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HostCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HostCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HostCheck(ctx, req.(*host.HostCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(host.HostInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HostInfo(ctx, req.(*host.HostInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(host.HostCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HostCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HostCreate(ctx, req.(*host.HostCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(host.HostDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HostDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HostDelete(ctx, req.(*host.HostDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(host.HostUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HostUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HostUpdate(ctx, req.(*host.HostUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactCheck(ctx, req.(*contact.ContactCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactInfo(ctx, req.(*contact.ContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactCreate(ctx, req.(*contact.ContactCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactDelete(ctx, req.(*contact.ContactDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactUpdate(ctx, req.(*contact.ContactUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactTransferQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactTransferQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactTransferQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactTransferQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactTransferQuery(ctx, req.(*contact.ContactTransferQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactTransferRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactTransferRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactTransferRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactTransferRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactTransferRequest(ctx, req.(*contact.ContactTransferRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactTransferAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactTransferRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactTransferAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactTransferAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactTransferAccept(ctx, req.(*contact.ContactTransferRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_ContactTransferReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contact.ContactTransferRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).ContactTransferReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/ContactTransferReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).ContactTransferReject(ctx, req.(*contact.ContactTransferRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_MaintenanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).MaintenanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/MaintenanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).MaintenanceList(ctx, req.(*RegistryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_MaintenanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(maintenance.MaintenanceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).MaintenanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/MaintenanceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).MaintenanceInfo(ctx, req.(*maintenance.MaintenanceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_Poll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EPPProxyServer).Poll(&ePPProxyPollServer{stream})
}

type EPPProxy_PollServer interface {
	Send(*PollReply) error
	Recv() (*PollAck, error)
	grpc.ServerStream
}

type ePPProxyPollServer struct {
	grpc.ServerStream
}

func (x *ePPProxyPollServer) Send(m *PollReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ePPProxyPollServer) Recv() (*PollAck, error) {
	m := new(PollAck)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EPPProxy_NominetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetTagList(ctx, req.(*RegistryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.HandshakeAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetAccept(ctx, req.(*nominet.HandshakeAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.HandshakeRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetReject(ctx, req.(*nominet.HandshakeRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetRelease(ctx, req.(*nominet.ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetContactValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.ContactValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetContactValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetContactValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetContactValidate(ctx, req.(*nominet.ContactValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetLock(ctx, req.(*nominet.LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_NominetUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nominet.LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).NominetUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/NominetUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).NominetUnlock(ctx, req.(*nominet.LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_BalanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).BalanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/BalanceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).BalanceInfo(ctx, req.(*RegistryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_HitPointsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).HitPointsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/HitPointsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).HitPointsInfo(ctx, req.(*RegistryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_RegistrationLimitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).RegistrationLimitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/RegistrationLimitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).RegistrationLimitInfo(ctx, req.(*RegistryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DNSQualityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eurid.DNSQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DNSQualityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DNSQualityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DNSQualityInfo(ctx, req.(*eurid.DNSQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DNSSECEligibilityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eurid.DNSSECEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DNSSECEligibilityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DNSSECEligibilityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DNSSECEligibilityInfo(ctx, req.(*eurid.DNSSECEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkCheck(ctx, req.(*tmch.MarkCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkCreate(ctx, req.(*tmch.MarkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkInfo(ctx, req.(*tmch.MarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkSMDInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkSMDInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkSMDInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkSMDInfo(ctx, req.(*tmch.MarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkEncodedSMDInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkEncodedSMDInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkEncodedSMDInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkEncodedSMDInfo(ctx, req.(*tmch.MarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkFileInfo(ctx, req.(*tmch.MarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkUpdate(ctx, req.(*tmch.MarkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkRenew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkRenew(ctx, req.(*tmch.MarkRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkTransferInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkTransferInitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkTransferInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkTransferInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkTransferInitiate(ctx, req.(*tmch.MarkTransferInitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_TMCHMarkTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tmch.MarkTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).TMCHMarkTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/TMCHMarkTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).TMCHMarkTransfer(ctx, req.(*tmch.MarkTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DACDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dac.DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DACDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DACDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DACDomain(ctx, req.(*dac.DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DACUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dac.UsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DACUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DACUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DACUsage(ctx, req.(*dac.UsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPPProxy_DACLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dac.UsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPPProxyServer).DACLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epp.EPPProxy/DACLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPPProxyServer).DACLimits(ctx, req.(*dac.UsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EPPProxy_ServiceDesc is the grpc.ServiceDesc for EPPProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EPPProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "epp.EPPProxy",
	HandlerType: (*EPPProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DomainCheck",
			Handler:    _EPPProxy_DomainCheck_Handler,
		},
		{
			MethodName: "DomainClaimsCheck",
			Handler:    _EPPProxy_DomainClaimsCheck_Handler,
		},
		{
			MethodName: "DomainTrademarkCheck",
			Handler:    _EPPProxy_DomainTrademarkCheck_Handler,
		},
		{
			MethodName: "DomainInfo",
			Handler:    _EPPProxy_DomainInfo_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _EPPProxy_DomainCreate_Handler,
		},
		{
			MethodName: "DomainDelete",
			Handler:    _EPPProxy_DomainDelete_Handler,
		},
		{
			MethodName: "DomainUpdate",
			Handler:    _EPPProxy_DomainUpdate_Handler,
		},
		{
			MethodName: "DomainRenew",
			Handler:    _EPPProxy_DomainRenew_Handler,
		},
		{
			MethodName: "DomainTransferQuery",
			Handler:    _EPPProxy_DomainTransferQuery_Handler,
		},
		{
			MethodName: "DomainTransferRequest",
			Handler:    _EPPProxy_DomainTransferRequest_Handler,
		},
		{
			MethodName: "DomainTransferCancel",
			Handler:    _EPPProxy_DomainTransferCancel_Handler,
		},
		{
			MethodName: "DomainTransferAccept",
			Handler:    _EPPProxy_DomainTransferAccept_Handler,
		},
		{
			MethodName: "DomainTransferReject",
			Handler:    _EPPProxy_DomainTransferReject_Handler,
		},
		{
			MethodName: "DomainRestoreRequest",
			Handler:    _EPPProxy_DomainRestoreRequest_Handler,
		},
		{
			MethodName: "DomainSync",
			Handler:    _EPPProxy_DomainSync_Handler,
		},
		{
			MethodName: "HostCheck",
			Handler:    _EPPProxy_HostCheck_Handler,
		},
		{
			MethodName: "HostInfo",
			Handler:    _EPPProxy_HostInfo_Handler,
		},
		{
			MethodName: "HostCreate",
			Handler:    _EPPProxy_HostCreate_Handler,
		},
		{
			MethodName: "HostDelete",
			Handler:    _EPPProxy_HostDelete_Handler,
		},
		{
			MethodName: "HostUpdate",
			Handler:    _EPPProxy_HostUpdate_Handler,
		},
		{
			MethodName: "ContactCheck",
			Handler:    _EPPProxy_ContactCheck_Handler,
		},
		{
			MethodName: "ContactInfo",
			Handler:    _EPPProxy_ContactInfo_Handler,
		},
		{
			MethodName: "ContactCreate",
			Handler:    _EPPProxy_ContactCreate_Handler,
		},
		{
			MethodName: "ContactDelete",
			Handler:    _EPPProxy_ContactDelete_Handler,
		},
		{
			MethodName: "ContactUpdate",
			Handler:    _EPPProxy_ContactUpdate_Handler,
		},
		{
			MethodName: "ContactTransferQuery",
			Handler:    _EPPProxy_ContactTransferQuery_Handler,
		},
		{
			MethodName: "ContactTransferRequest",
			Handler:    _EPPProxy_ContactTransferRequest_Handler,
		},
		{
			MethodName: "ContactTransferAccept",
			Handler:    _EPPProxy_ContactTransferAccept_Handler,
		},
		{
			MethodName: "ContactTransferReject",
			Handler:    _EPPProxy_ContactTransferReject_Handler,
		},
		{
			MethodName: "MaintenanceList",
			Handler:    _EPPProxy_MaintenanceList_Handler,
		},
		{
			MethodName: "MaintenanceInfo",
			Handler:    _EPPProxy_MaintenanceInfo_Handler,
		},
		{
			MethodName: "NominetTagList",
			Handler:    _EPPProxy_NominetTagList_Handler,
		},
		{
			MethodName: "NominetAccept",
			Handler:    _EPPProxy_NominetAccept_Handler,
		},
		{
			MethodName: "NominetReject",
			Handler:    _EPPProxy_NominetReject_Handler,
		},
		{
			MethodName: "NominetRelease",
			Handler:    _EPPProxy_NominetRelease_Handler,
		},
		{
			MethodName: "NominetContactValidate",
			Handler:    _EPPProxy_NominetContactValidate_Handler,
		},
		{
			MethodName: "NominetLock",
			Handler:    _EPPProxy_NominetLock_Handler,
		},
		{
			MethodName: "NominetUnlock",
			Handler:    _EPPProxy_NominetUnlock_Handler,
		},
		{
			MethodName: "BalanceInfo",
			Handler:    _EPPProxy_BalanceInfo_Handler,
		},
		{
			MethodName: "HitPointsInfo",
			Handler:    _EPPProxy_HitPointsInfo_Handler,
		},
		{
			MethodName: "RegistrationLimitInfo",
			Handler:    _EPPProxy_RegistrationLimitInfo_Handler,
		},
		{
			MethodName: "DNSQualityInfo",
			Handler:    _EPPProxy_DNSQualityInfo_Handler,
		},
		{
			MethodName: "DNSSECEligibilityInfo",
			Handler:    _EPPProxy_DNSSECEligibilityInfo_Handler,
		},
		{
			MethodName: "TMCHMarkCheck",
			Handler:    _EPPProxy_TMCHMarkCheck_Handler,
		},
		{
			MethodName: "TMCHMarkCreate",
			Handler:    _EPPProxy_TMCHMarkCreate_Handler,
		},
		{
			MethodName: "TMCHMarkInfo",
			Handler:    _EPPProxy_TMCHMarkInfo_Handler,
		},
		{
			MethodName: "TMCHMarkSMDInfo",
			Handler:    _EPPProxy_TMCHMarkSMDInfo_Handler,
		},
		{
			MethodName: "TMCHMarkEncodedSMDInfo",
			Handler:    _EPPProxy_TMCHMarkEncodedSMDInfo_Handler,
		},
		{
			MethodName: "TMCHMarkFileInfo",
			Handler:    _EPPProxy_TMCHMarkFileInfo_Handler,
		},
		{
			MethodName: "TMCHMarkUpdate",
			Handler:    _EPPProxy_TMCHMarkUpdate_Handler,
		},
		{
			MethodName: "TMCHMarkRenew",
			Handler:    _EPPProxy_TMCHMarkRenew_Handler,
		},
		{
			MethodName: "TMCHMarkTransferInitiate",
			Handler:    _EPPProxy_TMCHMarkTransferInitiate_Handler,
		},
		{
			MethodName: "TMCHMarkTransfer",
			Handler:    _EPPProxy_TMCHMarkTransfer_Handler,
		},
		{
			MethodName: "DACDomain",
			Handler:    _EPPProxy_DACDomain_Handler,
		},
		{
			MethodName: "DACUsage",
			Handler:    _EPPProxy_DACUsage_Handler,
		},
		{
			MethodName: "DACLimits",
			Handler:    _EPPProxy_DACLimits_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Poll",
			Handler:       _EPPProxy_Poll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epp.proto",
}

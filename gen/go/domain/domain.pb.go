// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: domain/domain.proto

package domain

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	domain_common "github.com/as207960/epp-proxy/gen/go/epp/domain_common"
	eurid "github.com/as207960/epp-proxy/gen/go/epp/eurid"
	fee "github.com/as207960/epp-proxy/gen/go/epp/fee"
	isnic "github.com/as207960/epp-proxy/gen/go/epp/isnic"
	launch "github.com/as207960/epp-proxy/gen/go/epp/launch"
	personal_registration "github.com/as207960/epp-proxy/gen/go/epp/personal_registration"
	rgp "github.com/as207960/epp-proxy/gen/go/epp/rgp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DomainHostsType int32

const (
	DomainHostsType_All         DomainHostsType = 0
	DomainHostsType_Delegated   DomainHostsType = 1
	DomainHostsType_Subordinate DomainHostsType = 2
	DomainHostsType_None        DomainHostsType = 3
)

// Enum value maps for DomainHostsType.
var (
	DomainHostsType_name = map[int32]string{
		0: "All",
		1: "Delegated",
		2: "Subordinate",
		3: "None",
	}
	DomainHostsType_value = map[string]int32{
		"All":         0,
		"Delegated":   1,
		"Subordinate": 2,
		"None":        3,
	}
)

func (x DomainHostsType) Enum() *DomainHostsType {
	p := new(DomainHostsType)
	*p = x
	return p
}

func (x DomainHostsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainHostsType) Descriptor() protoreflect.EnumDescriptor {
	return file_domain_domain_proto_enumTypes[0].Descriptor()
}

func (DomainHostsType) Type() protoreflect.EnumType {
	return &file_domain_domain_proto_enumTypes[0]
}

func (x DomainHostsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainHostsType.Descriptor instead.
func (DomainHostsType) EnumDescriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{0}
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{0}
}

func (x *Contact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contact) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NameServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Server:
	//	*NameServer_HostObj
	//	*NameServer_HostName
	Server    isNameServer_Server `protobuf_oneof:"server"`
	Addresses []*common.IPAddress `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	EuridIdn  *eurid.IDN          `protobuf:"bytes,4,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
}

func (x *NameServer) Reset() {
	*x = NameServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameServer) ProtoMessage() {}

func (x *NameServer) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameServer.ProtoReflect.Descriptor instead.
func (*NameServer) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{1}
}

func (m *NameServer) GetServer() isNameServer_Server {
	if m != nil {
		return m.Server
	}
	return nil
}

func (x *NameServer) GetHostObj() string {
	if x, ok := x.GetServer().(*NameServer_HostObj); ok {
		return x.HostObj
	}
	return ""
}

func (x *NameServer) GetHostName() string {
	if x, ok := x.GetServer().(*NameServer_HostName); ok {
		return x.HostName
	}
	return ""
}

func (x *NameServer) GetAddresses() []*common.IPAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *NameServer) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

type isNameServer_Server interface {
	isNameServer_Server()
}

type NameServer_HostObj struct {
	HostObj string `protobuf:"bytes,1,opt,name=host_obj,json=hostObj,proto3,oneof"`
}

type NameServer_HostName struct {
	HostName string `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3,oneof"`
}

func (*NameServer_HostObj) isNameServer_Server() {}

func (*NameServer_HostName) isNameServer_Server() {}

type DomainHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts DomainHostsType `protobuf:"varint,1,opt,name=hosts,proto3,enum=epp.domain.DomainHostsType" json:"hosts,omitempty"`
}

func (x *DomainHosts) Reset() {
	*x = DomainHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainHosts) ProtoMessage() {}

func (x *DomainHosts) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainHosts.ProtoReflect.Descriptor instead.
func (*DomainHosts) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{2}
}

func (x *DomainHosts) GetHosts() DomainHostsType {
	if x != nil {
		return x.Hosts
	}
	return DomainHostsType_All
}

type DomainCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FeeCheck     *fee.FeeCheck           `protobuf:"bytes,2,opt,name=fee_check,json=feeCheck,proto3" json:"fee_check,omitempty"`
	LaunchCheck  *launch.Phase           `protobuf:"bytes,3,opt,name=launch_check,json=launchCheck,proto3" json:"launch_check,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DomainCheckRequest) Reset() {
	*x = DomainCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCheckRequest) ProtoMessage() {}

func (x *DomainCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCheckRequest.ProtoReflect.Descriptor instead.
func (*DomainCheckRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{3}
}

func (x *DomainCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainCheckRequest) GetFeeCheck() *fee.FeeCheck {
	if x != nil {
		return x.FeeCheck
	}
	return nil
}

func (x *DomainCheckRequest) GetLaunchCheck() *launch.Phase {
	if x != nil {
		return x.LaunchCheck
	}
	return nil
}

func (x *DomainCheckRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DomainClaimsCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LaunchCheck  *launch.Phase           `protobuf:"bytes,2,opt,name=launch_check,json=launchCheck,proto3" json:"launch_check,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DomainClaimsCheckRequest) Reset() {
	*x = DomainClaimsCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainClaimsCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainClaimsCheckRequest) ProtoMessage() {}

func (x *DomainClaimsCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainClaimsCheckRequest.ProtoReflect.Descriptor instead.
func (*DomainClaimsCheckRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{4}
}

func (x *DomainClaimsCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainClaimsCheckRequest) GetLaunchCheck() *launch.Phase {
	if x != nil {
		return x.LaunchCheck
	}
	return nil
}

func (x *DomainClaimsCheckRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DomainTrademarkCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DomainTrademarkCheckRequest) Reset() {
	*x = DomainTrademarkCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTrademarkCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTrademarkCheckRequest) ProtoMessage() {}

func (x *DomainTrademarkCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTrademarkCheckRequest.ProtoReflect.Descriptor instead.
func (*DomainTrademarkCheckRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{5}
}

func (x *DomainTrademarkCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainTrademarkCheckRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DomainCheckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available      bool                    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Reason         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	FeeCheck       *fee.FeeCheckData       `protobuf:"bytes,4,opt,name=fee_check,json=feeCheck,proto3" json:"fee_check,omitempty"`
	DonutsFeeCheck *fee.DonutsFeeData      `protobuf:"bytes,5,opt,name=donuts_fee_check,json=donutsFeeCheck,proto3" json:"donuts_fee_check,omitempty"`
	RegistryName   string                  `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp        *common.CommandResponse `protobuf:"bytes,6,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn       *eurid.IDN              `protobuf:"bytes,7,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
	EuridData      *eurid.DomainCheckData  `protobuf:"bytes,8,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
}

func (x *DomainCheckReply) Reset() {
	*x = DomainCheckReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCheckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCheckReply) ProtoMessage() {}

func (x *DomainCheckReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCheckReply.ProtoReflect.Descriptor instead.
func (*DomainCheckReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{6}
}

func (x *DomainCheckReply) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *DomainCheckReply) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *DomainCheckReply) GetFeeCheck() *fee.FeeCheckData {
	if x != nil {
		return x.FeeCheck
	}
	return nil
}

func (x *DomainCheckReply) GetDonutsFeeCheck() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeCheck
	}
	return nil
}

func (x *DomainCheckReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainCheckReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainCheckReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

func (x *DomainCheckReply) GetEuridData() *eurid.DomainCheckData {
	if x != nil {
		return x.EuridData
	}
	return nil
}

type DomainClaimsCheckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists       bool                    `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	ClaimsKeys   []*launch.ClaimsKey     `protobuf:"bytes,2,rep,name=claims_keys,json=claimsKeys,proto3" json:"claims_keys,omitempty"`
	RegistryName string                  `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *DomainClaimsCheckReply) Reset() {
	*x = DomainClaimsCheckReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainClaimsCheckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainClaimsCheckReply) ProtoMessage() {}

func (x *DomainClaimsCheckReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainClaimsCheckReply.ProtoReflect.Descriptor instead.
func (*DomainClaimsCheckReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{7}
}

func (x *DomainClaimsCheckReply) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *DomainClaimsCheckReply) GetClaimsKeys() []*launch.ClaimsKey {
	if x != nil {
		return x.ClaimsKeys
	}
	return nil
}

func (x *DomainClaimsCheckReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainClaimsCheckReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type DomainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AuthInfo           *wrapperspb.StringValue  `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	Hosts              *DomainHosts             `protobuf:"bytes,6,opt,name=hosts,proto3" json:"hosts,omitempty"`
	LaunchInfo         *launch.LaunchInfo       `protobuf:"bytes,3,opt,name=launch_info,json=launchInfo,proto3" json:"launch_info,omitempty"`
	RegistryName       *wrapperspb.StringValue  `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement *fee.DonutsFeeData       `protobuf:"bytes,5,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	EuridData          *eurid.DomainInfoRequest `protobuf:"bytes,7,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
}

func (x *DomainInfoRequest) Reset() {
	*x = DomainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfoRequest) ProtoMessage() {}

func (x *DomainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfoRequest.ProtoReflect.Descriptor instead.
func (*DomainInfoRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{8}
}

func (x *DomainInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainInfoRequest) GetAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *DomainInfoRequest) GetHosts() *DomainHosts {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *DomainInfoRequest) GetLaunchInfo() *launch.LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *DomainInfoRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainInfoRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainInfoRequest) GetEuridData() *eurid.DomainInfoRequest {
	if x != nil {
		return x.EuridData
	}
	return nil
}

type DomainInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryId           string                                          `protobuf:"bytes,2,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	Statuses             []domain_common.DomainStatus                    `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=epp.domain_common.DomainStatus" json:"statuses,omitempty"`
	Registrant           string                                          `protobuf:"bytes,4,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Contacts             []*Contact                                      `protobuf:"bytes,5,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Nameservers          []*NameServer                                   `protobuf:"bytes,6,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	Hosts                []string                                        `protobuf:"bytes,7,rep,name=hosts,proto3" json:"hosts,omitempty"`
	ClientId             string                                          `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientCreatedId      *wrapperspb.StringValue                         `protobuf:"bytes,9,opt,name=client_created_id,json=clientCreatedId,proto3" json:"client_created_id,omitempty"`
	CreationDate         *timestamppb.Timestamp                          `protobuf:"bytes,10,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	ExpiryDate           *timestamppb.Timestamp                          `protobuf:"bytes,11,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	LastUpdatedClient    *wrapperspb.StringValue                         `protobuf:"bytes,12,opt,name=last_updated_client,json=lastUpdatedClient,proto3" json:"last_updated_client,omitempty"`
	LastUpdatedDate      *timestamppb.Timestamp                          `protobuf:"bytes,13,opt,name=last_updated_date,json=lastUpdatedDate,proto3" json:"last_updated_date,omitempty"`
	LastTransferDate     *timestamppb.Timestamp                          `protobuf:"bytes,14,opt,name=last_transfer_date,json=lastTransferDate,proto3" json:"last_transfer_date,omitempty"`
	RegistryName         string                                          `protobuf:"bytes,15,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	RgpState             []rgp.RGPState                                  `protobuf:"varint,16,rep,packed,name=rgp_state,json=rgpState,proto3,enum=epp.rgp.RGPState" json:"rgp_state,omitempty"`
	AuthInfo             *wrapperspb.StringValue                         `protobuf:"bytes,17,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	SecDns               *SecDNSData                                     `protobuf:"bytes,18,opt,name=sec_dns,json=secDns,proto3" json:"sec_dns,omitempty"`
	LaunchInfo           *launch.LaunchInfoData                          `protobuf:"bytes,19,opt,name=launch_info,json=launchInfo,proto3" json:"launch_info,omitempty"`
	DonutsFeeData        *fee.DonutsFeeData                              `protobuf:"bytes,20,opt,name=donuts_fee_data,json=donutsFeeData,proto3" json:"donuts_fee_data,omitempty"`
	VerisignWhoisInfo    *VerisignWhoisInfo                              `protobuf:"bytes,21,opt,name=verisign_whois_info,json=verisignWhoisInfo,proto3" json:"verisign_whois_info,omitempty"`
	CmdResp              *common.CommandResponse                         `protobuf:"bytes,22,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn             *eurid.IDN                                      `protobuf:"bytes,23,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
	EuridData            *eurid.DomainInfo                               `protobuf:"bytes,24,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
	IsnicInfo            *isnic.DomainInfo                               `protobuf:"bytes,25,opt,name=isnic_info,json=isnicInfo,proto3" json:"isnic_info,omitempty"`
	PersonalRegistration *personal_registration.PersonalRegistrationInfo `protobuf:"bytes,26,opt,name=personal_registration,json=personalRegistration,proto3" json:"personal_registration,omitempty"`
}

func (x *DomainInfoReply) Reset() {
	*x = DomainInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfoReply) ProtoMessage() {}

func (x *DomainInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfoReply.ProtoReflect.Descriptor instead.
func (*DomainInfoReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{9}
}

func (x *DomainInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainInfoReply) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DomainInfoReply) GetStatuses() []domain_common.DomainStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *DomainInfoReply) GetRegistrant() string {
	if x != nil {
		return x.Registrant
	}
	return ""
}

func (x *DomainInfoReply) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *DomainInfoReply) GetNameservers() []*NameServer {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *DomainInfoReply) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *DomainInfoReply) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DomainInfoReply) GetClientCreatedId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientCreatedId
	}
	return nil
}

func (x *DomainInfoReply) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *DomainInfoReply) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *DomainInfoReply) GetLastUpdatedClient() *wrapperspb.StringValue {
	if x != nil {
		return x.LastUpdatedClient
	}
	return nil
}

func (x *DomainInfoReply) GetLastUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedDate
	}
	return nil
}

func (x *DomainInfoReply) GetLastTransferDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransferDate
	}
	return nil
}

func (x *DomainInfoReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainInfoReply) GetRgpState() []rgp.RGPState {
	if x != nil {
		return x.RgpState
	}
	return nil
}

func (x *DomainInfoReply) GetAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *DomainInfoReply) GetSecDns() *SecDNSData {
	if x != nil {
		return x.SecDns
	}
	return nil
}

func (x *DomainInfoReply) GetLaunchInfo() *launch.LaunchInfoData {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *DomainInfoReply) GetDonutsFeeData() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeData
	}
	return nil
}

func (x *DomainInfoReply) GetVerisignWhoisInfo() *VerisignWhoisInfo {
	if x != nil {
		return x.VerisignWhoisInfo
	}
	return nil
}

func (x *DomainInfoReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainInfoReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

func (x *DomainInfoReply) GetEuridData() *eurid.DomainInfo {
	if x != nil {
		return x.EuridData
	}
	return nil
}

func (x *DomainInfoReply) GetIsnicInfo() *isnic.DomainInfo {
	if x != nil {
		return x.IsnicInfo
	}
	return nil
}

func (x *DomainInfoReply) GetPersonalRegistration() *personal_registration.PersonalRegistrationInfo {
	if x != nil {
		return x.PersonalRegistration
	}
	return nil
}

type DomainCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period               *common.Period                                  `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Registrant           string                                          `protobuf:"bytes,3,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Contacts             []*Contact                                      `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Nameservers          []*NameServer                                   `protobuf:"bytes,5,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	AuthInfo             string                                          `protobuf:"bytes,6,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	SecDns               *SecDNSData                                     `protobuf:"bytes,7,opt,name=sec_dns,json=secDns,proto3" json:"sec_dns,omitempty"`
	LaunchData           *launch.LaunchCreate                            `protobuf:"bytes,8,opt,name=launch_data,json=launchData,proto3" json:"launch_data,omitempty"`
	RegistryName         *wrapperspb.StringValue                         `protobuf:"bytes,9,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement   *fee.DonutsFeeData                              `protobuf:"bytes,10,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	FeeAgreement         *fee.FeeAgreement                               `protobuf:"bytes,11,opt,name=fee_agreement,json=feeAgreement,proto3" json:"fee_agreement,omitempty"`
	EuridData            *eurid.DomainCreateExtension                    `protobuf:"bytes,12,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
	IsnicPayment         *isnic.PaymentInfo                              `protobuf:"bytes,13,opt,name=isnic_payment,json=isnicPayment,proto3" json:"isnic_payment,omitempty"`
	PersonalRegistration *personal_registration.PersonalRegistrationInfo `protobuf:"bytes,14,opt,name=personal_registration,json=personalRegistration,proto3" json:"personal_registration,omitempty"`
}

func (x *DomainCreateRequest) Reset() {
	*x = DomainCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateRequest) ProtoMessage() {}

func (x *DomainCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateRequest.ProtoReflect.Descriptor instead.
func (*DomainCreateRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{10}
}

func (x *DomainCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainCreateRequest) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *DomainCreateRequest) GetRegistrant() string {
	if x != nil {
		return x.Registrant
	}
	return ""
}

func (x *DomainCreateRequest) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *DomainCreateRequest) GetNameservers() []*NameServer {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *DomainCreateRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *DomainCreateRequest) GetSecDns() *SecDNSData {
	if x != nil {
		return x.SecDns
	}
	return nil
}

func (x *DomainCreateRequest) GetLaunchData() *launch.LaunchCreate {
	if x != nil {
		return x.LaunchData
	}
	return nil
}

func (x *DomainCreateRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainCreateRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainCreateRequest) GetFeeAgreement() *fee.FeeAgreement {
	if x != nil {
		return x.FeeAgreement
	}
	return nil
}

func (x *DomainCreateRequest) GetEuridData() *eurid.DomainCreateExtension {
	if x != nil {
		return x.EuridData
	}
	return nil
}

func (x *DomainCreateRequest) GetIsnicPayment() *isnic.PaymentInfo {
	if x != nil {
		return x.IsnicPayment
	}
	return nil
}

func (x *DomainCreateRequest) GetPersonalRegistration() *personal_registration.PersonalRegistrationInfo {
	if x != nil {
		return x.PersonalRegistration
	}
	return nil
}

type DomainCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pending              bool                                              `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	CreationDate         *timestamppb.Timestamp                            `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	ExpiryDate           *timestamppb.Timestamp                            `protobuf:"bytes,4,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	FeeData              *fee.FeeData                                      `protobuf:"bytes,6,opt,name=fee_data,json=feeData,proto3" json:"fee_data,omitempty"`
	DonutsFeeData        *fee.DonutsFeeData                                `protobuf:"bytes,9,opt,name=donuts_fee_data,json=donutsFeeData,proto3" json:"donuts_fee_data,omitempty"`
	LaunchData           *launch.LaunchData                                `protobuf:"bytes,8,opt,name=launch_data,json=launchData,proto3" json:"launch_data,omitempty"`
	RegistryName         string                                            `protobuf:"bytes,5,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp              *common.CommandResponse                           `protobuf:"bytes,10,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn             *eurid.IDN                                        `protobuf:"bytes,11,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
	PersonalRegistration *personal_registration.PersonalRegistrationCreate `protobuf:"bytes,12,opt,name=personal_registration,json=personalRegistration,proto3" json:"personal_registration,omitempty"`
}

func (x *DomainCreateReply) Reset() {
	*x = DomainCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateReply) ProtoMessage() {}

func (x *DomainCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateReply.ProtoReflect.Descriptor instead.
func (*DomainCreateReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{11}
}

func (x *DomainCreateReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainCreateReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *DomainCreateReply) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *DomainCreateReply) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *DomainCreateReply) GetFeeData() *fee.FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *DomainCreateReply) GetDonutsFeeData() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeData
	}
	return nil
}

func (x *DomainCreateReply) GetLaunchData() *launch.LaunchData {
	if x != nil {
		return x.LaunchData
	}
	return nil
}

func (x *DomainCreateReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainCreateReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainCreateReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

func (x *DomainCreateReply) GetPersonalRegistration() *personal_registration.PersonalRegistrationCreate {
	if x != nil {
		return x.PersonalRegistration
	}
	return nil
}

type DomainDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LaunchData         *launch.LaunchData           `protobuf:"bytes,2,opt,name=launch_data,json=launchData,proto3" json:"launch_data,omitempty"`
	RegistryName       *wrapperspb.StringValue      `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement *fee.DonutsFeeData           `protobuf:"bytes,4,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	EuridData          *eurid.DomainDeleteExtension `protobuf:"bytes,5,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
}

func (x *DomainDeleteRequest) Reset() {
	*x = DomainDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDeleteRequest) ProtoMessage() {}

func (x *DomainDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDeleteRequest.ProtoReflect.Descriptor instead.
func (*DomainDeleteRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{12}
}

func (x *DomainDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainDeleteRequest) GetLaunchData() *launch.LaunchData {
	if x != nil {
		return x.LaunchData
	}
	return nil
}

func (x *DomainDeleteRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainDeleteRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainDeleteRequest) GetEuridData() *eurid.DomainDeleteExtension {
	if x != nil {
		return x.EuridData
	}
	return nil
}

type DomainDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending      bool                    `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	FeeData      *fee.FeeData            `protobuf:"bytes,3,opt,name=fee_data,json=feeData,proto3" json:"fee_data,omitempty"`
	RegistryName string                  `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,5,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn     *eurid.IDN              `protobuf:"bytes,6,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
}

func (x *DomainDeleteReply) Reset() {
	*x = DomainDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDeleteReply) ProtoMessage() {}

func (x *DomainDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDeleteReply.ProtoReflect.Descriptor instead.
func (*DomainDeleteReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{13}
}

func (x *DomainDeleteReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *DomainDeleteReply) GetFeeData() *fee.FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *DomainDeleteReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainDeleteReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainDeleteReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

type DomainUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Add                []*DomainUpdateRequest_Param `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Remove             []*DomainUpdateRequest_Param `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	NewRegistrant      *wrapperspb.StringValue      `protobuf:"bytes,4,opt,name=new_registrant,json=newRegistrant,proto3" json:"new_registrant,omitempty"`
	NewAuthInfo        *wrapperspb.StringValue      `protobuf:"bytes,5,opt,name=new_auth_info,json=newAuthInfo,proto3" json:"new_auth_info,omitempty"`
	SecDns             *UpdateSecDNSData            `protobuf:"bytes,6,opt,name=sec_dns,json=secDns,proto3" json:"sec_dns,omitempty"`
	LaunchData         *launch.LaunchData           `protobuf:"bytes,7,opt,name=launch_data,json=launchData,proto3" json:"launch_data,omitempty"`
	RegistryName       *wrapperspb.StringValue      `protobuf:"bytes,8,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement *fee.DonutsFeeData           `protobuf:"bytes,9,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	FeeAgreement       *fee.FeeAgreement            `protobuf:"bytes,10,opt,name=fee_agreement,json=feeAgreement,proto3" json:"fee_agreement,omitempty"`
	EuridData          *eurid.DomainUpdateExtension `protobuf:"bytes,11,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
	IsnicInfo          *isnic.DomainUpdate          `protobuf:"bytes,12,opt,name=isnic_info,json=isnicInfo,proto3" json:"isnic_info,omitempty"`
}

func (x *DomainUpdateRequest) Reset() {
	*x = DomainUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainUpdateRequest) ProtoMessage() {}

func (x *DomainUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainUpdateRequest.ProtoReflect.Descriptor instead.
func (*DomainUpdateRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{14}
}

func (x *DomainUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainUpdateRequest) GetAdd() []*DomainUpdateRequest_Param {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *DomainUpdateRequest) GetRemove() []*DomainUpdateRequest_Param {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *DomainUpdateRequest) GetNewRegistrant() *wrapperspb.StringValue {
	if x != nil {
		return x.NewRegistrant
	}
	return nil
}

func (x *DomainUpdateRequest) GetNewAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.NewAuthInfo
	}
	return nil
}

func (x *DomainUpdateRequest) GetSecDns() *UpdateSecDNSData {
	if x != nil {
		return x.SecDns
	}
	return nil
}

func (x *DomainUpdateRequest) GetLaunchData() *launch.LaunchData {
	if x != nil {
		return x.LaunchData
	}
	return nil
}

func (x *DomainUpdateRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainUpdateRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainUpdateRequest) GetFeeAgreement() *fee.FeeAgreement {
	if x != nil {
		return x.FeeAgreement
	}
	return nil
}

func (x *DomainUpdateRequest) GetEuridData() *eurid.DomainUpdateExtension {
	if x != nil {
		return x.EuridData
	}
	return nil
}

func (x *DomainUpdateRequest) GetIsnicInfo() *isnic.DomainUpdate {
	if x != nil {
		return x.IsnicInfo
	}
	return nil
}

type DomainSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	Month        uint32                  `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
	Day          uint32                  `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *DomainSyncRequest) Reset() {
	*x = DomainSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSyncRequest) ProtoMessage() {}

func (x *DomainSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSyncRequest.ProtoReflect.Descriptor instead.
func (*DomainSyncRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{15}
}

func (x *DomainSyncRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainSyncRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainSyncRequest) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *DomainSyncRequest) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type DomainUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending       bool                    `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	FeeData       *fee.FeeData            `protobuf:"bytes,3,opt,name=fee_data,json=feeData,proto3" json:"fee_data,omitempty"`
	DonutsFeeData *fee.DonutsFeeData      `protobuf:"bytes,5,opt,name=donuts_fee_data,json=donutsFeeData,proto3" json:"donuts_fee_data,omitempty"`
	RegistryName  string                  `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp       *common.CommandResponse `protobuf:"bytes,6,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *DomainUpdateReply) Reset() {
	*x = DomainUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainUpdateReply) ProtoMessage() {}

func (x *DomainUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainUpdateReply.ProtoReflect.Descriptor instead.
func (*DomainUpdateReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{16}
}

func (x *DomainUpdateReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *DomainUpdateReply) GetFeeData() *fee.FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *DomainUpdateReply) GetDonutsFeeData() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeData
	}
	return nil
}

func (x *DomainUpdateReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainUpdateReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type DomainRenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period             *common.Period          `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	CurrentExpiryDate  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=current_expiry_date,json=currentExpiryDate,proto3" json:"current_expiry_date,omitempty"`
	RegistryName       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement *fee.DonutsFeeData      `protobuf:"bytes,5,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	FeeAgreement       *fee.FeeAgreement       `protobuf:"bytes,6,opt,name=fee_agreement,json=feeAgreement,proto3" json:"fee_agreement,omitempty"`
	IsnicPayment       *isnic.PaymentInfo      `protobuf:"bytes,7,opt,name=isnic_payment,json=isnicPayment,proto3" json:"isnic_payment,omitempty"`
}

func (x *DomainRenewRequest) Reset() {
	*x = DomainRenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainRenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainRenewRequest) ProtoMessage() {}

func (x *DomainRenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainRenewRequest.ProtoReflect.Descriptor instead.
func (*DomainRenewRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{17}
}

func (x *DomainRenewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainRenewRequest) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *DomainRenewRequest) GetCurrentExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentExpiryDate
	}
	return nil
}

func (x *DomainRenewRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainRenewRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainRenewRequest) GetFeeAgreement() *fee.FeeAgreement {
	if x != nil {
		return x.FeeAgreement
	}
	return nil
}

func (x *DomainRenewRequest) GetIsnicPayment() *isnic.PaymentInfo {
	if x != nil {
		return x.IsnicPayment
	}
	return nil
}

type DomainRenewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Pending              bool                                              `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	ExpiryDate           *timestamppb.Timestamp                            `protobuf:"bytes,2,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	FeeData              *fee.FeeData                                      `protobuf:"bytes,4,opt,name=fee_data,json=feeData,proto3" json:"fee_data,omitempty"`
	DonutsFeeData        *fee.DonutsFeeData                                `protobuf:"bytes,7,opt,name=donuts_fee_data,json=donutsFeeData,proto3" json:"donuts_fee_data,omitempty"`
	RegistryName         string                                            `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp              *common.CommandResponse                           `protobuf:"bytes,8,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn             *eurid.IDN                                        `protobuf:"bytes,9,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
	EuridData            *eurid.DomainRenewInfo                            `protobuf:"bytes,10,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
	PersonalRegistration *personal_registration.PersonalRegistrationCreate `protobuf:"bytes,11,opt,name=personal_registration,json=personalRegistration,proto3" json:"personal_registration,omitempty"`
}

func (x *DomainRenewReply) Reset() {
	*x = DomainRenewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainRenewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainRenewReply) ProtoMessage() {}

func (x *DomainRenewReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainRenewReply.ProtoReflect.Descriptor instead.
func (*DomainRenewReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{18}
}

func (x *DomainRenewReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainRenewReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *DomainRenewReply) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *DomainRenewReply) GetFeeData() *fee.FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *DomainRenewReply) GetDonutsFeeData() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeData
	}
	return nil
}

func (x *DomainRenewReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainRenewReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainRenewReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

func (x *DomainRenewReply) GetEuridData() *eurid.DomainRenewInfo {
	if x != nil {
		return x.EuridData
	}
	return nil
}

func (x *DomainRenewReply) GetPersonalRegistration() *personal_registration.PersonalRegistrationCreate {
	if x != nil {
		return x.PersonalRegistration
	}
	return nil
}

type DomainTransferQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AuthInfo     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DomainTransferQueryRequest) Reset() {
	*x = DomainTransferQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferQueryRequest) ProtoMessage() {}

func (x *DomainTransferQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferQueryRequest.ProtoReflect.Descriptor instead.
func (*DomainTransferQueryRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{19}
}

func (x *DomainTransferQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainTransferQueryRequest) GetAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *DomainTransferQueryRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DomainTransferRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period             *common.Period                 `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	AuthInfo           string                         `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName       *wrapperspb.StringValue        `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	DonutsFeeAgreement *fee.DonutsFeeData             `protobuf:"bytes,5,opt,name=donuts_fee_agreement,json=donutsFeeAgreement,proto3" json:"donuts_fee_agreement,omitempty"`
	FeeAgreement       *fee.FeeAgreement              `protobuf:"bytes,6,opt,name=fee_agreement,json=feeAgreement,proto3" json:"fee_agreement,omitempty"`
	EuridData          *eurid.DomainTransferExtension `protobuf:"bytes,7,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
}

func (x *DomainTransferRequestRequest) Reset() {
	*x = DomainTransferRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferRequestRequest) ProtoMessage() {}

func (x *DomainTransferRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferRequestRequest.ProtoReflect.Descriptor instead.
func (*DomainTransferRequestRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{20}
}

func (x *DomainTransferRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainTransferRequestRequest) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *DomainTransferRequestRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *DomainTransferRequestRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

func (x *DomainTransferRequestRequest) GetDonutsFeeAgreement() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeAgreement
	}
	return nil
}

func (x *DomainTransferRequestRequest) GetFeeAgreement() *fee.FeeAgreement {
	if x != nil {
		return x.FeeAgreement
	}
	return nil
}

func (x *DomainTransferRequestRequest) GetEuridData() *eurid.DomainTransferExtension {
	if x != nil {
		return x.EuridData
	}
	return nil
}

type DomainTransferAcceptRejectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AuthInfo     string                  `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DomainTransferAcceptRejectRequest) Reset() {
	*x = DomainTransferAcceptRejectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferAcceptRejectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferAcceptRejectRequest) ProtoMessage() {}

func (x *DomainTransferAcceptRejectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferAcceptRejectRequest.ProtoReflect.Descriptor instead.
func (*DomainTransferAcceptRejectRequest) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{21}
}

func (x *DomainTransferAcceptRejectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainTransferAcceptRejectRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *DomainTransferAcceptRejectRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DomainTransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending              bool                                              `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Name                 string                                            `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Status               common.TransferStatus                             `protobuf:"varint,2,opt,name=status,proto3,enum=epp.common.TransferStatus" json:"status,omitempty"`
	RequestedClientId    string                                            `protobuf:"bytes,3,opt,name=requested_client_id,json=requestedClientId,proto3" json:"requested_client_id,omitempty"`
	RequestedDate        *timestamppb.Timestamp                            `protobuf:"bytes,4,opt,name=requested_date,json=requestedDate,proto3" json:"requested_date,omitempty"`
	ActClientId          string                                            `protobuf:"bytes,5,opt,name=act_client_id,json=actClientId,proto3" json:"act_client_id,omitempty"`
	ActDate              *timestamppb.Timestamp                            `protobuf:"bytes,6,opt,name=act_date,json=actDate,proto3" json:"act_date,omitempty"`
	ExpiryDate           *timestamppb.Timestamp                            `protobuf:"bytes,7,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	FeeData              *fee.FeeData                                      `protobuf:"bytes,9,opt,name=fee_data,json=feeData,proto3" json:"fee_data,omitempty"`
	DonutsFeeData        *fee.DonutsFeeData                                `protobuf:"bytes,11,opt,name=donuts_fee_data,json=donutsFeeData,proto3" json:"donuts_fee_data,omitempty"`
	RegistryName         string                                            `protobuf:"bytes,8,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	CmdResp              *common.CommandResponse                           `protobuf:"bytes,13,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	EuridIdn             *eurid.IDN                                        `protobuf:"bytes,14,opt,name=eurid_idn,json=euridIdn,proto3" json:"eurid_idn,omitempty"`
	EuridData            *eurid.DomainTransferInfo                         `protobuf:"bytes,15,opt,name=eurid_data,json=euridData,proto3" json:"eurid_data,omitempty"`
	PersonalRegistration *personal_registration.PersonalRegistrationCreate `protobuf:"bytes,16,opt,name=personal_registration,json=personalRegistration,proto3" json:"personal_registration,omitempty"`
}

func (x *DomainTransferReply) Reset() {
	*x = DomainTransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferReply) ProtoMessage() {}

func (x *DomainTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferReply.ProtoReflect.Descriptor instead.
func (*DomainTransferReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{22}
}

func (x *DomainTransferReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *DomainTransferReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainTransferReply) GetStatus() common.TransferStatus {
	if x != nil {
		return x.Status
	}
	return common.TransferStatus(0)
}

func (x *DomainTransferReply) GetRequestedClientId() string {
	if x != nil {
		return x.RequestedClientId
	}
	return ""
}

func (x *DomainTransferReply) GetRequestedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDate
	}
	return nil
}

func (x *DomainTransferReply) GetActClientId() string {
	if x != nil {
		return x.ActClientId
	}
	return ""
}

func (x *DomainTransferReply) GetActDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActDate
	}
	return nil
}

func (x *DomainTransferReply) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *DomainTransferReply) GetFeeData() *fee.FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *DomainTransferReply) GetDonutsFeeData() *fee.DonutsFeeData {
	if x != nil {
		return x.DonutsFeeData
	}
	return nil
}

func (x *DomainTransferReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *DomainTransferReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DomainTransferReply) GetEuridIdn() *eurid.IDN {
	if x != nil {
		return x.EuridIdn
	}
	return nil
}

func (x *DomainTransferReply) GetEuridData() *eurid.DomainTransferInfo {
	if x != nil {
		return x.EuridData
	}
	return nil
}

func (x *DomainTransferReply) GetPersonalRegistration() *personal_registration.PersonalRegistrationCreate {
	if x != nil {
		return x.PersonalRegistration
	}
	return nil
}

type SecDNSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSigLife *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_sig_life,json=maxSigLife,proto3" json:"max_sig_life,omitempty"`
	// Types that are assignable to Data:
	//	*SecDNSData_DsData
	//	*SecDNSData_KeyData
	Data isSecDNSData_Data `protobuf_oneof:"data"`
}

func (x *SecDNSData) Reset() {
	*x = SecDNSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDNSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDNSData) ProtoMessage() {}

func (x *SecDNSData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDNSData.ProtoReflect.Descriptor instead.
func (*SecDNSData) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{23}
}

func (x *SecDNSData) GetMaxSigLife() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSigLife
	}
	return nil
}

func (m *SecDNSData) GetData() isSecDNSData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SecDNSData) GetDsData() *SecDNSDSData {
	if x, ok := x.GetData().(*SecDNSData_DsData); ok {
		return x.DsData
	}
	return nil
}

func (x *SecDNSData) GetKeyData() *SecDNSKeyData {
	if x, ok := x.GetData().(*SecDNSData_KeyData); ok {
		return x.KeyData
	}
	return nil
}

type isSecDNSData_Data interface {
	isSecDNSData_Data()
}

type SecDNSData_DsData struct {
	DsData *SecDNSDSData `protobuf:"bytes,2,opt,name=ds_data,json=dsData,proto3,oneof"`
}

type SecDNSData_KeyData struct {
	KeyData *SecDNSKeyData `protobuf:"bytes,3,opt,name=key_data,json=keyData,proto3,oneof"`
}

func (*SecDNSData_DsData) isSecDNSData_Data() {}

func (*SecDNSData_KeyData) isSecDNSData_Data() {}

type SecDNSDSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SecDNSDSDatum `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SecDNSDSData) Reset() {
	*x = SecDNSDSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDNSDSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDNSDSData) ProtoMessage() {}

func (x *SecDNSDSData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDNSDSData.ProtoReflect.Descriptor instead.
func (*SecDNSDSData) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{24}
}

func (x *SecDNSDSData) GetData() []*SecDNSDSDatum {
	if x != nil {
		return x.Data
	}
	return nil
}

type SecDNSDSDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTag     uint32          `protobuf:"varint,1,opt,name=key_tag,json=keyTag,proto3" json:"key_tag,omitempty"`
	Algorithm  uint32          `protobuf:"varint,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	DigestType uint32          `protobuf:"varint,3,opt,name=digest_type,json=digestType,proto3" json:"digest_type,omitempty"`
	Digest     string          `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	KeyData    *SecDNSKeyDatum `protobuf:"bytes,5,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty"`
}

func (x *SecDNSDSDatum) Reset() {
	*x = SecDNSDSDatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDNSDSDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDNSDSDatum) ProtoMessage() {}

func (x *SecDNSDSDatum) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDNSDSDatum.ProtoReflect.Descriptor instead.
func (*SecDNSDSDatum) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{25}
}

func (x *SecDNSDSDatum) GetKeyTag() uint32 {
	if x != nil {
		return x.KeyTag
	}
	return 0
}

func (x *SecDNSDSDatum) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SecDNSDSDatum) GetDigestType() uint32 {
	if x != nil {
		return x.DigestType
	}
	return 0
}

func (x *SecDNSDSDatum) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *SecDNSDSDatum) GetKeyData() *SecDNSKeyDatum {
	if x != nil {
		return x.KeyData
	}
	return nil
}

type SecDNSKeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SecDNSKeyDatum `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SecDNSKeyData) Reset() {
	*x = SecDNSKeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDNSKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDNSKeyData) ProtoMessage() {}

func (x *SecDNSKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDNSKeyData.ProtoReflect.Descriptor instead.
func (*SecDNSKeyData) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{26}
}

func (x *SecDNSKeyData) GetData() []*SecDNSKeyDatum {
	if x != nil {
		return x.Data
	}
	return nil
}

type SecDNSKeyDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags     uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Protocol  uint32 `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Algorithm uint32 `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	PublicKey string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *SecDNSKeyDatum) Reset() {
	*x = SecDNSKeyDatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDNSKeyDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDNSKeyDatum) ProtoMessage() {}

func (x *SecDNSKeyDatum) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDNSKeyDatum.ProtoReflect.Descriptor instead.
func (*SecDNSKeyDatum) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{27}
}

func (x *SecDNSKeyDatum) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SecDNSKeyDatum) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *SecDNSKeyDatum) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SecDNSKeyDatum) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type UpdateSecDNSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urgent        *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=urgent,proto3" json:"urgent,omitempty"`
	NewMaxSigLife *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=new_max_sig_life,json=newMaxSigLife,proto3" json:"new_max_sig_life,omitempty"`
	// Types that are assignable to Add:
	//	*UpdateSecDNSData_AddDsData
	//	*UpdateSecDNSData_AddKeyData
	Add isUpdateSecDNSData_Add `protobuf_oneof:"add"`
	// Types that are assignable to Remove:
	//	*UpdateSecDNSData_All
	//	*UpdateSecDNSData_RemDsData
	//	*UpdateSecDNSData_RemKeyData
	Remove isUpdateSecDNSData_Remove `protobuf_oneof:"remove"`
}

func (x *UpdateSecDNSData) Reset() {
	*x = UpdateSecDNSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecDNSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecDNSData) ProtoMessage() {}

func (x *UpdateSecDNSData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecDNSData.ProtoReflect.Descriptor instead.
func (*UpdateSecDNSData) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateSecDNSData) GetUrgent() *wrapperspb.BoolValue {
	if x != nil {
		return x.Urgent
	}
	return nil
}

func (x *UpdateSecDNSData) GetNewMaxSigLife() *wrapperspb.Int64Value {
	if x != nil {
		return x.NewMaxSigLife
	}
	return nil
}

func (m *UpdateSecDNSData) GetAdd() isUpdateSecDNSData_Add {
	if m != nil {
		return m.Add
	}
	return nil
}

func (x *UpdateSecDNSData) GetAddDsData() *SecDNSDSData {
	if x, ok := x.GetAdd().(*UpdateSecDNSData_AddDsData); ok {
		return x.AddDsData
	}
	return nil
}

func (x *UpdateSecDNSData) GetAddKeyData() *SecDNSKeyData {
	if x, ok := x.GetAdd().(*UpdateSecDNSData_AddKeyData); ok {
		return x.AddKeyData
	}
	return nil
}

func (m *UpdateSecDNSData) GetRemove() isUpdateSecDNSData_Remove {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (x *UpdateSecDNSData) GetAll() bool {
	if x, ok := x.GetRemove().(*UpdateSecDNSData_All); ok {
		return x.All
	}
	return false
}

func (x *UpdateSecDNSData) GetRemDsData() *SecDNSDSData {
	if x, ok := x.GetRemove().(*UpdateSecDNSData_RemDsData); ok {
		return x.RemDsData
	}
	return nil
}

func (x *UpdateSecDNSData) GetRemKeyData() *SecDNSKeyData {
	if x, ok := x.GetRemove().(*UpdateSecDNSData_RemKeyData); ok {
		return x.RemKeyData
	}
	return nil
}

type isUpdateSecDNSData_Add interface {
	isUpdateSecDNSData_Add()
}

type UpdateSecDNSData_AddDsData struct {
	AddDsData *SecDNSDSData `protobuf:"bytes,3,opt,name=add_ds_data,json=addDsData,proto3,oneof"`
}

type UpdateSecDNSData_AddKeyData struct {
	AddKeyData *SecDNSKeyData `protobuf:"bytes,4,opt,name=add_key_data,json=addKeyData,proto3,oneof"`
}

func (*UpdateSecDNSData_AddDsData) isUpdateSecDNSData_Add() {}

func (*UpdateSecDNSData_AddKeyData) isUpdateSecDNSData_Add() {}

type isUpdateSecDNSData_Remove interface {
	isUpdateSecDNSData_Remove()
}

type UpdateSecDNSData_All struct {
	All bool `protobuf:"varint,5,opt,name=all,proto3,oneof"`
}

type UpdateSecDNSData_RemDsData struct {
	RemDsData *SecDNSDSData `protobuf:"bytes,6,opt,name=rem_ds_data,json=remDsData,proto3,oneof"`
}

type UpdateSecDNSData_RemKeyData struct {
	RemKeyData *SecDNSKeyData `protobuf:"bytes,7,opt,name=rem_key_data,json=remKeyData,proto3,oneof"`
}

func (*UpdateSecDNSData_All) isUpdateSecDNSData_Remove() {}

func (*UpdateSecDNSData_RemDsData) isUpdateSecDNSData_Remove() {}

func (*UpdateSecDNSData_RemKeyData) isUpdateSecDNSData_Remove() {}

type VerisignWhoisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrar   string                  `protobuf:"bytes,1,opt,name=registrar,proto3" json:"registrar,omitempty"`
	WhoisServer *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=whois_server,json=whoisServer,proto3" json:"whois_server,omitempty"`
	Url         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IrisServer  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=iris_server,json=irisServer,proto3" json:"iris_server,omitempty"`
}

func (x *VerisignWhoisInfo) Reset() {
	*x = VerisignWhoisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerisignWhoisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerisignWhoisInfo) ProtoMessage() {}

func (x *VerisignWhoisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerisignWhoisInfo.ProtoReflect.Descriptor instead.
func (*VerisignWhoisInfo) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{29}
}

func (x *VerisignWhoisInfo) GetRegistrar() string {
	if x != nil {
		return x.Registrar
	}
	return ""
}

func (x *VerisignWhoisInfo) GetWhoisServer() *wrapperspb.StringValue {
	if x != nil {
		return x.WhoisServer
	}
	return nil
}

func (x *VerisignWhoisInfo) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *VerisignWhoisInfo) GetIrisServer() *wrapperspb.StringValue {
	if x != nil {
		return x.IrisServer
	}
	return nil
}

type DomainPANReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Result              bool                    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	ServerTransactionId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=server_transaction_id,json=serverTransactionId,proto3" json:"server_transaction_id,omitempty"`
	ClientTransactionId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=client_transaction_id,json=clientTransactionId,proto3" json:"client_transaction_id,omitempty"`
	Date                *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *DomainPANReply) Reset() {
	*x = DomainPANReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainPANReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainPANReply) ProtoMessage() {}

func (x *DomainPANReply) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainPANReply.ProtoReflect.Descriptor instead.
func (*DomainPANReply) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{30}
}

func (x *DomainPANReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainPANReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DomainPANReply) GetServerTransactionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerTransactionId
	}
	return nil
}

func (x *DomainPANReply) GetClientTransactionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientTransactionId
	}
	return nil
}

func (x *DomainPANReply) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type DomainUpdateRequest_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Param:
	//	*DomainUpdateRequest_Param_Nameserver
	//	*DomainUpdateRequest_Param_Contact
	//	*DomainUpdateRequest_Param_State
	Param isDomainUpdateRequest_Param_Param `protobuf_oneof:"param"`
}

func (x *DomainUpdateRequest_Param) Reset() {
	*x = DomainUpdateRequest_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_domain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainUpdateRequest_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainUpdateRequest_Param) ProtoMessage() {}

func (x *DomainUpdateRequest_Param) ProtoReflect() protoreflect.Message {
	mi := &file_domain_domain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainUpdateRequest_Param.ProtoReflect.Descriptor instead.
func (*DomainUpdateRequest_Param) Descriptor() ([]byte, []int) {
	return file_domain_domain_proto_rawDescGZIP(), []int{14, 0}
}

func (m *DomainUpdateRequest_Param) GetParam() isDomainUpdateRequest_Param_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (x *DomainUpdateRequest_Param) GetNameserver() *NameServer {
	if x, ok := x.GetParam().(*DomainUpdateRequest_Param_Nameserver); ok {
		return x.Nameserver
	}
	return nil
}

func (x *DomainUpdateRequest_Param) GetContact() *Contact {
	if x, ok := x.GetParam().(*DomainUpdateRequest_Param_Contact); ok {
		return x.Contact
	}
	return nil
}

func (x *DomainUpdateRequest_Param) GetState() domain_common.DomainStatus {
	if x, ok := x.GetParam().(*DomainUpdateRequest_Param_State); ok {
		return x.State
	}
	return domain_common.DomainStatus(0)
}

type isDomainUpdateRequest_Param_Param interface {
	isDomainUpdateRequest_Param_Param()
}

type DomainUpdateRequest_Param_Nameserver struct {
	Nameserver *NameServer `protobuf:"bytes,1,opt,name=nameserver,proto3,oneof"`
}

type DomainUpdateRequest_Param_Contact struct {
	Contact *Contact `protobuf:"bytes,2,opt,name=contact,proto3,oneof"`
}

type DomainUpdateRequest_Param_State struct {
	State domain_common.DomainStatus `protobuf:"varint,3,opt,name=state,proto3,enum=epp.domain_common.DomainStatus,oneof"`
}

func (*DomainUpdateRequest_Param_Nameserver) isDomainUpdateRequest_Param_Param() {}

func (*DomainUpdateRequest_Param_Contact) isDomainUpdateRequest_Param_Param() {}

func (*DomainUpdateRequest_Param_State) isDomainUpdateRequest_Param_Param() {}

var File_domain_domain_proto protoreflect.FileDescriptor

var file_domain_domain_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x67, 0x70, 0x2f, 0x72, 0x67, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66, 0x65, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2f, 0x65, 0x75, 0x72,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2f, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x62,
	0x6a, 0x12, 0x1d, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x69,
	0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69, 0x64, 0x49,
	0x64, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0b,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xd1,
	0x01, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x1b,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x40, 0x0a, 0x10, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b,
	0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44,
	0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69, 0x64, 0x49, 0x64, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x75, 0x72,
	0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x94,
	0x03, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x14, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x0b, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x67, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x72, 0x67, 0x70, 0x2e, 0x52, 0x47, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x67,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x63, 0x44,
	0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3e, 0x0a, 0x0f, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x77, 0x68, 0x6f, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x73, 0x69,
	0x67, 0x6e, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x76, 0x65, 0x72,
	0x69, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f,
	0x69, 0x64, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69, 0x64,
	0x49, 0x64, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75,
	0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x73, 0x6e,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x68, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x06, 0x0a, 0x13, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x5f, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x63, 0x44, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x66, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0d, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e,
	0x69, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x69, 0x73, 0x6e, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x15,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x04, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46,
	0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x49, 0x64, 0x6e, 0x12, 0x6a, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb0, 0x02, 0x0a, 0x13, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74,
	0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73,
	0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xea, 0x01,
	0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64,
	0x5f, 0x69, 0x64, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x49, 0x64, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x91, 0x07, 0x0a, 0x13, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12,
	0x3d, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x43,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x63, 0x44, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x66, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x0a, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x73,
	0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xb4, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x92,
	0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e,
	0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0xa6, 0x03, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x64, 0x6f, 0x6e,
	0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65,
	0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x12, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x0d, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e,
	0x69, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x69, 0x73, 0x6e, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x04, 0x0a,
	0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x6f, 0x6e,
	0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e,
	0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f,
	0x69, 0x64, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69, 0x64,
	0x49, 0x64, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75,
	0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6a,
	0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x22, 0xae, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x87, 0x03, 0x0a, 0x1c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74,
	0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73,
	0x46, 0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d,
	0x66, 0x65, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x21,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x06, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x6f, 0x6e, 0x75, 0x74,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74,
	0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x73,
	0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x64,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75,
	0x72, 0x69, 0x64, 0x2e, 0x49, 0x44, 0x4e, 0x52, 0x08, 0x65, 0x75, 0x72, 0x69, 0x64, 0x49, 0x64,
	0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x6a, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x64, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x53, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x53,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x54, 0x61, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xa7,
	0x03, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x44, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x44, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x5f, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x44, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x44,
	0x4e, 0x53, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72,
	0x69, 0x73, 0x69, 0x67, 0x6e, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x0c,
	0x77, 0x68, 0x6f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a,
	0x0b, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x69, 0x72, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x90, 0x02, 0x0a,
	0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x41, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x2a,
	0x44, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x03, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70,
	0x70, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_domain_domain_proto_rawDescOnce sync.Once
	file_domain_domain_proto_rawDescData = file_domain_domain_proto_rawDesc
)

func file_domain_domain_proto_rawDescGZIP() []byte {
	file_domain_domain_proto_rawDescOnce.Do(func() {
		file_domain_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_domain_domain_proto_rawDescData)
	})
	return file_domain_domain_proto_rawDescData
}

var file_domain_domain_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_domain_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_domain_domain_proto_goTypes = []interface{}{
	(DomainHostsType)(0),                                     // 0: epp.domain.DomainHostsType
	(*Contact)(nil),                                          // 1: epp.domain.Contact
	(*NameServer)(nil),                                       // 2: epp.domain.NameServer
	(*DomainHosts)(nil),                                      // 3: epp.domain.DomainHosts
	(*DomainCheckRequest)(nil),                               // 4: epp.domain.DomainCheckRequest
	(*DomainClaimsCheckRequest)(nil),                         // 5: epp.domain.DomainClaimsCheckRequest
	(*DomainTrademarkCheckRequest)(nil),                      // 6: epp.domain.DomainTrademarkCheckRequest
	(*DomainCheckReply)(nil),                                 // 7: epp.domain.DomainCheckReply
	(*DomainClaimsCheckReply)(nil),                           // 8: epp.domain.DomainClaimsCheckReply
	(*DomainInfoRequest)(nil),                                // 9: epp.domain.DomainInfoRequest
	(*DomainInfoReply)(nil),                                  // 10: epp.domain.DomainInfoReply
	(*DomainCreateRequest)(nil),                              // 11: epp.domain.DomainCreateRequest
	(*DomainCreateReply)(nil),                                // 12: epp.domain.DomainCreateReply
	(*DomainDeleteRequest)(nil),                              // 13: epp.domain.DomainDeleteRequest
	(*DomainDeleteReply)(nil),                                // 14: epp.domain.DomainDeleteReply
	(*DomainUpdateRequest)(nil),                              // 15: epp.domain.DomainUpdateRequest
	(*DomainSyncRequest)(nil),                                // 16: epp.domain.DomainSyncRequest
	(*DomainUpdateReply)(nil),                                // 17: epp.domain.DomainUpdateReply
	(*DomainRenewRequest)(nil),                               // 18: epp.domain.DomainRenewRequest
	(*DomainRenewReply)(nil),                                 // 19: epp.domain.DomainRenewReply
	(*DomainTransferQueryRequest)(nil),                       // 20: epp.domain.DomainTransferQueryRequest
	(*DomainTransferRequestRequest)(nil),                     // 21: epp.domain.DomainTransferRequestRequest
	(*DomainTransferAcceptRejectRequest)(nil),                // 22: epp.domain.DomainTransferAcceptRejectRequest
	(*DomainTransferReply)(nil),                              // 23: epp.domain.DomainTransferReply
	(*SecDNSData)(nil),                                       // 24: epp.domain.SecDNSData
	(*SecDNSDSData)(nil),                                     // 25: epp.domain.SecDNSDSData
	(*SecDNSDSDatum)(nil),                                    // 26: epp.domain.SecDNSDSDatum
	(*SecDNSKeyData)(nil),                                    // 27: epp.domain.SecDNSKeyData
	(*SecDNSKeyDatum)(nil),                                   // 28: epp.domain.SecDNSKeyDatum
	(*UpdateSecDNSData)(nil),                                 // 29: epp.domain.UpdateSecDNSData
	(*VerisignWhoisInfo)(nil),                                // 30: epp.domain.VerisignWhoisInfo
	(*DomainPANReply)(nil),                                   // 31: epp.domain.DomainPANReply
	(*DomainUpdateRequest_Param)(nil),                        // 32: epp.domain.DomainUpdateRequest.Param
	(*common.IPAddress)(nil),                                 // 33: epp.common.IPAddress
	(*eurid.IDN)(nil),                                        // 34: epp.eurid.IDN
	(*fee.FeeCheck)(nil),                                     // 35: epp.fee.FeeCheck
	(*launch.Phase)(nil),                                     // 36: epp.launch.Phase
	(*wrapperspb.StringValue)(nil),                           // 37: google.protobuf.StringValue
	(*fee.FeeCheckData)(nil),                                 // 38: epp.fee.FeeCheckData
	(*fee.DonutsFeeData)(nil),                                // 39: epp.fee.DonutsFeeData
	(*common.CommandResponse)(nil),                           // 40: epp.common.CommandResponse
	(*eurid.DomainCheckData)(nil),                            // 41: epp.eurid.DomainCheckData
	(*launch.ClaimsKey)(nil),                                 // 42: epp.launch.ClaimsKey
	(*launch.LaunchInfo)(nil),                                // 43: epp.launch.LaunchInfo
	(*eurid.DomainInfoRequest)(nil),                          // 44: epp.eurid.DomainInfoRequest
	(domain_common.DomainStatus)(0),                          // 45: epp.domain_common.DomainStatus
	(*timestamppb.Timestamp)(nil),                            // 46: google.protobuf.Timestamp
	(rgp.RGPState)(0),                                        // 47: epp.rgp.RGPState
	(*launch.LaunchInfoData)(nil),                            // 48: epp.launch.LaunchInfoData
	(*eurid.DomainInfo)(nil),                                 // 49: epp.eurid.DomainInfo
	(*isnic.DomainInfo)(nil),                                 // 50: epp.isnic.DomainInfo
	(*personal_registration.PersonalRegistrationInfo)(nil),   // 51: epp.personal_registration.PersonalRegistrationInfo
	(*common.Period)(nil),                                    // 52: epp.common.Period
	(*launch.LaunchCreate)(nil),                              // 53: epp.launch.LaunchCreate
	(*fee.FeeAgreement)(nil),                                 // 54: epp.fee.FeeAgreement
	(*eurid.DomainCreateExtension)(nil),                      // 55: epp.eurid.DomainCreateExtension
	(*isnic.PaymentInfo)(nil),                                // 56: epp.isnic.PaymentInfo
	(*fee.FeeData)(nil),                                      // 57: epp.fee.FeeData
	(*launch.LaunchData)(nil),                                // 58: epp.launch.LaunchData
	(*personal_registration.PersonalRegistrationCreate)(nil), // 59: epp.personal_registration.PersonalRegistrationCreate
	(*eurid.DomainDeleteExtension)(nil),                      // 60: epp.eurid.DomainDeleteExtension
	(*eurid.DomainUpdateExtension)(nil),                      // 61: epp.eurid.DomainUpdateExtension
	(*isnic.DomainUpdate)(nil),                               // 62: epp.isnic.DomainUpdate
	(*eurid.DomainRenewInfo)(nil),                            // 63: epp.eurid.DomainRenewInfo
	(*eurid.DomainTransferExtension)(nil),                    // 64: epp.eurid.DomainTransferExtension
	(common.TransferStatus)(0),                               // 65: epp.common.TransferStatus
	(*eurid.DomainTransferInfo)(nil),                         // 66: epp.eurid.DomainTransferInfo
	(*wrapperspb.Int64Value)(nil),                            // 67: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                             // 68: google.protobuf.BoolValue
}
var file_domain_domain_proto_depIdxs = []int32{
	33,  // 0: epp.domain.NameServer.addresses:type_name -> epp.common.IPAddress
	34,  // 1: epp.domain.NameServer.eurid_idn:type_name -> epp.eurid.IDN
	0,   // 2: epp.domain.DomainHosts.hosts:type_name -> epp.domain.DomainHostsType
	35,  // 3: epp.domain.DomainCheckRequest.fee_check:type_name -> epp.fee.FeeCheck
	36,  // 4: epp.domain.DomainCheckRequest.launch_check:type_name -> epp.launch.Phase
	37,  // 5: epp.domain.DomainCheckRequest.registry_name:type_name -> google.protobuf.StringValue
	36,  // 6: epp.domain.DomainClaimsCheckRequest.launch_check:type_name -> epp.launch.Phase
	37,  // 7: epp.domain.DomainClaimsCheckRequest.registry_name:type_name -> google.protobuf.StringValue
	37,  // 8: epp.domain.DomainTrademarkCheckRequest.registry_name:type_name -> google.protobuf.StringValue
	37,  // 9: epp.domain.DomainCheckReply.reason:type_name -> google.protobuf.StringValue
	38,  // 10: epp.domain.DomainCheckReply.fee_check:type_name -> epp.fee.FeeCheckData
	39,  // 11: epp.domain.DomainCheckReply.donuts_fee_check:type_name -> epp.fee.DonutsFeeData
	40,  // 12: epp.domain.DomainCheckReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 13: epp.domain.DomainCheckReply.eurid_idn:type_name -> epp.eurid.IDN
	41,  // 14: epp.domain.DomainCheckReply.eurid_data:type_name -> epp.eurid.DomainCheckData
	42,  // 15: epp.domain.DomainClaimsCheckReply.claims_keys:type_name -> epp.launch.ClaimsKey
	40,  // 16: epp.domain.DomainClaimsCheckReply.cmd_resp:type_name -> epp.common.CommandResponse
	37,  // 17: epp.domain.DomainInfoRequest.auth_info:type_name -> google.protobuf.StringValue
	3,   // 18: epp.domain.DomainInfoRequest.hosts:type_name -> epp.domain.DomainHosts
	43,  // 19: epp.domain.DomainInfoRequest.launch_info:type_name -> epp.launch.LaunchInfo
	37,  // 20: epp.domain.DomainInfoRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 21: epp.domain.DomainInfoRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	44,  // 22: epp.domain.DomainInfoRequest.eurid_data:type_name -> epp.eurid.DomainInfoRequest
	45,  // 23: epp.domain.DomainInfoReply.statuses:type_name -> epp.domain_common.DomainStatus
	1,   // 24: epp.domain.DomainInfoReply.contacts:type_name -> epp.domain.Contact
	2,   // 25: epp.domain.DomainInfoReply.nameservers:type_name -> epp.domain.NameServer
	37,  // 26: epp.domain.DomainInfoReply.client_created_id:type_name -> google.protobuf.StringValue
	46,  // 27: epp.domain.DomainInfoReply.creation_date:type_name -> google.protobuf.Timestamp
	46,  // 28: epp.domain.DomainInfoReply.expiry_date:type_name -> google.protobuf.Timestamp
	37,  // 29: epp.domain.DomainInfoReply.last_updated_client:type_name -> google.protobuf.StringValue
	46,  // 30: epp.domain.DomainInfoReply.last_updated_date:type_name -> google.protobuf.Timestamp
	46,  // 31: epp.domain.DomainInfoReply.last_transfer_date:type_name -> google.protobuf.Timestamp
	47,  // 32: epp.domain.DomainInfoReply.rgp_state:type_name -> epp.rgp.RGPState
	37,  // 33: epp.domain.DomainInfoReply.auth_info:type_name -> google.protobuf.StringValue
	24,  // 34: epp.domain.DomainInfoReply.sec_dns:type_name -> epp.domain.SecDNSData
	48,  // 35: epp.domain.DomainInfoReply.launch_info:type_name -> epp.launch.LaunchInfoData
	39,  // 36: epp.domain.DomainInfoReply.donuts_fee_data:type_name -> epp.fee.DonutsFeeData
	30,  // 37: epp.domain.DomainInfoReply.verisign_whois_info:type_name -> epp.domain.VerisignWhoisInfo
	40,  // 38: epp.domain.DomainInfoReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 39: epp.domain.DomainInfoReply.eurid_idn:type_name -> epp.eurid.IDN
	49,  // 40: epp.domain.DomainInfoReply.eurid_data:type_name -> epp.eurid.DomainInfo
	50,  // 41: epp.domain.DomainInfoReply.isnic_info:type_name -> epp.isnic.DomainInfo
	51,  // 42: epp.domain.DomainInfoReply.personal_registration:type_name -> epp.personal_registration.PersonalRegistrationInfo
	52,  // 43: epp.domain.DomainCreateRequest.period:type_name -> epp.common.Period
	1,   // 44: epp.domain.DomainCreateRequest.contacts:type_name -> epp.domain.Contact
	2,   // 45: epp.domain.DomainCreateRequest.nameservers:type_name -> epp.domain.NameServer
	24,  // 46: epp.domain.DomainCreateRequest.sec_dns:type_name -> epp.domain.SecDNSData
	53,  // 47: epp.domain.DomainCreateRequest.launch_data:type_name -> epp.launch.LaunchCreate
	37,  // 48: epp.domain.DomainCreateRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 49: epp.domain.DomainCreateRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	54,  // 50: epp.domain.DomainCreateRequest.fee_agreement:type_name -> epp.fee.FeeAgreement
	55,  // 51: epp.domain.DomainCreateRequest.eurid_data:type_name -> epp.eurid.DomainCreateExtension
	56,  // 52: epp.domain.DomainCreateRequest.isnic_payment:type_name -> epp.isnic.PaymentInfo
	51,  // 53: epp.domain.DomainCreateRequest.personal_registration:type_name -> epp.personal_registration.PersonalRegistrationInfo
	46,  // 54: epp.domain.DomainCreateReply.creation_date:type_name -> google.protobuf.Timestamp
	46,  // 55: epp.domain.DomainCreateReply.expiry_date:type_name -> google.protobuf.Timestamp
	57,  // 56: epp.domain.DomainCreateReply.fee_data:type_name -> epp.fee.FeeData
	39,  // 57: epp.domain.DomainCreateReply.donuts_fee_data:type_name -> epp.fee.DonutsFeeData
	58,  // 58: epp.domain.DomainCreateReply.launch_data:type_name -> epp.launch.LaunchData
	40,  // 59: epp.domain.DomainCreateReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 60: epp.domain.DomainCreateReply.eurid_idn:type_name -> epp.eurid.IDN
	59,  // 61: epp.domain.DomainCreateReply.personal_registration:type_name -> epp.personal_registration.PersonalRegistrationCreate
	58,  // 62: epp.domain.DomainDeleteRequest.launch_data:type_name -> epp.launch.LaunchData
	37,  // 63: epp.domain.DomainDeleteRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 64: epp.domain.DomainDeleteRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	60,  // 65: epp.domain.DomainDeleteRequest.eurid_data:type_name -> epp.eurid.DomainDeleteExtension
	57,  // 66: epp.domain.DomainDeleteReply.fee_data:type_name -> epp.fee.FeeData
	40,  // 67: epp.domain.DomainDeleteReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 68: epp.domain.DomainDeleteReply.eurid_idn:type_name -> epp.eurid.IDN
	32,  // 69: epp.domain.DomainUpdateRequest.add:type_name -> epp.domain.DomainUpdateRequest.Param
	32,  // 70: epp.domain.DomainUpdateRequest.remove:type_name -> epp.domain.DomainUpdateRequest.Param
	37,  // 71: epp.domain.DomainUpdateRequest.new_registrant:type_name -> google.protobuf.StringValue
	37,  // 72: epp.domain.DomainUpdateRequest.new_auth_info:type_name -> google.protobuf.StringValue
	29,  // 73: epp.domain.DomainUpdateRequest.sec_dns:type_name -> epp.domain.UpdateSecDNSData
	58,  // 74: epp.domain.DomainUpdateRequest.launch_data:type_name -> epp.launch.LaunchData
	37,  // 75: epp.domain.DomainUpdateRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 76: epp.domain.DomainUpdateRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	54,  // 77: epp.domain.DomainUpdateRequest.fee_agreement:type_name -> epp.fee.FeeAgreement
	61,  // 78: epp.domain.DomainUpdateRequest.eurid_data:type_name -> epp.eurid.DomainUpdateExtension
	62,  // 79: epp.domain.DomainUpdateRequest.isnic_info:type_name -> epp.isnic.DomainUpdate
	37,  // 80: epp.domain.DomainSyncRequest.registry_name:type_name -> google.protobuf.StringValue
	57,  // 81: epp.domain.DomainUpdateReply.fee_data:type_name -> epp.fee.FeeData
	39,  // 82: epp.domain.DomainUpdateReply.donuts_fee_data:type_name -> epp.fee.DonutsFeeData
	40,  // 83: epp.domain.DomainUpdateReply.cmd_resp:type_name -> epp.common.CommandResponse
	52,  // 84: epp.domain.DomainRenewRequest.period:type_name -> epp.common.Period
	46,  // 85: epp.domain.DomainRenewRequest.current_expiry_date:type_name -> google.protobuf.Timestamp
	37,  // 86: epp.domain.DomainRenewRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 87: epp.domain.DomainRenewRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	54,  // 88: epp.domain.DomainRenewRequest.fee_agreement:type_name -> epp.fee.FeeAgreement
	56,  // 89: epp.domain.DomainRenewRequest.isnic_payment:type_name -> epp.isnic.PaymentInfo
	46,  // 90: epp.domain.DomainRenewReply.expiry_date:type_name -> google.protobuf.Timestamp
	57,  // 91: epp.domain.DomainRenewReply.fee_data:type_name -> epp.fee.FeeData
	39,  // 92: epp.domain.DomainRenewReply.donuts_fee_data:type_name -> epp.fee.DonutsFeeData
	40,  // 93: epp.domain.DomainRenewReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 94: epp.domain.DomainRenewReply.eurid_idn:type_name -> epp.eurid.IDN
	63,  // 95: epp.domain.DomainRenewReply.eurid_data:type_name -> epp.eurid.DomainRenewInfo
	59,  // 96: epp.domain.DomainRenewReply.personal_registration:type_name -> epp.personal_registration.PersonalRegistrationCreate
	37,  // 97: epp.domain.DomainTransferQueryRequest.auth_info:type_name -> google.protobuf.StringValue
	37,  // 98: epp.domain.DomainTransferQueryRequest.registry_name:type_name -> google.protobuf.StringValue
	52,  // 99: epp.domain.DomainTransferRequestRequest.period:type_name -> epp.common.Period
	37,  // 100: epp.domain.DomainTransferRequestRequest.registry_name:type_name -> google.protobuf.StringValue
	39,  // 101: epp.domain.DomainTransferRequestRequest.donuts_fee_agreement:type_name -> epp.fee.DonutsFeeData
	54,  // 102: epp.domain.DomainTransferRequestRequest.fee_agreement:type_name -> epp.fee.FeeAgreement
	64,  // 103: epp.domain.DomainTransferRequestRequest.eurid_data:type_name -> epp.eurid.DomainTransferExtension
	37,  // 104: epp.domain.DomainTransferAcceptRejectRequest.registry_name:type_name -> google.protobuf.StringValue
	65,  // 105: epp.domain.DomainTransferReply.status:type_name -> epp.common.TransferStatus
	46,  // 106: epp.domain.DomainTransferReply.requested_date:type_name -> google.protobuf.Timestamp
	46,  // 107: epp.domain.DomainTransferReply.act_date:type_name -> google.protobuf.Timestamp
	46,  // 108: epp.domain.DomainTransferReply.expiry_date:type_name -> google.protobuf.Timestamp
	57,  // 109: epp.domain.DomainTransferReply.fee_data:type_name -> epp.fee.FeeData
	39,  // 110: epp.domain.DomainTransferReply.donuts_fee_data:type_name -> epp.fee.DonutsFeeData
	40,  // 111: epp.domain.DomainTransferReply.cmd_resp:type_name -> epp.common.CommandResponse
	34,  // 112: epp.domain.DomainTransferReply.eurid_idn:type_name -> epp.eurid.IDN
	66,  // 113: epp.domain.DomainTransferReply.eurid_data:type_name -> epp.eurid.DomainTransferInfo
	59,  // 114: epp.domain.DomainTransferReply.personal_registration:type_name -> epp.personal_registration.PersonalRegistrationCreate
	67,  // 115: epp.domain.SecDNSData.max_sig_life:type_name -> google.protobuf.Int64Value
	25,  // 116: epp.domain.SecDNSData.ds_data:type_name -> epp.domain.SecDNSDSData
	27,  // 117: epp.domain.SecDNSData.key_data:type_name -> epp.domain.SecDNSKeyData
	26,  // 118: epp.domain.SecDNSDSData.data:type_name -> epp.domain.SecDNSDSDatum
	28,  // 119: epp.domain.SecDNSDSDatum.key_data:type_name -> epp.domain.SecDNSKeyDatum
	28,  // 120: epp.domain.SecDNSKeyData.data:type_name -> epp.domain.SecDNSKeyDatum
	68,  // 121: epp.domain.UpdateSecDNSData.urgent:type_name -> google.protobuf.BoolValue
	67,  // 122: epp.domain.UpdateSecDNSData.new_max_sig_life:type_name -> google.protobuf.Int64Value
	25,  // 123: epp.domain.UpdateSecDNSData.add_ds_data:type_name -> epp.domain.SecDNSDSData
	27,  // 124: epp.domain.UpdateSecDNSData.add_key_data:type_name -> epp.domain.SecDNSKeyData
	25,  // 125: epp.domain.UpdateSecDNSData.rem_ds_data:type_name -> epp.domain.SecDNSDSData
	27,  // 126: epp.domain.UpdateSecDNSData.rem_key_data:type_name -> epp.domain.SecDNSKeyData
	37,  // 127: epp.domain.VerisignWhoisInfo.whois_server:type_name -> google.protobuf.StringValue
	37,  // 128: epp.domain.VerisignWhoisInfo.url:type_name -> google.protobuf.StringValue
	37,  // 129: epp.domain.VerisignWhoisInfo.iris_server:type_name -> google.protobuf.StringValue
	37,  // 130: epp.domain.DomainPANReply.server_transaction_id:type_name -> google.protobuf.StringValue
	37,  // 131: epp.domain.DomainPANReply.client_transaction_id:type_name -> google.protobuf.StringValue
	46,  // 132: epp.domain.DomainPANReply.date:type_name -> google.protobuf.Timestamp
	2,   // 133: epp.domain.DomainUpdateRequest.Param.nameserver:type_name -> epp.domain.NameServer
	1,   // 134: epp.domain.DomainUpdateRequest.Param.contact:type_name -> epp.domain.Contact
	45,  // 135: epp.domain.DomainUpdateRequest.Param.state:type_name -> epp.domain_common.DomainStatus
	136, // [136:136] is the sub-list for method output_type
	136, // [136:136] is the sub-list for method input_type
	136, // [136:136] is the sub-list for extension type_name
	136, // [136:136] is the sub-list for extension extendee
	0,   // [0:136] is the sub-list for field type_name
}

func init() { file_domain_domain_proto_init() }
func file_domain_domain_proto_init() {
	if File_domain_domain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_domain_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainClaimsCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTrademarkCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCheckReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainClaimsCheckReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainRenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainRenewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferAcceptRejectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDNSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDNSDSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDNSDSDatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDNSKeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDNSKeyDatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecDNSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerisignWhoisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainPANReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_domain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainUpdateRequest_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_domain_domain_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NameServer_HostObj)(nil),
		(*NameServer_HostName)(nil),
	}
	file_domain_domain_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SecDNSData_DsData)(nil),
		(*SecDNSData_KeyData)(nil),
	}
	file_domain_domain_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*UpdateSecDNSData_AddDsData)(nil),
		(*UpdateSecDNSData_AddKeyData)(nil),
		(*UpdateSecDNSData_All)(nil),
		(*UpdateSecDNSData_RemDsData)(nil),
		(*UpdateSecDNSData_RemKeyData)(nil),
	}
	file_domain_domain_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*DomainUpdateRequest_Param_Nameserver)(nil),
		(*DomainUpdateRequest_Param_Contact)(nil),
		(*DomainUpdateRequest_Param_State)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_domain_domain_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_domain_domain_proto_goTypes,
		DependencyIndexes: file_domain_domain_proto_depIdxs,
		EnumInfos:         file_domain_domain_proto_enumTypes,
		MessageInfos:      file_domain_domain_proto_msgTypes,
	}.Build()
	File_domain_domain_proto = out.File
	file_domain_domain_proto_rawDesc = nil
	file_domain_domain_proto_goTypes = nil
	file_domain_domain_proto_depIdxs = nil
}

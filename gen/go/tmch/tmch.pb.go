// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: tmch/tmch.proto

package tmch

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	marks "github.com/as207960/epp-proxy/gen/go/epp/marks"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DocumentClass int32

const (
	DocumentClass_Other                          DocumentClass = 0
	DocumentClass_LicenseeDeclaration            DocumentClass = 1
	DocumentClass_AssigneeDeclaration            DocumentClass = 2
	DocumentClass_DeclarationProofOfUseOneSample DocumentClass = 3
	DocumentClass_OtherProofOfUse                DocumentClass = 4
	DocumentClass_CopyOfCourtOrder               DocumentClass = 5
)

// Enum value maps for DocumentClass.
var (
	DocumentClass_name = map[int32]string{
		0: "Other",
		1: "LicenseeDeclaration",
		2: "AssigneeDeclaration",
		3: "DeclarationProofOfUseOneSample",
		4: "OtherProofOfUse",
		5: "CopyOfCourtOrder",
	}
	DocumentClass_value = map[string]int32{
		"Other":                          0,
		"LicenseeDeclaration":            1,
		"AssigneeDeclaration":            2,
		"DeclarationProofOfUseOneSample": 3,
		"OtherProofOfUse":                4,
		"CopyOfCourtOrder":               5,
	}
)

func (x DocumentClass) Enum() *DocumentClass {
	p := new(DocumentClass)
	*p = x
	return p
}

func (x DocumentClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentClass) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[0].Descriptor()
}

func (DocumentClass) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[0]
}

func (x DocumentClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentClass.Descriptor instead.
func (DocumentClass) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{0}
}

type FileType int32

const (
	FileType_PDF FileType = 0
	FileType_JPG FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "PDF",
		1: "JPG",
	}
	FileType_value = map[string]int32{
		"PDF": 0,
		"JPG": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{1}
}

type MarkStatusType int32

const (
	MarkStatusType_Unknown     MarkStatusType = 0
	MarkStatusType_New         MarkStatusType = 1
	MarkStatusType_Verified    MarkStatusType = 2
	MarkStatusType_Incorrect   MarkStatusType = 3
	MarkStatusType_Corrected   MarkStatusType = 4
	MarkStatusType_Invalid     MarkStatusType = 5
	MarkStatusType_Expired     MarkStatusType = 6
	MarkStatusType_Deactivated MarkStatusType = 7
)

// Enum value maps for MarkStatusType.
var (
	MarkStatusType_name = map[int32]string{
		0: "Unknown",
		1: "New",
		2: "Verified",
		3: "Incorrect",
		4: "Corrected",
		5: "Invalid",
		6: "Expired",
		7: "Deactivated",
	}
	MarkStatusType_value = map[string]int32{
		"Unknown":     0,
		"New":         1,
		"Verified":    2,
		"Incorrect":   3,
		"Corrected":   4,
		"Invalid":     5,
		"Expired":     6,
		"Deactivated": 7,
	}
)

func (x MarkStatusType) Enum() *MarkStatusType {
	p := new(MarkStatusType)
	*p = x
	return p
}

func (x MarkStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[2].Descriptor()
}

func (MarkStatusType) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[2]
}

func (x MarkStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkStatusType.Descriptor instead.
func (MarkStatusType) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{2}
}

type MarkPOUStatusType int32

const (
	MarkPOUStatusType_POUNotSet    MarkPOUStatusType = 0
	MarkPOUStatusType_POUValid     MarkPOUStatusType = 1
	MarkPOUStatusType_POUInvalid   MarkPOUStatusType = 2
	MarkPOUStatusType_POUExpired   MarkPOUStatusType = 3
	MarkPOUStatusType_POUNA        MarkPOUStatusType = 4
	MarkPOUStatusType_POUNew       MarkPOUStatusType = 5
	MarkPOUStatusType_POUIncorrect MarkPOUStatusType = 6
	MarkPOUStatusType_POUCorrected MarkPOUStatusType = 7
)

// Enum value maps for MarkPOUStatusType.
var (
	MarkPOUStatusType_name = map[int32]string{
		0: "POUNotSet",
		1: "POUValid",
		2: "POUInvalid",
		3: "POUExpired",
		4: "POUNA",
		5: "POUNew",
		6: "POUIncorrect",
		7: "POUCorrected",
	}
	MarkPOUStatusType_value = map[string]int32{
		"POUNotSet":    0,
		"POUValid":     1,
		"POUInvalid":   2,
		"POUExpired":   3,
		"POUNA":        4,
		"POUNew":       5,
		"POUIncorrect": 6,
		"POUCorrected": 7,
	}
)

func (x MarkPOUStatusType) Enum() *MarkPOUStatusType {
	p := new(MarkPOUStatusType)
	*p = x
	return p
}

func (x MarkPOUStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkPOUStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[3].Descriptor()
}

func (MarkPOUStatusType) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[3]
}

func (x MarkPOUStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkPOUStatusType.Descriptor instead.
func (MarkPOUStatusType) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{3}
}

type TrexStatus int32

const (
	TrexStatus_NoInfo                 TrexStatus = 0
	TrexStatus_NotProtectedOverride   TrexStatus = 1
	TrexStatus_NotProtectedRegistered TrexStatus = 2
	TrexStatus_NotProtectedExempt     TrexStatus = 3
	TrexStatus_NotProtectedOther      TrexStatus = 4
	TrexStatus_Protected              TrexStatus = 5
	TrexStatus_Unavailable            TrexStatus = 6
	TrexStatus_Eligible               TrexStatus = 7
)

// Enum value maps for TrexStatus.
var (
	TrexStatus_name = map[int32]string{
		0: "NoInfo",
		1: "NotProtectedOverride",
		2: "NotProtectedRegistered",
		3: "NotProtectedExempt",
		4: "NotProtectedOther",
		5: "Protected",
		6: "Unavailable",
		7: "Eligible",
	}
	TrexStatus_value = map[string]int32{
		"NoInfo":                 0,
		"NotProtectedOverride":   1,
		"NotProtectedRegistered": 2,
		"NotProtectedExempt":     3,
		"NotProtectedOther":      4,
		"Protected":              5,
		"Unavailable":            6,
		"Eligible":               7,
	}
)

func (x TrexStatus) Enum() *TrexStatus {
	p := new(TrexStatus)
	*p = x
	return p
}

func (x TrexStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrexStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[4].Descriptor()
}

func (TrexStatus) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[4]
}

func (x TrexStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrexStatus.Descriptor instead.
func (TrexStatus) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{4}
}

type CourtDocumentClass int32

const (
	CourtDocumentClass_CourtOther    CourtDocumentClass = 0
	CourtDocumentClass_CourtDecision CourtDocumentClass = 1
)

// Enum value maps for CourtDocumentClass.
var (
	CourtDocumentClass_name = map[int32]string{
		0: "CourtOther",
		1: "CourtDecision",
	}
	CourtDocumentClass_value = map[string]int32{
		"CourtOther":    0,
		"CourtDecision": 1,
	}
)

func (x CourtDocumentClass) Enum() *CourtDocumentClass {
	p := new(CourtDocumentClass)
	*p = x
	return p
}

func (x CourtDocumentClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourtDocumentClass) Descriptor() protoreflect.EnumDescriptor {
	return file_tmch_tmch_proto_enumTypes[5].Descriptor()
}

func (CourtDocumentClass) Type() protoreflect.EnumType {
	return &file_tmch_tmch_proto_enumTypes[5]
}

func (x CourtDocumentClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourtDocumentClass.Descriptor instead.
func (CourtDocumentClass) EnumDescriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{5}
}

type MarkCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkCheckRequest) Reset() {
	*x = MarkCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkCheckRequest) ProtoMessage() {}

func (x *MarkCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkCheckRequest.ProtoReflect.Descriptor instead.
func (*MarkCheckRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{0}
}

func (x *MarkCheckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkCheckRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool                    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Reason    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	CmdResp   *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkCheckResponse) Reset() {
	*x = MarkCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkCheckResponse) ProtoMessage() {}

func (x *MarkCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkCheckResponse.ProtoReflect.Descriptor instead.
func (*MarkCheckResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{1}
}

func (x *MarkCheckResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *MarkCheckResponse) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MarkCheckResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type BalanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Currency     string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	StatusPoints uint32 `protobuf:"varint,3,opt,name=status_points,json=statusPoints,proto3" json:"status_points,omitempty"`
}

func (x *BalanceData) Reset() {
	*x = BalanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceData) ProtoMessage() {}

func (x *BalanceData) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceData.ProtoReflect.Descriptor instead.
func (*BalanceData) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{2}
}

func (x *BalanceData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BalanceData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceData) GetStatusPoints() uint32 {
	if x != nil {
		return x.StatusPoints
	}
	return 0
}

type MarkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mark         *marks.Mark    `protobuf:"bytes,1,opt,name=mark,proto3" json:"mark,omitempty"`
	Period       *common.Period `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Documents    []*Document    `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
	Labels       []*CreateLabel `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Variations   []string       `protobuf:"bytes,5,rep,name=variations,proto3" json:"variations,omitempty"`
	RegistryName string         `protobuf:"bytes,6,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkCreateRequest) Reset() {
	*x = MarkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkCreateRequest) ProtoMessage() {}

func (x *MarkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkCreateRequest.ProtoReflect.Descriptor instead.
func (*MarkCreateRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{3}
}

func (x *MarkCreateRequest) GetMark() *marks.Mark {
	if x != nil {
		return x.Mark
	}
	return nil
}

func (x *MarkCreateRequest) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *MarkCreateRequest) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *MarkCreateRequest) GetLabels() []*CreateLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MarkCreateRequest) GetVariations() []string {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *MarkCreateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentClass DocumentClass `protobuf:"varint,1,opt,name=document_class,json=documentClass,proto3,enum=epp.tmch.DocumentClass" json:"document_class,omitempty"`
	FileName      string        `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType      FileType      `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3,enum=epp.tmch.FileType" json:"file_type,omitempty"`
	Contents      []byte        `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{4}
}

func (x *Document) GetDocumentClass() DocumentClass {
	if x != nil {
		return x.DocumentClass
	}
	return DocumentClass_Other
}

func (x *Document) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Document) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_PDF
}

func (x *Document) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CreateLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	SmdInclusion bool   `protobuf:"varint,2,opt,name=smd_inclusion,json=smdInclusion,proto3" json:"smd_inclusion,omitempty"`
	ClaimsNotify bool   `protobuf:"varint,3,opt,name=claims_notify,json=claimsNotify,proto3" json:"claims_notify,omitempty"`
}

func (x *CreateLabel) Reset() {
	*x = CreateLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabel) ProtoMessage() {}

func (x *CreateLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabel.ProtoReflect.Descriptor instead.
func (*CreateLabel) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateLabel) GetSmdInclusion() bool {
	if x != nil {
		return x.SmdInclusion
	}
	return false
}

func (x *CreateLabel) GetClaimsNotify() bool {
	if x != nil {
		return x.ClaimsNotify
	}
	return false
}

type MarkCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedDate *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	Balance     *BalanceData            `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	CmdResp     *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkCreateResponse) Reset() {
	*x = MarkCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkCreateResponse) ProtoMessage() {}

func (x *MarkCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkCreateResponse.ProtoReflect.Descriptor instead.
func (*MarkCreateResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{6}
}

func (x *MarkCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkCreateResponse) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *MarkCreateResponse) GetBalance() *BalanceData {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *MarkCreateResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkInfoRequest) Reset() {
	*x = MarkInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInfoRequest) ProtoMessage() {}

func (x *MarkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInfoRequest.ProtoReflect.Descriptor instead.
func (*MarkInfoRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{7}
}

func (x *MarkInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkInfoRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusType MarkStatusType          `protobuf:"varint,1,opt,name=status_type,json=statusType,proto3,enum=epp.tmch.MarkStatusType" json:"status_type,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MarkStatus) Reset() {
	*x = MarkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkStatus) ProtoMessage() {}

func (x *MarkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkStatus.ProtoReflect.Descriptor instead.
func (*MarkStatus) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{8}
}

func (x *MarkStatus) GetStatusType() MarkStatusType {
	if x != nil {
		return x.StatusType
	}
	return MarkStatusType_Unknown
}

func (x *MarkStatus) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type MarkPOUStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusType MarkPOUStatusType       `protobuf:"varint,1,opt,name=status_type,json=statusType,proto3,enum=epp.tmch.MarkPOUStatusType" json:"status_type,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MarkPOUStatus) Reset() {
	*x = MarkPOUStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPOUStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPOUStatus) ProtoMessage() {}

func (x *MarkPOUStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPOUStatus.ProtoReflect.Descriptor instead.
func (*MarkPOUStatus) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{9}
}

func (x *MarkPOUStatus) GetStatusType() MarkPOUStatusType {
	if x != nil {
		return x.StatusType
	}
	return MarkPOUStatusType_POUNotSet
}

func (x *MarkPOUStatus) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type MarkInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        *MarkStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	PouStatus     *MarkPOUStatus          `protobuf:"bytes,3,opt,name=pou_status,json=pouStatus,proto3" json:"pou_status,omitempty"`
	Labels        []*MarkLabel            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Variations    []*MarkVariation        `protobuf:"bytes,11,rep,name=variations,proto3" json:"variations,omitempty"`
	CreationDate  *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	UpdateDate    *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	ExpiryDate    *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	PouExpiryDate *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=pou_expiry_date,json=pouExpiryDate,proto3" json:"pou_expiry_date,omitempty"`
	CorrectBefore *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=correct_before,json=correctBefore,proto3" json:"correct_before,omitempty"`
	CmdResp       *common.CommandResponse `protobuf:"bytes,10,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkInfoResponse) Reset() {
	*x = MarkInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInfoResponse) ProtoMessage() {}

func (x *MarkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInfoResponse.ProtoReflect.Descriptor instead.
func (*MarkInfoResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{10}
}

func (x *MarkInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkInfoResponse) GetStatus() *MarkStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MarkInfoResponse) GetPouStatus() *MarkPOUStatus {
	if x != nil {
		return x.PouStatus
	}
	return nil
}

func (x *MarkInfoResponse) GetLabels() []*MarkLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MarkInfoResponse) GetVariations() []*MarkVariation {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *MarkInfoResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *MarkInfoResponse) GetUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *MarkInfoResponse) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *MarkInfoResponse) GetPouExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PouExpiryDate
	}
	return nil
}

func (x *MarkInfoResponse) GetCorrectBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CorrectBefore
	}
	return nil
}

func (x *MarkInfoResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ALabel       string `protobuf:"bytes,1,opt,name=a_label,json=aLabel,proto3" json:"a_label,omitempty"`
	ULabel       string `protobuf:"bytes,2,opt,name=u_label,json=uLabel,proto3" json:"u_label,omitempty"`
	SmdInclusion bool   `protobuf:"varint,3,opt,name=smd_inclusion,json=smdInclusion,proto3" json:"smd_inclusion,omitempty"`
	ClaimNotify  bool   `protobuf:"varint,4,opt,name=claim_notify,json=claimNotify,proto3" json:"claim_notify,omitempty"`
}

func (x *MarkLabel) Reset() {
	*x = MarkLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkLabel) ProtoMessage() {}

func (x *MarkLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkLabel.ProtoReflect.Descriptor instead.
func (*MarkLabel) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{11}
}

func (x *MarkLabel) GetALabel() string {
	if x != nil {
		return x.ALabel
	}
	return ""
}

func (x *MarkLabel) GetULabel() string {
	if x != nil {
		return x.ULabel
	}
	return ""
}

func (x *MarkLabel) GetSmdInclusion() bool {
	if x != nil {
		return x.SmdInclusion
	}
	return false
}

func (x *MarkLabel) GetClaimNotify() bool {
	if x != nil {
		return x.ClaimNotify
	}
	return false
}

type MarkLabelTrex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Until   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	Tlds    []*MarkLabelTrexTLD    `protobuf:"bytes,3,rep,name=tlds,proto3" json:"tlds,omitempty"`
}

func (x *MarkLabelTrex) Reset() {
	*x = MarkLabelTrex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkLabelTrex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkLabelTrex) ProtoMessage() {}

func (x *MarkLabelTrex) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkLabelTrex.ProtoReflect.Descriptor instead.
func (*MarkLabelTrex) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{12}
}

func (x *MarkLabelTrex) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MarkLabelTrex) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *MarkLabelTrex) GetTlds() []*MarkLabelTrexTLD {
	if x != nil {
		return x.Tlds
	}
	return nil
}

type MarkLabelTrexTLD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tld     string                  `protobuf:"bytes,1,opt,name=tld,proto3" json:"tld,omitempty"`
	Comment *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Status  TrexStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=epp.tmch.TrexStatus" json:"status,omitempty"`
}

func (x *MarkLabelTrexTLD) Reset() {
	*x = MarkLabelTrexTLD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkLabelTrexTLD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkLabelTrexTLD) ProtoMessage() {}

func (x *MarkLabelTrexTLD) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkLabelTrexTLD.ProtoReflect.Descriptor instead.
func (*MarkLabelTrexTLD) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{13}
}

func (x *MarkLabelTrexTLD) GetTld() string {
	if x != nil {
		return x.Tld
	}
	return ""
}

func (x *MarkLabelTrexTLD) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *MarkLabelTrexTLD) GetStatus() TrexStatus {
	if x != nil {
		return x.Status
	}
	return TrexStatus_NoInfo
}

type MarkVariation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ALabel        string `protobuf:"bytes,1,opt,name=a_label,json=aLabel,proto3" json:"a_label,omitempty"`
	ULabel        string `protobuf:"bytes,2,opt,name=u_label,json=uLabel,proto3" json:"u_label,omitempty"`
	VariationType string `protobuf:"bytes,3,opt,name=variation_type,json=variationType,proto3" json:"variation_type,omitempty"`
	Active        bool   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *MarkVariation) Reset() {
	*x = MarkVariation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkVariation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkVariation) ProtoMessage() {}

func (x *MarkVariation) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkVariation.ProtoReflect.Descriptor instead.
func (*MarkVariation) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{14}
}

func (x *MarkVariation) GetALabel() string {
	if x != nil {
		return x.ALabel
	}
	return ""
}

func (x *MarkVariation) GetULabel() string {
	if x != nil {
		return x.ULabel
	}
	return ""
}

func (x *MarkVariation) GetVariationType() string {
	if x != nil {
		return x.VariationType
	}
	return ""
}

func (x *MarkVariation) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type MarkSMDInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  *MarkStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	SmdId   string                  `protobuf:"bytes,3,opt,name=smd_id,json=smdId,proto3" json:"smd_id,omitempty"`
	Smd     string                  `protobuf:"bytes,4,opt,name=smd,proto3" json:"smd,omitempty"`
	CmdResp *common.CommandResponse `protobuf:"bytes,5,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkSMDInfoResponse) Reset() {
	*x = MarkSMDInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkSMDInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkSMDInfoResponse) ProtoMessage() {}

func (x *MarkSMDInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkSMDInfoResponse.ProtoReflect.Descriptor instead.
func (*MarkSMDInfoResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{15}
}

func (x *MarkSMDInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkSMDInfoResponse) GetStatus() *MarkStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MarkSMDInfoResponse) GetSmdId() string {
	if x != nil {
		return x.SmdId
	}
	return ""
}

func (x *MarkSMDInfoResponse) GetSmd() string {
	if x != nil {
		return x.Smd
	}
	return ""
}

func (x *MarkSMDInfoResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Add          []*MarkUpdateAdd    `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Remove       []*MarkUpdateRemove `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	NewMark      *marks.Mark         `protobuf:"bytes,4,opt,name=new_mark,json=newMark,proto3" json:"new_mark,omitempty"`
	UpdateLabels []*CreateLabel      `protobuf:"bytes,5,rep,name=update_labels,json=updateLabels,proto3" json:"update_labels,omitempty"`
	UpdateCases  []*CaseUpdate       `protobuf:"bytes,6,rep,name=update_cases,json=updateCases,proto3" json:"update_cases,omitempty"`
	RegistryName string              `protobuf:"bytes,7,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkUpdateRequest) Reset() {
	*x = MarkUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUpdateRequest) ProtoMessage() {}

func (x *MarkUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUpdateRequest.ProtoReflect.Descriptor instead.
func (*MarkUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{16}
}

func (x *MarkUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkUpdateRequest) GetAdd() []*MarkUpdateAdd {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *MarkUpdateRequest) GetRemove() []*MarkUpdateRemove {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *MarkUpdateRequest) GetNewMark() *marks.Mark {
	if x != nil {
		return x.NewMark
	}
	return nil
}

func (x *MarkUpdateRequest) GetUpdateLabels() []*CreateLabel {
	if x != nil {
		return x.UpdateLabels
	}
	return nil
}

func (x *MarkUpdateRequest) GetUpdateCases() []*CaseUpdate {
	if x != nil {
		return x.UpdateCases
	}
	return nil
}

func (x *MarkUpdateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdResp *common.CommandResponse `protobuf:"bytes,1,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkUpdateResponse) Reset() {
	*x = MarkUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUpdateResponse) ProtoMessage() {}

func (x *MarkUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUpdateResponse.ProtoReflect.Descriptor instead.
func (*MarkUpdateResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{17}
}

func (x *MarkUpdateResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkUpdateAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*MarkUpdateAdd_Document
	//	*MarkUpdateAdd_Label
	//	*MarkUpdateAdd_Variation
	//	*MarkUpdateAdd_Case
	Update isMarkUpdateAdd_Update `protobuf_oneof:"update"`
}

func (x *MarkUpdateAdd) Reset() {
	*x = MarkUpdateAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUpdateAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUpdateAdd) ProtoMessage() {}

func (x *MarkUpdateAdd) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUpdateAdd.ProtoReflect.Descriptor instead.
func (*MarkUpdateAdd) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{18}
}

func (m *MarkUpdateAdd) GetUpdate() isMarkUpdateAdd_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *MarkUpdateAdd) GetDocument() *Document {
	if x, ok := x.GetUpdate().(*MarkUpdateAdd_Document); ok {
		return x.Document
	}
	return nil
}

func (x *MarkUpdateAdd) GetLabel() *CreateLabel {
	if x, ok := x.GetUpdate().(*MarkUpdateAdd_Label); ok {
		return x.Label
	}
	return nil
}

func (x *MarkUpdateAdd) GetVariation() string {
	if x, ok := x.GetUpdate().(*MarkUpdateAdd_Variation); ok {
		return x.Variation
	}
	return ""
}

func (x *MarkUpdateAdd) GetCase() *AddCase {
	if x, ok := x.GetUpdate().(*MarkUpdateAdd_Case); ok {
		return x.Case
	}
	return nil
}

type isMarkUpdateAdd_Update interface {
	isMarkUpdateAdd_Update()
}

type MarkUpdateAdd_Document struct {
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3,oneof"`
}

type MarkUpdateAdd_Label struct {
	Label *CreateLabel `protobuf:"bytes,2,opt,name=label,proto3,oneof"`
}

type MarkUpdateAdd_Variation struct {
	Variation string `protobuf:"bytes,3,opt,name=variation,proto3,oneof"`
}

type MarkUpdateAdd_Case struct {
	Case *AddCase `protobuf:"bytes,4,opt,name=case,proto3,oneof"`
}

func (*MarkUpdateAdd_Document) isMarkUpdateAdd_Update() {}

func (*MarkUpdateAdd_Label) isMarkUpdateAdd_Update() {}

func (*MarkUpdateAdd_Variation) isMarkUpdateAdd_Update() {}

func (*MarkUpdateAdd_Case) isMarkUpdateAdd_Update() {}

type MarkUpdateRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*MarkUpdateRemove_Label
	//	*MarkUpdateRemove_Variation
	Update isMarkUpdateRemove_Update `protobuf_oneof:"update"`
}

func (x *MarkUpdateRemove) Reset() {
	*x = MarkUpdateRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUpdateRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUpdateRemove) ProtoMessage() {}

func (x *MarkUpdateRemove) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUpdateRemove.ProtoReflect.Descriptor instead.
func (*MarkUpdateRemove) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{19}
}

func (m *MarkUpdateRemove) GetUpdate() isMarkUpdateRemove_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *MarkUpdateRemove) GetLabel() string {
	if x, ok := x.GetUpdate().(*MarkUpdateRemove_Label); ok {
		return x.Label
	}
	return ""
}

func (x *MarkUpdateRemove) GetVariation() string {
	if x, ok := x.GetUpdate().(*MarkUpdateRemove_Variation); ok {
		return x.Variation
	}
	return ""
}

type isMarkUpdateRemove_Update interface {
	isMarkUpdateRemove_Update()
}

type MarkUpdateRemove_Label struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3,oneof"`
}

type MarkUpdateRemove_Variation struct {
	Variation string `protobuf:"bytes,2,opt,name=variation,proto3,oneof"`
}

func (*MarkUpdateRemove_Label) isMarkUpdateRemove_Update() {}

func (*MarkUpdateRemove_Variation) isMarkUpdateRemove_Update() {}

type AddCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Case:
	//	*AddCase_Udrp
	//	*AddCase_Court
	Case      isAddCase_Case  `protobuf_oneof:"case"`
	Documents []*CaseDocument `protobuf:"bytes,4,rep,name=documents,proto3" json:"documents,omitempty"`
	Labels    []string        `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *AddCase) Reset() {
	*x = AddCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCase) ProtoMessage() {}

func (x *AddCase) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCase.ProtoReflect.Descriptor instead.
func (*AddCase) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{20}
}

func (x *AddCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *AddCase) GetCase() isAddCase_Case {
	if m != nil {
		return m.Case
	}
	return nil
}

func (x *AddCase) GetUdrp() *UDRPCase {
	if x, ok := x.GetCase().(*AddCase_Udrp); ok {
		return x.Udrp
	}
	return nil
}

func (x *AddCase) GetCourt() *CourtCase {
	if x, ok := x.GetCase().(*AddCase_Court); ok {
		return x.Court
	}
	return nil
}

func (x *AddCase) GetDocuments() []*CaseDocument {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *AddCase) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isAddCase_Case interface {
	isAddCase_Case()
}

type AddCase_Udrp struct {
	Udrp *UDRPCase `protobuf:"bytes,2,opt,name=udrp,proto3,oneof"`
}

type AddCase_Court struct {
	Court *CourtCase `protobuf:"bytes,3,opt,name=court,proto3,oneof"`
}

func (*AddCase_Udrp) isAddCase_Case() {}

func (*AddCase_Court) isAddCase_Case() {}

type CaseUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Add    []*CaseAdd    `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Remove []*CaseRemove `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	// Types that are assignable to NewCase:
	//	*CaseUpdate_NewUdrp
	//	*CaseUpdate_NewCourt
	NewCase isCaseUpdate_NewCase `protobuf_oneof:"new_case"`
}

func (x *CaseUpdate) Reset() {
	*x = CaseUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseUpdate) ProtoMessage() {}

func (x *CaseUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseUpdate.ProtoReflect.Descriptor instead.
func (*CaseUpdate) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{21}
}

func (x *CaseUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CaseUpdate) GetAdd() []*CaseAdd {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *CaseUpdate) GetRemove() []*CaseRemove {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (m *CaseUpdate) GetNewCase() isCaseUpdate_NewCase {
	if m != nil {
		return m.NewCase
	}
	return nil
}

func (x *CaseUpdate) GetNewUdrp() *UDRPCase {
	if x, ok := x.GetNewCase().(*CaseUpdate_NewUdrp); ok {
		return x.NewUdrp
	}
	return nil
}

func (x *CaseUpdate) GetNewCourt() *CourtCase {
	if x, ok := x.GetNewCase().(*CaseUpdate_NewCourt); ok {
		return x.NewCourt
	}
	return nil
}

type isCaseUpdate_NewCase interface {
	isCaseUpdate_NewCase()
}

type CaseUpdate_NewUdrp struct {
	NewUdrp *UDRPCase `protobuf:"bytes,4,opt,name=new_udrp,json=newUdrp,proto3,oneof"`
}

type CaseUpdate_NewCourt struct {
	NewCourt *CourtCase `protobuf:"bytes,5,opt,name=new_court,json=newCourt,proto3,oneof"`
}

func (*CaseUpdate_NewUdrp) isCaseUpdate_NewCase() {}

func (*CaseUpdate_NewCourt) isCaseUpdate_NewCase() {}

type CaseAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CaseAdd_Document
	//	*CaseAdd_Label
	Update isCaseAdd_Update `protobuf_oneof:"update"`
}

func (x *CaseAdd) Reset() {
	*x = CaseAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAdd) ProtoMessage() {}

func (x *CaseAdd) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAdd.ProtoReflect.Descriptor instead.
func (*CaseAdd) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{22}
}

func (m *CaseAdd) GetUpdate() isCaseAdd_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CaseAdd) GetDocument() *CaseDocument {
	if x, ok := x.GetUpdate().(*CaseAdd_Document); ok {
		return x.Document
	}
	return nil
}

func (x *CaseAdd) GetLabel() string {
	if x, ok := x.GetUpdate().(*CaseAdd_Label); ok {
		return x.Label
	}
	return ""
}

type isCaseAdd_Update interface {
	isCaseAdd_Update()
}

type CaseAdd_Document struct {
	Document *CaseDocument `protobuf:"bytes,4,opt,name=document,proto3,oneof"`
}

type CaseAdd_Label struct {
	Label string `protobuf:"bytes,2,opt,name=label,proto3,oneof"`
}

func (*CaseAdd_Document) isCaseAdd_Update() {}

func (*CaseAdd_Label) isCaseAdd_Update() {}

type CaseRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CaseRemove_Label
	Update isCaseRemove_Update `protobuf_oneof:"update"`
}

func (x *CaseRemove) Reset() {
	*x = CaseRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseRemove) ProtoMessage() {}

func (x *CaseRemove) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseRemove.ProtoReflect.Descriptor instead.
func (*CaseRemove) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{23}
}

func (m *CaseRemove) GetUpdate() isCaseRemove_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CaseRemove) GetLabel() string {
	if x, ok := x.GetUpdate().(*CaseRemove_Label); ok {
		return x.Label
	}
	return ""
}

type isCaseRemove_Update interface {
	isCaseRemove_Update()
}

type CaseRemove_Label struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3,oneof"`
}

func (*CaseRemove_Label) isCaseRemove_Update() {}

type UDRPCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseId       string `protobuf:"bytes,1,opt,name=case_id,json=caseId,proto3" json:"case_id,omitempty"`
	Provider     string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	CaseLanguage string `protobuf:"bytes,3,opt,name=case_language,json=caseLanguage,proto3" json:"case_language,omitempty"`
}

func (x *UDRPCase) Reset() {
	*x = UDRPCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDRPCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDRPCase) ProtoMessage() {}

func (x *UDRPCase) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDRPCase.ProtoReflect.Descriptor instead.
func (*UDRPCase) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{24}
}

func (x *UDRPCase) GetCaseId() string {
	if x != nil {
		return x.CaseId
	}
	return ""
}

func (x *UDRPCase) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UDRPCase) GetCaseLanguage() string {
	if x != nil {
		return x.CaseLanguage
	}
	return ""
}

type CourtCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionId   string   `protobuf:"bytes,1,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	CourtName    string   `protobuf:"bytes,2,opt,name=court_name,json=courtName,proto3" json:"court_name,omitempty"`
	CountryCode  string   `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CaseLanguage string   `protobuf:"bytes,4,opt,name=case_language,json=caseLanguage,proto3" json:"case_language,omitempty"`
	Regions      []string `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *CourtCase) Reset() {
	*x = CourtCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourtCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourtCase) ProtoMessage() {}

func (x *CourtCase) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourtCase.ProtoReflect.Descriptor instead.
func (*CourtCase) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{25}
}

func (x *CourtCase) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *CourtCase) GetCourtName() string {
	if x != nil {
		return x.CourtName
	}
	return ""
}

func (x *CourtCase) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CourtCase) GetCaseLanguage() string {
	if x != nil {
		return x.CaseLanguage
	}
	return ""
}

func (x *CourtCase) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

type CaseDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentClass CourtDocumentClass `protobuf:"varint,1,opt,name=document_class,json=documentClass,proto3,enum=epp.tmch.CourtDocumentClass" json:"document_class,omitempty"`
	FileName      string             `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType      FileType           `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3,enum=epp.tmch.FileType" json:"file_type,omitempty"`
	Contents      []byte             `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *CaseDocument) Reset() {
	*x = CaseDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseDocument) ProtoMessage() {}

func (x *CaseDocument) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseDocument.ProtoReflect.Descriptor instead.
func (*CaseDocument) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{26}
}

func (x *CaseDocument) GetDocumentClass() CourtDocumentClass {
	if x != nil {
		return x.DocumentClass
	}
	return CourtDocumentClass_CourtOther
}

func (x *CaseDocument) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CaseDocument) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_PDF
}

func (x *CaseDocument) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type MarkRenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddPeriod         *common.Period         `protobuf:"bytes,2,opt,name=add_period,json=addPeriod,proto3" json:"add_period,omitempty"`
	CurrentExpiryDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=current_expiry_date,json=currentExpiryDate,proto3" json:"current_expiry_date,omitempty"`
	RegistryName      string                 `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkRenewRequest) Reset() {
	*x = MarkRenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkRenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkRenewRequest) ProtoMessage() {}

func (x *MarkRenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkRenewRequest.ProtoReflect.Descriptor instead.
func (*MarkRenewRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{27}
}

func (x *MarkRenewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkRenewRequest) GetAddPeriod() *common.Period {
	if x != nil {
		return x.AddPeriod
	}
	return nil
}

func (x *MarkRenewRequest) GetCurrentExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentExpiryDate
	}
	return nil
}

func (x *MarkRenewRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkRenewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewExpiryDate *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=new_expiry_date,json=newExpiryDate,proto3" json:"new_expiry_date,omitempty"`
	Balance       *BalanceData            `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	CmdResp       *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkRenewResponse) Reset() {
	*x = MarkRenewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkRenewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkRenewResponse) ProtoMessage() {}

func (x *MarkRenewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkRenewResponse.ProtoReflect.Descriptor instead.
func (*MarkRenewResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{28}
}

func (x *MarkRenewResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkRenewResponse) GetNewExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NewExpiryDate
	}
	return nil
}

func (x *MarkRenewResponse) GetBalance() *BalanceData {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *MarkRenewResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthInfo     string `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName string `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkTransferRequest) Reset() {
	*x = MarkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferRequest) ProtoMessage() {}

func (x *MarkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferRequest.ProtoReflect.Descriptor instead.
func (*MarkTransferRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{29}
}

func (x *MarkTransferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTransferRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *MarkTransferRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransferDate *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=transfer_date,json=transferDate,proto3" json:"transfer_date,omitempty"`
	Balance      *BalanceData            `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkTransferResponse) Reset() {
	*x = MarkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferResponse) ProtoMessage() {}

func (x *MarkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferResponse.ProtoReflect.Descriptor instead.
func (*MarkTransferResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{30}
}

func (x *MarkTransferResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTransferResponse) GetTransferDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransferDate
	}
	return nil
}

func (x *MarkTransferResponse) GetBalance() *BalanceData {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *MarkTransferResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkTransferInitiateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkTransferInitiateRequest) Reset() {
	*x = MarkTransferInitiateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferInitiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferInitiateRequest) ProtoMessage() {}

func (x *MarkTransferInitiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferInitiateRequest.ProtoReflect.Descriptor instead.
func (*MarkTransferInitiateRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{31}
}

func (x *MarkTransferInitiateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTransferInitiateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type MarkTransferInitiateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthInfo string                  `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	CmdResp  *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkTransferInitiateResponse) Reset() {
	*x = MarkTransferInitiateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferInitiateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferInitiateResponse) ProtoMessage() {}

func (x *MarkTransferInitiateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferInitiateResponse.ProtoReflect.Descriptor instead.
func (*MarkTransferInitiateResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{32}
}

func (x *MarkTransferInitiateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTransferInitiateResponse) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *MarkTransferInitiateResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkTrexActivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels       []*TrexActivateLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	RegistryName string               `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkTrexActivateRequest) Reset() {
	*x = MarkTrexActivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTrexActivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTrexActivateRequest) ProtoMessage() {}

func (x *MarkTrexActivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTrexActivateRequest.ProtoReflect.Descriptor instead.
func (*MarkTrexActivateRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{33}
}

func (x *MarkTrexActivateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTrexActivateRequest) GetLabels() []*TrexActivateLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MarkTrexActivateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type TrexActivateLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string         `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Period *common.Period `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *TrexActivateLabel) Reset() {
	*x = TrexActivateLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrexActivateLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrexActivateLabel) ProtoMessage() {}

func (x *TrexActivateLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrexActivateLabel.ProtoReflect.Descriptor instead.
func (*TrexActivateLabel) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{34}
}

func (x *TrexActivateLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TrexActivateLabel) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

type MarkTrexActivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdResp *common.CommandResponse `protobuf:"bytes,1,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkTrexActivateResponse) Reset() {
	*x = MarkTrexActivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTrexActivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTrexActivateResponse) ProtoMessage() {}

func (x *MarkTrexActivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTrexActivateResponse.ProtoReflect.Descriptor instead.
func (*MarkTrexActivateResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{35}
}

func (x *MarkTrexActivateResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type MarkTrexRenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels       []*TrexRenewLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	RegistryName string            `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *MarkTrexRenewRequest) Reset() {
	*x = MarkTrexRenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTrexRenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTrexRenewRequest) ProtoMessage() {}

func (x *MarkTrexRenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTrexRenewRequest.ProtoReflect.Descriptor instead.
func (*MarkTrexRenewRequest) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{36}
}

func (x *MarkTrexRenewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkTrexRenewRequest) GetLabels() []*TrexRenewLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MarkTrexRenewRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type TrexRenewLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label             string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	AddPeriod         *common.Period         `protobuf:"bytes,2,opt,name=add_period,json=addPeriod,proto3" json:"add_period,omitempty"`
	CurrentExpiryDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=current_expiry_date,json=currentExpiryDate,proto3" json:"current_expiry_date,omitempty"`
}

func (x *TrexRenewLabel) Reset() {
	*x = TrexRenewLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrexRenewLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrexRenewLabel) ProtoMessage() {}

func (x *TrexRenewLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrexRenewLabel.ProtoReflect.Descriptor instead.
func (*TrexRenewLabel) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{37}
}

func (x *TrexRenewLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TrexRenewLabel) GetAddPeriod() *common.Period {
	if x != nil {
		return x.AddPeriod
	}
	return nil
}

func (x *TrexRenewLabel) GetCurrentExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentExpiryDate
	}
	return nil
}

type MarkTrexRenewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdResp *common.CommandResponse `protobuf:"bytes,1,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *MarkTrexRenewResponse) Reset() {
	*x = MarkTrexRenewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmch_tmch_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTrexRenewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTrexRenewResponse) ProtoMessage() {}

func (x *MarkTrexRenewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmch_tmch_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTrexRenewResponse.ProtoReflect.Descriptor instead.
func (*MarkTrexRenewResponse) Descriptor() ([]byte, []int) {
	return file_tmch_tmch_proto_rawDescGZIP(), []int{38}
}

func (x *MarkTrexRenewResponse) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

var File_tmch_tmch_proto protoreflect.FileDescriptor

var file_tmch_tmch_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01,
	0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x64, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d,
	0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6d, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7f, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x4f, 0x55, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x4f, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x10, 0x4d, 0x61, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70,
	0x6f, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50,
	0x4f, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x75, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x75, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6f, 0x75, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6d, 0x64, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x78,
	0x54, 0x4c, 0x44, 0x52, 0x04, 0x74, 0x6c, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4d, 0x61,
	0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x78, 0x54, 0x4c, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74,
	0x6d, 0x63, 0x68, 0x2e, 0x54, 0x72, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x4d, 0x61,
	0x72, 0x6b, 0x53, 0x4d, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6d, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xc8, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74,
	0x6d, 0x63, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x37, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x4d,
	0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x4d, 0x61,
	0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04,
	0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x54, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x64, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x55, 0x44, 0x52, 0x50, 0x43,
	0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x64, 0x72, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x22, 0xe0,
	0x01, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x52, 0x03, 0x61,
	0x64, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x64, 0x72, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x55, 0x44,
	0x52, 0x50, 0x43, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x55, 0x64, 0x72,
	0x70, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x22, 0x61, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x08, 0x55, 0x44, 0x52, 0x50, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x73, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x75, 0x72, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x4d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x09, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x77,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x67, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x52, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x0a,
	0x17, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74,
	0x6d, 0x63, 0x68, 0x2e, 0x54, 0x72, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x54, 0x72, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x4d, 0x61, 0x72,
	0x6b, 0x54, 0x72, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x0a,
	0x14, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x65, 0x78, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68,
	0x2e, 0x54, 0x72, 0x65, 0x78, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a,
	0x0e, 0x54, 0x72, 0x65, 0x78, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x65, 0x78,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x9b, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4f, 0x6e, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0x05, 0x2a, 0x1c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x47, 0x10,
	0x01, 0x2a, 0x7d, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x07,
	0x2a, 0x8b, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x4f, 0x55, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x55, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x55, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x55, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x55, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x55, 0x4e, 0x41, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x4f, 0x55, 0x4e, 0x65, 0x77, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f,
	0x55, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x4f, 0x55, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x07, 0x2a, 0xab,
	0x01, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x07, 0x2a, 0x37, 0x0a, 0x12,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70,
	0x70, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tmch_tmch_proto_rawDescOnce sync.Once
	file_tmch_tmch_proto_rawDescData = file_tmch_tmch_proto_rawDesc
)

func file_tmch_tmch_proto_rawDescGZIP() []byte {
	file_tmch_tmch_proto_rawDescOnce.Do(func() {
		file_tmch_tmch_proto_rawDescData = protoimpl.X.CompressGZIP(file_tmch_tmch_proto_rawDescData)
	})
	return file_tmch_tmch_proto_rawDescData
}

var file_tmch_tmch_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tmch_tmch_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_tmch_tmch_proto_goTypes = []interface{}{
	(DocumentClass)(0),                   // 0: epp.tmch.DocumentClass
	(FileType)(0),                        // 1: epp.tmch.FileType
	(MarkStatusType)(0),                  // 2: epp.tmch.MarkStatusType
	(MarkPOUStatusType)(0),               // 3: epp.tmch.MarkPOUStatusType
	(TrexStatus)(0),                      // 4: epp.tmch.TrexStatus
	(CourtDocumentClass)(0),              // 5: epp.tmch.CourtDocumentClass
	(*MarkCheckRequest)(nil),             // 6: epp.tmch.MarkCheckRequest
	(*MarkCheckResponse)(nil),            // 7: epp.tmch.MarkCheckResponse
	(*BalanceData)(nil),                  // 8: epp.tmch.BalanceData
	(*MarkCreateRequest)(nil),            // 9: epp.tmch.MarkCreateRequest
	(*Document)(nil),                     // 10: epp.tmch.Document
	(*CreateLabel)(nil),                  // 11: epp.tmch.CreateLabel
	(*MarkCreateResponse)(nil),           // 12: epp.tmch.MarkCreateResponse
	(*MarkInfoRequest)(nil),              // 13: epp.tmch.MarkInfoRequest
	(*MarkStatus)(nil),                   // 14: epp.tmch.MarkStatus
	(*MarkPOUStatus)(nil),                // 15: epp.tmch.MarkPOUStatus
	(*MarkInfoResponse)(nil),             // 16: epp.tmch.MarkInfoResponse
	(*MarkLabel)(nil),                    // 17: epp.tmch.MarkLabel
	(*MarkLabelTrex)(nil),                // 18: epp.tmch.MarkLabelTrex
	(*MarkLabelTrexTLD)(nil),             // 19: epp.tmch.MarkLabelTrexTLD
	(*MarkVariation)(nil),                // 20: epp.tmch.MarkVariation
	(*MarkSMDInfoResponse)(nil),          // 21: epp.tmch.MarkSMDInfoResponse
	(*MarkUpdateRequest)(nil),            // 22: epp.tmch.MarkUpdateRequest
	(*MarkUpdateResponse)(nil),           // 23: epp.tmch.MarkUpdateResponse
	(*MarkUpdateAdd)(nil),                // 24: epp.tmch.MarkUpdateAdd
	(*MarkUpdateRemove)(nil),             // 25: epp.tmch.MarkUpdateRemove
	(*AddCase)(nil),                      // 26: epp.tmch.AddCase
	(*CaseUpdate)(nil),                   // 27: epp.tmch.CaseUpdate
	(*CaseAdd)(nil),                      // 28: epp.tmch.CaseAdd
	(*CaseRemove)(nil),                   // 29: epp.tmch.CaseRemove
	(*UDRPCase)(nil),                     // 30: epp.tmch.UDRPCase
	(*CourtCase)(nil),                    // 31: epp.tmch.CourtCase
	(*CaseDocument)(nil),                 // 32: epp.tmch.CaseDocument
	(*MarkRenewRequest)(nil),             // 33: epp.tmch.MarkRenewRequest
	(*MarkRenewResponse)(nil),            // 34: epp.tmch.MarkRenewResponse
	(*MarkTransferRequest)(nil),          // 35: epp.tmch.MarkTransferRequest
	(*MarkTransferResponse)(nil),         // 36: epp.tmch.MarkTransferResponse
	(*MarkTransferInitiateRequest)(nil),  // 37: epp.tmch.MarkTransferInitiateRequest
	(*MarkTransferInitiateResponse)(nil), // 38: epp.tmch.MarkTransferInitiateResponse
	(*MarkTrexActivateRequest)(nil),      // 39: epp.tmch.MarkTrexActivateRequest
	(*TrexActivateLabel)(nil),            // 40: epp.tmch.TrexActivateLabel
	(*MarkTrexActivateResponse)(nil),     // 41: epp.tmch.MarkTrexActivateResponse
	(*MarkTrexRenewRequest)(nil),         // 42: epp.tmch.MarkTrexRenewRequest
	(*TrexRenewLabel)(nil),               // 43: epp.tmch.TrexRenewLabel
	(*MarkTrexRenewResponse)(nil),        // 44: epp.tmch.MarkTrexRenewResponse
	(*wrapperspb.StringValue)(nil),       // 45: google.protobuf.StringValue
	(*common.CommandResponse)(nil),       // 46: epp.common.CommandResponse
	(*marks.Mark)(nil),                   // 47: epp.marks.Mark
	(*common.Period)(nil),                // 48: epp.common.Period
	(*timestamppb.Timestamp)(nil),        // 49: google.protobuf.Timestamp
}
var file_tmch_tmch_proto_depIdxs = []int32{
	45, // 0: epp.tmch.MarkCheckResponse.reason:type_name -> google.protobuf.StringValue
	46, // 1: epp.tmch.MarkCheckResponse.cmd_resp:type_name -> epp.common.CommandResponse
	47, // 2: epp.tmch.MarkCreateRequest.mark:type_name -> epp.marks.Mark
	48, // 3: epp.tmch.MarkCreateRequest.period:type_name -> epp.common.Period
	10, // 4: epp.tmch.MarkCreateRequest.documents:type_name -> epp.tmch.Document
	11, // 5: epp.tmch.MarkCreateRequest.labels:type_name -> epp.tmch.CreateLabel
	0,  // 6: epp.tmch.Document.document_class:type_name -> epp.tmch.DocumentClass
	1,  // 7: epp.tmch.Document.file_type:type_name -> epp.tmch.FileType
	49, // 8: epp.tmch.MarkCreateResponse.created_date:type_name -> google.protobuf.Timestamp
	8,  // 9: epp.tmch.MarkCreateResponse.balance:type_name -> epp.tmch.BalanceData
	46, // 10: epp.tmch.MarkCreateResponse.cmd_resp:type_name -> epp.common.CommandResponse
	2,  // 11: epp.tmch.MarkStatus.status_type:type_name -> epp.tmch.MarkStatusType
	45, // 12: epp.tmch.MarkStatus.message:type_name -> google.protobuf.StringValue
	3,  // 13: epp.tmch.MarkPOUStatus.status_type:type_name -> epp.tmch.MarkPOUStatusType
	45, // 14: epp.tmch.MarkPOUStatus.message:type_name -> google.protobuf.StringValue
	14, // 15: epp.tmch.MarkInfoResponse.status:type_name -> epp.tmch.MarkStatus
	15, // 16: epp.tmch.MarkInfoResponse.pou_status:type_name -> epp.tmch.MarkPOUStatus
	17, // 17: epp.tmch.MarkInfoResponse.labels:type_name -> epp.tmch.MarkLabel
	20, // 18: epp.tmch.MarkInfoResponse.variations:type_name -> epp.tmch.MarkVariation
	49, // 19: epp.tmch.MarkInfoResponse.creation_date:type_name -> google.protobuf.Timestamp
	49, // 20: epp.tmch.MarkInfoResponse.update_date:type_name -> google.protobuf.Timestamp
	49, // 21: epp.tmch.MarkInfoResponse.expiry_date:type_name -> google.protobuf.Timestamp
	49, // 22: epp.tmch.MarkInfoResponse.pou_expiry_date:type_name -> google.protobuf.Timestamp
	49, // 23: epp.tmch.MarkInfoResponse.correct_before:type_name -> google.protobuf.Timestamp
	46, // 24: epp.tmch.MarkInfoResponse.cmd_resp:type_name -> epp.common.CommandResponse
	49, // 25: epp.tmch.MarkLabelTrex.until:type_name -> google.protobuf.Timestamp
	19, // 26: epp.tmch.MarkLabelTrex.tlds:type_name -> epp.tmch.MarkLabelTrexTLD
	45, // 27: epp.tmch.MarkLabelTrexTLD.comment:type_name -> google.protobuf.StringValue
	4,  // 28: epp.tmch.MarkLabelTrexTLD.status:type_name -> epp.tmch.TrexStatus
	14, // 29: epp.tmch.MarkSMDInfoResponse.status:type_name -> epp.tmch.MarkStatus
	46, // 30: epp.tmch.MarkSMDInfoResponse.cmd_resp:type_name -> epp.common.CommandResponse
	24, // 31: epp.tmch.MarkUpdateRequest.add:type_name -> epp.tmch.MarkUpdateAdd
	25, // 32: epp.tmch.MarkUpdateRequest.remove:type_name -> epp.tmch.MarkUpdateRemove
	47, // 33: epp.tmch.MarkUpdateRequest.new_mark:type_name -> epp.marks.Mark
	11, // 34: epp.tmch.MarkUpdateRequest.update_labels:type_name -> epp.tmch.CreateLabel
	27, // 35: epp.tmch.MarkUpdateRequest.update_cases:type_name -> epp.tmch.CaseUpdate
	46, // 36: epp.tmch.MarkUpdateResponse.cmd_resp:type_name -> epp.common.CommandResponse
	10, // 37: epp.tmch.MarkUpdateAdd.document:type_name -> epp.tmch.Document
	11, // 38: epp.tmch.MarkUpdateAdd.label:type_name -> epp.tmch.CreateLabel
	26, // 39: epp.tmch.MarkUpdateAdd.case:type_name -> epp.tmch.AddCase
	30, // 40: epp.tmch.AddCase.udrp:type_name -> epp.tmch.UDRPCase
	31, // 41: epp.tmch.AddCase.court:type_name -> epp.tmch.CourtCase
	32, // 42: epp.tmch.AddCase.documents:type_name -> epp.tmch.CaseDocument
	28, // 43: epp.tmch.CaseUpdate.add:type_name -> epp.tmch.CaseAdd
	29, // 44: epp.tmch.CaseUpdate.remove:type_name -> epp.tmch.CaseRemove
	30, // 45: epp.tmch.CaseUpdate.new_udrp:type_name -> epp.tmch.UDRPCase
	31, // 46: epp.tmch.CaseUpdate.new_court:type_name -> epp.tmch.CourtCase
	32, // 47: epp.tmch.CaseAdd.document:type_name -> epp.tmch.CaseDocument
	5,  // 48: epp.tmch.CaseDocument.document_class:type_name -> epp.tmch.CourtDocumentClass
	1,  // 49: epp.tmch.CaseDocument.file_type:type_name -> epp.tmch.FileType
	48, // 50: epp.tmch.MarkRenewRequest.add_period:type_name -> epp.common.Period
	49, // 51: epp.tmch.MarkRenewRequest.current_expiry_date:type_name -> google.protobuf.Timestamp
	49, // 52: epp.tmch.MarkRenewResponse.new_expiry_date:type_name -> google.protobuf.Timestamp
	8,  // 53: epp.tmch.MarkRenewResponse.balance:type_name -> epp.tmch.BalanceData
	46, // 54: epp.tmch.MarkRenewResponse.cmd_resp:type_name -> epp.common.CommandResponse
	49, // 55: epp.tmch.MarkTransferResponse.transfer_date:type_name -> google.protobuf.Timestamp
	8,  // 56: epp.tmch.MarkTransferResponse.balance:type_name -> epp.tmch.BalanceData
	46, // 57: epp.tmch.MarkTransferResponse.cmd_resp:type_name -> epp.common.CommandResponse
	46, // 58: epp.tmch.MarkTransferInitiateResponse.cmd_resp:type_name -> epp.common.CommandResponse
	40, // 59: epp.tmch.MarkTrexActivateRequest.labels:type_name -> epp.tmch.TrexActivateLabel
	48, // 60: epp.tmch.TrexActivateLabel.period:type_name -> epp.common.Period
	46, // 61: epp.tmch.MarkTrexActivateResponse.cmd_resp:type_name -> epp.common.CommandResponse
	43, // 62: epp.tmch.MarkTrexRenewRequest.labels:type_name -> epp.tmch.TrexRenewLabel
	48, // 63: epp.tmch.TrexRenewLabel.add_period:type_name -> epp.common.Period
	49, // 64: epp.tmch.TrexRenewLabel.current_expiry_date:type_name -> google.protobuf.Timestamp
	46, // 65: epp.tmch.MarkTrexRenewResponse.cmd_resp:type_name -> epp.common.CommandResponse
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_tmch_tmch_proto_init() }
func file_tmch_tmch_proto_init() {
	if File_tmch_tmch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tmch_tmch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPOUStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkLabelTrex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkLabelTrexTLD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkVariation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkSMDInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUpdateAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUpdateRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDRPCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourtCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkRenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkRenewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferInitiateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferInitiateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTrexActivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrexActivateLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTrexActivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTrexRenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrexRenewLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmch_tmch_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTrexRenewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tmch_tmch_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MarkUpdateAdd_Document)(nil),
		(*MarkUpdateAdd_Label)(nil),
		(*MarkUpdateAdd_Variation)(nil),
		(*MarkUpdateAdd_Case)(nil),
	}
	file_tmch_tmch_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*MarkUpdateRemove_Label)(nil),
		(*MarkUpdateRemove_Variation)(nil),
	}
	file_tmch_tmch_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*AddCase_Udrp)(nil),
		(*AddCase_Court)(nil),
	}
	file_tmch_tmch_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*CaseUpdate_NewUdrp)(nil),
		(*CaseUpdate_NewCourt)(nil),
	}
	file_tmch_tmch_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*CaseAdd_Document)(nil),
		(*CaseAdd_Label)(nil),
	}
	file_tmch_tmch_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*CaseRemove_Label)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tmch_tmch_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tmch_tmch_proto_goTypes,
		DependencyIndexes: file_tmch_tmch_proto_depIdxs,
		EnumInfos:         file_tmch_tmch_proto_enumTypes,
		MessageInfos:      file_tmch_tmch_proto_msgTypes,
	}.Build()
	File_tmch_tmch_proto = out.File
	file_tmch_tmch_proto_rawDesc = nil
	file_tmch_tmch_proto_goTypes = nil
	file_tmch_tmch_proto_depIdxs = nil
}

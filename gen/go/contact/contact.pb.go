// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: contact/contact.proto

package contact

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	qualified_lawyer "github.com/as207960/epp-proxy/gen/go/epp/contact/qualified_lawyer"
	eurid "github.com/as207960/epp-proxy/gen/go/epp/eurid"
	isnic "github.com/as207960/epp-proxy/gen/go/epp/isnic"
	nominet_ext "github.com/as207960/epp-proxy/gen/go/epp/nominet_ext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityType int32

const (
	EntityType_NotSet                                 EntityType = 0
	EntityType_UnknownEntity                          EntityType = 1
	EntityType_UkLimitedCompany                       EntityType = 2
	EntityType_UkPublicLimitedCompany                 EntityType = 3
	EntityType_UkPartnership                          EntityType = 4
	EntityType_UkSoleTrader                           EntityType = 5
	EntityType_UkLimitedLiabilityPartnership          EntityType = 6
	EntityType_UkIndustrialProvidentRegisteredCompany EntityType = 7
	EntityType_UkIndividual                           EntityType = 8
	EntityType_UkSchool                               EntityType = 9
	EntityType_UkRegisteredCharity                    EntityType = 10
	EntityType_UkGovernmentBody                       EntityType = 11
	EntityType_UkCorporationByRoyalCharter            EntityType = 12
	EntityType_UkStatutoryBody                        EntityType = 13
	EntityType_UkPoliticalParty                       EntityType = 31
	EntityType_OtherUkEntity                          EntityType = 14
	EntityType_FinnishIndividual                      EntityType = 15
	EntityType_FinnishCompany                         EntityType = 16
	EntityType_FinnishAssociation                     EntityType = 17
	EntityType_FinnishInstitution                     EntityType = 18
	EntityType_FinnishPoliticalParty                  EntityType = 19
	EntityType_FinnishMunicipality                    EntityType = 20
	EntityType_FinnishGovernment                      EntityType = 21
	EntityType_FinnishPublicCommunity                 EntityType = 22
	EntityType_OtherIndividual                        EntityType = 23
	EntityType_OtherCompany                           EntityType = 24
	EntityType_OtherAssociation                       EntityType = 25
	EntityType_OtherInstitution                       EntityType = 26
	EntityType_OtherPoliticalParty                    EntityType = 27
	EntityType_OtherMunicipality                      EntityType = 28
	EntityType_OtherGovernment                        EntityType = 29
	EntityType_OtherPublicCommunity                   EntityType = 30
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0:  "NotSet",
		1:  "UnknownEntity",
		2:  "UkLimitedCompany",
		3:  "UkPublicLimitedCompany",
		4:  "UkPartnership",
		5:  "UkSoleTrader",
		6:  "UkLimitedLiabilityPartnership",
		7:  "UkIndustrialProvidentRegisteredCompany",
		8:  "UkIndividual",
		9:  "UkSchool",
		10: "UkRegisteredCharity",
		11: "UkGovernmentBody",
		12: "UkCorporationByRoyalCharter",
		13: "UkStatutoryBody",
		31: "UkPoliticalParty",
		14: "OtherUkEntity",
		15: "FinnishIndividual",
		16: "FinnishCompany",
		17: "FinnishAssociation",
		18: "FinnishInstitution",
		19: "FinnishPoliticalParty",
		20: "FinnishMunicipality",
		21: "FinnishGovernment",
		22: "FinnishPublicCommunity",
		23: "OtherIndividual",
		24: "OtherCompany",
		25: "OtherAssociation",
		26: "OtherInstitution",
		27: "OtherPoliticalParty",
		28: "OtherMunicipality",
		29: "OtherGovernment",
		30: "OtherPublicCommunity",
	}
	EntityType_value = map[string]int32{
		"NotSet":                                 0,
		"UnknownEntity":                          1,
		"UkLimitedCompany":                       2,
		"UkPublicLimitedCompany":                 3,
		"UkPartnership":                          4,
		"UkSoleTrader":                           5,
		"UkLimitedLiabilityPartnership":          6,
		"UkIndustrialProvidentRegisteredCompany": 7,
		"UkIndividual":                           8,
		"UkSchool":                               9,
		"UkRegisteredCharity":                    10,
		"UkGovernmentBody":                       11,
		"UkCorporationByRoyalCharter":            12,
		"UkStatutoryBody":                        13,
		"UkPoliticalParty":                       31,
		"OtherUkEntity":                          14,
		"FinnishIndividual":                      15,
		"FinnishCompany":                         16,
		"FinnishAssociation":                     17,
		"FinnishInstitution":                     18,
		"FinnishPoliticalParty":                  19,
		"FinnishMunicipality":                    20,
		"FinnishGovernment":                      21,
		"FinnishPublicCommunity":                 22,
		"OtherIndividual":                        23,
		"OtherCompany":                           24,
		"OtherAssociation":                       25,
		"OtherInstitution":                       26,
		"OtherPoliticalParty":                    27,
		"OtherMunicipality":                      28,
		"OtherGovernment":                        29,
		"OtherPublicCommunity":                   30,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_contact_contact_proto_enumTypes[0].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_contact_contact_proto_enumTypes[0]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{0}
}

type DisclosureType int32

const (
	DisclosureType_LocalName                     DisclosureType = 0
	DisclosureType_InternationalisedName         DisclosureType = 1
	DisclosureType_LocalOrganisation             DisclosureType = 2
	DisclosureType_InternationalisedOrganisation DisclosureType = 3
	DisclosureType_LocalAddress                  DisclosureType = 4
	DisclosureType_InternationalisedAddress      DisclosureType = 5
	DisclosureType_Voice                         DisclosureType = 6
	DisclosureType_Fax                           DisclosureType = 7
	DisclosureType_Email                         DisclosureType = 8
)

// Enum value maps for DisclosureType.
var (
	DisclosureType_name = map[int32]string{
		0: "LocalName",
		1: "InternationalisedName",
		2: "LocalOrganisation",
		3: "InternationalisedOrganisation",
		4: "LocalAddress",
		5: "InternationalisedAddress",
		6: "Voice",
		7: "Fax",
		8: "Email",
	}
	DisclosureType_value = map[string]int32{
		"LocalName":                     0,
		"InternationalisedName":         1,
		"LocalOrganisation":             2,
		"InternationalisedOrganisation": 3,
		"LocalAddress":                  4,
		"InternationalisedAddress":      5,
		"Voice":                         6,
		"Fax":                           7,
		"Email":                         8,
	}
)

func (x DisclosureType) Enum() *DisclosureType {
	p := new(DisclosureType)
	*p = x
	return p
}

func (x DisclosureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisclosureType) Descriptor() protoreflect.EnumDescriptor {
	return file_contact_contact_proto_enumTypes[1].Descriptor()
}

func (DisclosureType) Type() protoreflect.EnumType {
	return &file_contact_contact_proto_enumTypes[1]
}

func (x DisclosureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisclosureType.Descriptor instead.
func (DisclosureType) EnumDescriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{1}
}

type ContactStatus int32

const (
	ContactStatus_ClientDeleteProhibited   ContactStatus = 0
	ContactStatus_ClientTransferProhibited ContactStatus = 1
	ContactStatus_ClientUpdateProhibited   ContactStatus = 2
	ContactStatus_Linked                   ContactStatus = 3
	ContactStatus_Ok                       ContactStatus = 4
	ContactStatus_PendingCreate            ContactStatus = 5
	ContactStatus_PendingDelete            ContactStatus = 6
	ContactStatus_PendingTransfer          ContactStatus = 7
	ContactStatus_PendingUpdate            ContactStatus = 8
	ContactStatus_ServerDeleteProhibited   ContactStatus = 9
	ContactStatus_ServerTransferProhibited ContactStatus = 10
	ContactStatus_ServerUpdateProhibited   ContactStatus = 11
)

// Enum value maps for ContactStatus.
var (
	ContactStatus_name = map[int32]string{
		0:  "ClientDeleteProhibited",
		1:  "ClientTransferProhibited",
		2:  "ClientUpdateProhibited",
		3:  "Linked",
		4:  "Ok",
		5:  "PendingCreate",
		6:  "PendingDelete",
		7:  "PendingTransfer",
		8:  "PendingUpdate",
		9:  "ServerDeleteProhibited",
		10: "ServerTransferProhibited",
		11: "ServerUpdateProhibited",
	}
	ContactStatus_value = map[string]int32{
		"ClientDeleteProhibited":   0,
		"ClientTransferProhibited": 1,
		"ClientUpdateProhibited":   2,
		"Linked":                   3,
		"Ok":                       4,
		"PendingCreate":            5,
		"PendingDelete":            6,
		"PendingTransfer":          7,
		"PendingUpdate":            8,
		"ServerDeleteProhibited":   9,
		"ServerTransferProhibited": 10,
		"ServerUpdateProhibited":   11,
	}
)

func (x ContactStatus) Enum() *ContactStatus {
	p := new(ContactStatus)
	*p = x
	return p
}

func (x ContactStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_contact_contact_proto_enumTypes[2].Descriptor()
}

func (ContactStatus) Type() protoreflect.EnumType {
	return &file_contact_contact_proto_enumTypes[2]
}

func (x ContactStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactStatus.Descriptor instead.
func (ContactStatus) EnumDescriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{2}
}

type PostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Organisation   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=organisation,proto3" json:"organisation,omitempty"`
	Streets        []string                `protobuf:"bytes,4,rep,name=streets,proto3" json:"streets,omitempty"`
	City           string                  `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Province       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=province,proto3" json:"province,omitempty"`
	PostalCode     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	CountryCode    string                  `protobuf:"bytes,8,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	IdentityNumber *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	BirthDate      *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
}

func (x *PostalAddress) Reset() {
	*x = PostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddress) ProtoMessage() {}

func (x *PostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddress.ProtoReflect.Descriptor instead.
func (*PostalAddress) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{0}
}

func (x *PostalAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostalAddress) GetOrganisation() *wrapperspb.StringValue {
	if x != nil {
		return x.Organisation
	}
	return nil
}

func (x *PostalAddress) GetStreets() []string {
	if x != nil {
		return x.Streets
	}
	return nil
}

func (x *PostalAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PostalAddress) GetProvince() *wrapperspb.StringValue {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *PostalAddress) GetPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *PostalAddress) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PostalAddress) GetIdentityNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.IdentityNumber
	}
	return nil
}

func (x *PostalAddress) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

type ContactCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *ContactCheckRequest) Reset() {
	*x = ContactCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCheckRequest) ProtoMessage() {}

func (x *ContactCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCheckRequest.ProtoReflect.Descriptor instead.
func (*ContactCheckRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{1}
}

func (x *ContactCheckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactCheckRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type ContactCheckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool                    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Reason    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	CmdResp   *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *ContactCheckReply) Reset() {
	*x = ContactCheckReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCheckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCheckReply) ProtoMessage() {}

func (x *ContactCheckReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCheckReply.ProtoReflect.Descriptor instead.
func (*ContactCheckReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{2}
}

func (x *ContactCheckReply) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ContactCheckReply) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ContactCheckReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type ContactInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *ContactInfoRequest) Reset() {
	*x = ContactInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfoRequest) ProtoMessage() {}

func (x *ContactInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfoRequest.ProtoReflect.Descriptor instead.
func (*ContactInfoRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{3}
}

func (x *ContactInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactInfoRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type Disclosure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disclosure []DisclosureType `protobuf:"varint,1,rep,packed,name=disclosure,proto3,enum=epp.contact.DisclosureType" json:"disclosure,omitempty"`
}

func (x *Disclosure) Reset() {
	*x = Disclosure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disclosure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disclosure) ProtoMessage() {}

func (x *Disclosure) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disclosure.ProtoReflect.Descriptor instead.
func (*Disclosure) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{4}
}

func (x *Disclosure) GetDisclosure() []DisclosureType {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

type ContactInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryId               string                            `protobuf:"bytes,2,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	Statuses                 []ContactStatus                   `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=epp.contact.ContactStatus" json:"statuses,omitempty"`
	LocalAddress             *PostalAddress                    `protobuf:"bytes,4,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	InternationalisedAddress *PostalAddress                    `protobuf:"bytes,5,opt,name=internationalised_address,json=internationalisedAddress,proto3" json:"internationalised_address,omitempty"`
	Phone                    *common.Phone                     `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Fax                      *common.Phone                     `protobuf:"bytes,7,opt,name=fax,proto3" json:"fax,omitempty"`
	Email                    string                            `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	ClientId                 string                            `protobuf:"bytes,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientCreatedId          *wrapperspb.StringValue           `protobuf:"bytes,10,opt,name=client_created_id,json=clientCreatedId,proto3" json:"client_created_id,omitempty"`
	CreationDate             *timestamppb.Timestamp            `protobuf:"bytes,11,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	LastUpdatedClient        *wrapperspb.StringValue           `protobuf:"bytes,12,opt,name=last_updated_client,json=lastUpdatedClient,proto3" json:"last_updated_client,omitempty"`
	LastUpdatedDate          *timestamppb.Timestamp            `protobuf:"bytes,13,opt,name=last_updated_date,json=lastUpdatedDate,proto3" json:"last_updated_date,omitempty"`
	LastTransferDate         *timestamppb.Timestamp            `protobuf:"bytes,14,opt,name=last_transfer_date,json=lastTransferDate,proto3" json:"last_transfer_date,omitempty"`
	EntityType               EntityType                        `protobuf:"varint,15,opt,name=entity_type,json=entityType,proto3,enum=epp.contact.EntityType" json:"entity_type,omitempty"`
	TradingName              *wrapperspb.StringValue           `protobuf:"bytes,16,opt,name=trading_name,json=tradingName,proto3" json:"trading_name,omitempty"`
	CompanyNumber            *wrapperspb.StringValue           `protobuf:"bytes,17,opt,name=company_number,json=companyNumber,proto3" json:"company_number,omitempty"`
	Disclosure               []DisclosureType                  `protobuf:"varint,18,rep,packed,name=disclosure,proto3,enum=epp.contact.DisclosureType" json:"disclosure,omitempty"`
	AuthInfo                 *wrapperspb.StringValue           `protobuf:"bytes,19,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	NominetDataQuality       *nominet_ext.DataQuality          `protobuf:"bytes,20,opt,name=nominet_data_quality,json=nominetDataQuality,proto3" json:"nominet_data_quality,omitempty"`
	EuridInfo                *eurid.ContactExtension           `protobuf:"bytes,22,opt,name=eurid_info,json=euridInfo,proto3" json:"eurid_info,omitempty"`
	CmdResp                  *common.CommandResponse           `protobuf:"bytes,21,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	QualifiedLawyer          *qualified_lawyer.QualifiedLawyer `protobuf:"bytes,23,opt,name=qualified_lawyer,json=qualifiedLawyer,proto3" json:"qualified_lawyer,omitempty"`
	IsnicInfo                *isnic.ContactInfo                `protobuf:"bytes,24,opt,name=isnic_info,json=isnicInfo,proto3" json:"isnic_info,omitempty"`
}

func (x *ContactInfoReply) Reset() {
	*x = ContactInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfoReply) ProtoMessage() {}

func (x *ContactInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfoReply.ProtoReflect.Descriptor instead.
func (*ContactInfoReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{5}
}

func (x *ContactInfoReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactInfoReply) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *ContactInfoReply) GetStatuses() []ContactStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ContactInfoReply) GetLocalAddress() *PostalAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *ContactInfoReply) GetInternationalisedAddress() *PostalAddress {
	if x != nil {
		return x.InternationalisedAddress
	}
	return nil
}

func (x *ContactInfoReply) GetPhone() *common.Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *ContactInfoReply) GetFax() *common.Phone {
	if x != nil {
		return x.Fax
	}
	return nil
}

func (x *ContactInfoReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ContactInfoReply) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ContactInfoReply) GetClientCreatedId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientCreatedId
	}
	return nil
}

func (x *ContactInfoReply) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ContactInfoReply) GetLastUpdatedClient() *wrapperspb.StringValue {
	if x != nil {
		return x.LastUpdatedClient
	}
	return nil
}

func (x *ContactInfoReply) GetLastUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedDate
	}
	return nil
}

func (x *ContactInfoReply) GetLastTransferDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransferDate
	}
	return nil
}

func (x *ContactInfoReply) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_NotSet
}

func (x *ContactInfoReply) GetTradingName() *wrapperspb.StringValue {
	if x != nil {
		return x.TradingName
	}
	return nil
}

func (x *ContactInfoReply) GetCompanyNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CompanyNumber
	}
	return nil
}

func (x *ContactInfoReply) GetDisclosure() []DisclosureType {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *ContactInfoReply) GetAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *ContactInfoReply) GetNominetDataQuality() *nominet_ext.DataQuality {
	if x != nil {
		return x.NominetDataQuality
	}
	return nil
}

func (x *ContactInfoReply) GetEuridInfo() *eurid.ContactExtension {
	if x != nil {
		return x.EuridInfo
	}
	return nil
}

func (x *ContactInfoReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *ContactInfoReply) GetQualifiedLawyer() *qualified_lawyer.QualifiedLawyer {
	if x != nil {
		return x.QualifiedLawyer
	}
	return nil
}

func (x *ContactInfoReply) GetIsnicInfo() *isnic.ContactInfo {
	if x != nil {
		return x.IsnicInfo
	}
	return nil
}

type ContactCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocalAddress             *PostalAddress                    `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	InternationalisedAddress *PostalAddress                    `protobuf:"bytes,3,opt,name=internationalised_address,json=internationalisedAddress,proto3" json:"internationalised_address,omitempty"`
	Phone                    *common.Phone                     `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Fax                      *common.Phone                     `protobuf:"bytes,5,opt,name=fax,proto3" json:"fax,omitempty"`
	Email                    string                            `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	EntityType               EntityType                        `protobuf:"varint,7,opt,name=entity_type,json=entityType,proto3,enum=epp.contact.EntityType" json:"entity_type,omitempty"`
	TradingName              *wrapperspb.StringValue           `protobuf:"bytes,8,opt,name=trading_name,json=tradingName,proto3" json:"trading_name,omitempty"`
	CompanyNumber            *wrapperspb.StringValue           `protobuf:"bytes,9,opt,name=company_number,json=companyNumber,proto3" json:"company_number,omitempty"`
	Disclosure               *Disclosure                       `protobuf:"bytes,10,opt,name=disclosure,proto3" json:"disclosure,omitempty"`
	EuridInfo                *eurid.ContactExtension           `protobuf:"bytes,13,opt,name=eurid_info,json=euridInfo,proto3" json:"eurid_info,omitempty"`
	RegistryName             string                            `protobuf:"bytes,11,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	AuthInfo                 string                            `protobuf:"bytes,12,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	QualifiedLawyer          *qualified_lawyer.QualifiedLawyer `protobuf:"bytes,14,opt,name=qualified_lawyer,json=qualifiedLawyer,proto3" json:"qualified_lawyer,omitempty"`
	IsnicInfo                *isnic.ContactCreate              `protobuf:"bytes,15,opt,name=isnic_info,json=isnicInfo,proto3" json:"isnic_info,omitempty"`
}

func (x *ContactCreateRequest) Reset() {
	*x = ContactCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCreateRequest) ProtoMessage() {}

func (x *ContactCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCreateRequest.ProtoReflect.Descriptor instead.
func (*ContactCreateRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{6}
}

func (x *ContactCreateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactCreateRequest) GetLocalAddress() *PostalAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *ContactCreateRequest) GetInternationalisedAddress() *PostalAddress {
	if x != nil {
		return x.InternationalisedAddress
	}
	return nil
}

func (x *ContactCreateRequest) GetPhone() *common.Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *ContactCreateRequest) GetFax() *common.Phone {
	if x != nil {
		return x.Fax
	}
	return nil
}

func (x *ContactCreateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ContactCreateRequest) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_NotSet
}

func (x *ContactCreateRequest) GetTradingName() *wrapperspb.StringValue {
	if x != nil {
		return x.TradingName
	}
	return nil
}

func (x *ContactCreateRequest) GetCompanyNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CompanyNumber
	}
	return nil
}

func (x *ContactCreateRequest) GetDisclosure() *Disclosure {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *ContactCreateRequest) GetEuridInfo() *eurid.ContactExtension {
	if x != nil {
		return x.EuridInfo
	}
	return nil
}

func (x *ContactCreateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *ContactCreateRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *ContactCreateRequest) GetQualifiedLawyer() *qualified_lawyer.QualifiedLawyer {
	if x != nil {
		return x.QualifiedLawyer
	}
	return nil
}

func (x *ContactCreateRequest) GetIsnicInfo() *isnic.ContactCreate {
	if x != nil {
		return x.IsnicInfo
	}
	return nil
}

type ContactCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pending      bool                    `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	CreationDate *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,5,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *ContactCreateReply) Reset() {
	*x = ContactCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCreateReply) ProtoMessage() {}

func (x *ContactCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCreateReply.ProtoReflect.Descriptor instead.
func (*ContactCreateReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{7}
}

func (x *ContactCreateReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactCreateReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *ContactCreateReply) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ContactCreateReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type ContactDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *ContactDeleteRequest) Reset() {
	*x = ContactDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactDeleteRequest) ProtoMessage() {}

func (x *ContactDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactDeleteRequest.ProtoReflect.Descriptor instead.
func (*ContactDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{8}
}

func (x *ContactDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactDeleteRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type ContactDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending bool                    `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	CmdResp *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *ContactDeleteReply) Reset() {
	*x = ContactDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactDeleteReply) ProtoMessage() {}

func (x *ContactDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactDeleteReply.ProtoReflect.Descriptor instead.
func (*ContactDeleteReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{9}
}

func (x *ContactDeleteReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *ContactDeleteReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type ContactUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddStatuses                 []ContactStatus                   `protobuf:"varint,2,rep,packed,name=add_statuses,json=addStatuses,proto3,enum=epp.contact.ContactStatus" json:"add_statuses,omitempty"`
	RemoveStatuses              []ContactStatus                   `protobuf:"varint,3,rep,packed,name=remove_statuses,json=removeStatuses,proto3,enum=epp.contact.ContactStatus" json:"remove_statuses,omitempty"`
	NewLocalAddress             *PostalAddress                    `protobuf:"bytes,4,opt,name=new_local_address,json=newLocalAddress,proto3" json:"new_local_address,omitempty"`
	NewInternationalisedAddress *PostalAddress                    `protobuf:"bytes,5,opt,name=new_internationalised_address,json=newInternationalisedAddress,proto3" json:"new_internationalised_address,omitempty"`
	NewPhone                    *common.Phone                     `protobuf:"bytes,6,opt,name=new_phone,json=newPhone,proto3" json:"new_phone,omitempty"`
	NewFax                      *common.Phone                     `protobuf:"bytes,7,opt,name=new_fax,json=newFax,proto3" json:"new_fax,omitempty"`
	NewEmail                    *wrapperspb.StringValue           `protobuf:"bytes,8,opt,name=new_email,json=newEmail,proto3" json:"new_email,omitempty"`
	NewEntityType               EntityType                        `protobuf:"varint,9,opt,name=new_entity_type,json=newEntityType,proto3,enum=epp.contact.EntityType" json:"new_entity_type,omitempty"`
	NewTradingName              *wrapperspb.StringValue           `protobuf:"bytes,10,opt,name=new_trading_name,json=newTradingName,proto3" json:"new_trading_name,omitempty"`
	NewCompanyNumber            *wrapperspb.StringValue           `protobuf:"bytes,11,opt,name=new_company_number,json=newCompanyNumber,proto3" json:"new_company_number,omitempty"`
	Disclosure                  *Disclosure                       `protobuf:"bytes,12,opt,name=disclosure,proto3" json:"disclosure,omitempty"`
	RegistryName                string                            `protobuf:"bytes,13,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	NewAuthInfo                 *wrapperspb.StringValue           `protobuf:"bytes,14,opt,name=new_auth_info,json=newAuthInfo,proto3" json:"new_auth_info,omitempty"`
	NewEuridInfo                *eurid.ContactUpdateExtension     `protobuf:"bytes,15,opt,name=new_eurid_info,json=newEuridInfo,proto3" json:"new_eurid_info,omitempty"`
	QualifiedLawyer             *qualified_lawyer.QualifiedLawyer `protobuf:"bytes,16,opt,name=qualified_lawyer,json=qualifiedLawyer,proto3" json:"qualified_lawyer,omitempty"`
	IsnicInfo                   *isnic.ContactUpdate              `protobuf:"bytes,17,opt,name=isnic_info,json=isnicInfo,proto3" json:"isnic_info,omitempty"`
}

func (x *ContactUpdateRequest) Reset() {
	*x = ContactUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUpdateRequest) ProtoMessage() {}

func (x *ContactUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUpdateRequest.ProtoReflect.Descriptor instead.
func (*ContactUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{10}
}

func (x *ContactUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactUpdateRequest) GetAddStatuses() []ContactStatus {
	if x != nil {
		return x.AddStatuses
	}
	return nil
}

func (x *ContactUpdateRequest) GetRemoveStatuses() []ContactStatus {
	if x != nil {
		return x.RemoveStatuses
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewLocalAddress() *PostalAddress {
	if x != nil {
		return x.NewLocalAddress
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewInternationalisedAddress() *PostalAddress {
	if x != nil {
		return x.NewInternationalisedAddress
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewPhone() *common.Phone {
	if x != nil {
		return x.NewPhone
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewFax() *common.Phone {
	if x != nil {
		return x.NewFax
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.NewEmail
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewEntityType() EntityType {
	if x != nil {
		return x.NewEntityType
	}
	return EntityType_NotSet
}

func (x *ContactUpdateRequest) GetNewTradingName() *wrapperspb.StringValue {
	if x != nil {
		return x.NewTradingName
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewCompanyNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.NewCompanyNumber
	}
	return nil
}

func (x *ContactUpdateRequest) GetDisclosure() *Disclosure {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *ContactUpdateRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *ContactUpdateRequest) GetNewAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.NewAuthInfo
	}
	return nil
}

func (x *ContactUpdateRequest) GetNewEuridInfo() *eurid.ContactUpdateExtension {
	if x != nil {
		return x.NewEuridInfo
	}
	return nil
}

func (x *ContactUpdateRequest) GetQualifiedLawyer() *qualified_lawyer.QualifiedLawyer {
	if x != nil {
		return x.QualifiedLawyer
	}
	return nil
}

func (x *ContactUpdateRequest) GetIsnicInfo() *isnic.ContactUpdate {
	if x != nil {
		return x.IsnicInfo
	}
	return nil
}

type ContactUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending bool                    `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	CmdResp *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *ContactUpdateReply) Reset() {
	*x = ContactUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUpdateReply) ProtoMessage() {}

func (x *ContactUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUpdateReply.ProtoReflect.Descriptor instead.
func (*ContactUpdateReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{11}
}

func (x *ContactUpdateReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *ContactUpdateReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type ContactTransferQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthInfo     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName string                  `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *ContactTransferQueryRequest) Reset() {
	*x = ContactTransferQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactTransferQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactTransferQueryRequest) ProtoMessage() {}

func (x *ContactTransferQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactTransferQueryRequest.ProtoReflect.Descriptor instead.
func (*ContactTransferQueryRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{12}
}

func (x *ContactTransferQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactTransferQueryRequest) GetAuthInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *ContactTransferQueryRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type ContactTransferRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthInfo     string `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	RegistryName string `protobuf:"bytes,3,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *ContactTransferRequestRequest) Reset() {
	*x = ContactTransferRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactTransferRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactTransferRequestRequest) ProtoMessage() {}

func (x *ContactTransferRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactTransferRequestRequest.ProtoReflect.Descriptor instead.
func (*ContactTransferRequestRequest) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{13}
}

func (x *ContactTransferRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactTransferRequestRequest) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *ContactTransferRequestRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type ContactTransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending           bool                    `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Status            common.TransferStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=epp.common.TransferStatus" json:"status,omitempty"`
	RequestedClientId string                  `protobuf:"bytes,3,opt,name=requested_client_id,json=requestedClientId,proto3" json:"requested_client_id,omitempty"`
	RequestedDate     *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=requested_date,json=requestedDate,proto3" json:"requested_date,omitempty"`
	ActClientId       string                  `protobuf:"bytes,5,opt,name=act_client_id,json=actClientId,proto3" json:"act_client_id,omitempty"`
	ActDate           *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=act_date,json=actDate,proto3" json:"act_date,omitempty"`
	CmdResp           *common.CommandResponse `protobuf:"bytes,8,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *ContactTransferReply) Reset() {
	*x = ContactTransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactTransferReply) ProtoMessage() {}

func (x *ContactTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactTransferReply.ProtoReflect.Descriptor instead.
func (*ContactTransferReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{14}
}

func (x *ContactTransferReply) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *ContactTransferReply) GetStatus() common.TransferStatus {
	if x != nil {
		return x.Status
	}
	return common.TransferStatus(0)
}

func (x *ContactTransferReply) GetRequestedClientId() string {
	if x != nil {
		return x.RequestedClientId
	}
	return ""
}

func (x *ContactTransferReply) GetRequestedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDate
	}
	return nil
}

func (x *ContactTransferReply) GetActClientId() string {
	if x != nil {
		return x.ActClientId
	}
	return ""
}

func (x *ContactTransferReply) GetActDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActDate
	}
	return nil
}

func (x *ContactTransferReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type ContactPANReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result              bool                    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	ServerTransactionId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=server_transaction_id,json=serverTransactionId,proto3" json:"server_transaction_id,omitempty"`
	ClientTransactionId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=client_transaction_id,json=clientTransactionId,proto3" json:"client_transaction_id,omitempty"`
	Date                *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ContactPANReply) Reset() {
	*x = ContactPANReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_contact_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPANReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPANReply) ProtoMessage() {}

func (x *ContactPANReply) ProtoReflect() protoreflect.Message {
	mi := &file_contact_contact_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPANReply.ProtoReflect.Descriptor instead.
func (*ContactPANReply) Descriptor() ([]byte, []int) {
	return file_contact_contact_proto_rawDescGZIP(), []int{15}
}

func (x *ContactPANReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactPANReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ContactPANReply) GetServerTransactionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerTransactionId
	}
	return nil
}

func (x *ContactPANReply) GetClientTransactionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientTransactionId
	}
	return nil
}

func (x *ContactPANReply) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_contact_contact_proto protoreflect.FileDescriptor

var file_contact_contact_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x2f, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x2f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x69,
	0x73, 0x6e, 0x69, 0x63, 0x2f, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x49, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x22, 0x8e, 0x0b, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x14, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x12, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x77, 0x79, 0x65,
	0x72, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x77, 0x79,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e,
	0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x73, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xae, 0x06, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x75, 0x72,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x77, 0x79, 0x65, 0x72,
	0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x77, 0x79, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xba, 0x08, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x1d, 0x6e, 0x65,
	0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1b, 0x6e,
	0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x5f, 0x66, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x06,
	0x6e, 0x65, 0x77, 0x46, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x41, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x75,
	0x72, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x45, 0x75, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x58, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x77,
	0x79, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x73, 0x6e,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x73, 0x6e, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x71, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x41, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x2a, 0xf3, 0x05, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x6b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6b, 0x53,
	0x6f, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x55,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x06, 0x12, 0x2a,
	0x0a, 0x26, 0x55, 0x6b, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6b,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x6b, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6b,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6b, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6b, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x0d, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6b,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x6e,
	0x69, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x10, 0x0f, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f,
	0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x13, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x6e, 0x69,
	0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10,
	0x18, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d,
	0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x10, 0x1e, 0x2a, 0xc3, 0x01, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x07,
	0x0a, 0x03, 0x46, 0x61, 0x78, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x08, 0x2a, 0x9d, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64,
	0x10, 0x0b, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x73, 0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70, 0x2d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contact_contact_proto_rawDescOnce sync.Once
	file_contact_contact_proto_rawDescData = file_contact_contact_proto_rawDesc
)

func file_contact_contact_proto_rawDescGZIP() []byte {
	file_contact_contact_proto_rawDescOnce.Do(func() {
		file_contact_contact_proto_rawDescData = protoimpl.X.CompressGZIP(file_contact_contact_proto_rawDescData)
	})
	return file_contact_contact_proto_rawDescData
}

var file_contact_contact_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_contact_contact_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_contact_contact_proto_goTypes = []interface{}{
	(EntityType)(0),                          // 0: epp.contact.EntityType
	(DisclosureType)(0),                      // 1: epp.contact.DisclosureType
	(ContactStatus)(0),                       // 2: epp.contact.ContactStatus
	(*PostalAddress)(nil),                    // 3: epp.contact.PostalAddress
	(*ContactCheckRequest)(nil),              // 4: epp.contact.ContactCheckRequest
	(*ContactCheckReply)(nil),                // 5: epp.contact.ContactCheckReply
	(*ContactInfoRequest)(nil),               // 6: epp.contact.ContactInfoRequest
	(*Disclosure)(nil),                       // 7: epp.contact.Disclosure
	(*ContactInfoReply)(nil),                 // 8: epp.contact.ContactInfoReply
	(*ContactCreateRequest)(nil),             // 9: epp.contact.ContactCreateRequest
	(*ContactCreateReply)(nil),               // 10: epp.contact.ContactCreateReply
	(*ContactDeleteRequest)(nil),             // 11: epp.contact.ContactDeleteRequest
	(*ContactDeleteReply)(nil),               // 12: epp.contact.ContactDeleteReply
	(*ContactUpdateRequest)(nil),             // 13: epp.contact.ContactUpdateRequest
	(*ContactUpdateReply)(nil),               // 14: epp.contact.ContactUpdateReply
	(*ContactTransferQueryRequest)(nil),      // 15: epp.contact.ContactTransferQueryRequest
	(*ContactTransferRequestRequest)(nil),    // 16: epp.contact.ContactTransferRequestRequest
	(*ContactTransferReply)(nil),             // 17: epp.contact.ContactTransferReply
	(*ContactPANReply)(nil),                  // 18: epp.contact.ContactPANReply
	(*wrapperspb.StringValue)(nil),           // 19: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),            // 20: google.protobuf.Timestamp
	(*common.CommandResponse)(nil),           // 21: epp.common.CommandResponse
	(*common.Phone)(nil),                     // 22: epp.common.Phone
	(*nominet_ext.DataQuality)(nil),          // 23: epp.nominet_ext.DataQuality
	(*eurid.ContactExtension)(nil),           // 24: epp.eurid.ContactExtension
	(*qualified_lawyer.QualifiedLawyer)(nil), // 25: epp.contact.qualified_lawyer.QualifiedLawyer
	(*isnic.ContactInfo)(nil),                // 26: epp.isnic.ContactInfo
	(*isnic.ContactCreate)(nil),              // 27: epp.isnic.ContactCreate
	(*eurid.ContactUpdateExtension)(nil),     // 28: epp.eurid.ContactUpdateExtension
	(*isnic.ContactUpdate)(nil),              // 29: epp.isnic.ContactUpdate
	(common.TransferStatus)(0),               // 30: epp.common.TransferStatus
}
var file_contact_contact_proto_depIdxs = []int32{
	19, // 0: epp.contact.PostalAddress.organisation:type_name -> google.protobuf.StringValue
	19, // 1: epp.contact.PostalAddress.province:type_name -> google.protobuf.StringValue
	19, // 2: epp.contact.PostalAddress.postal_code:type_name -> google.protobuf.StringValue
	19, // 3: epp.contact.PostalAddress.identity_number:type_name -> google.protobuf.StringValue
	20, // 4: epp.contact.PostalAddress.birth_date:type_name -> google.protobuf.Timestamp
	19, // 5: epp.contact.ContactCheckReply.reason:type_name -> google.protobuf.StringValue
	21, // 6: epp.contact.ContactCheckReply.cmd_resp:type_name -> epp.common.CommandResponse
	1,  // 7: epp.contact.Disclosure.disclosure:type_name -> epp.contact.DisclosureType
	2,  // 8: epp.contact.ContactInfoReply.statuses:type_name -> epp.contact.ContactStatus
	3,  // 9: epp.contact.ContactInfoReply.local_address:type_name -> epp.contact.PostalAddress
	3,  // 10: epp.contact.ContactInfoReply.internationalised_address:type_name -> epp.contact.PostalAddress
	22, // 11: epp.contact.ContactInfoReply.phone:type_name -> epp.common.Phone
	22, // 12: epp.contact.ContactInfoReply.fax:type_name -> epp.common.Phone
	19, // 13: epp.contact.ContactInfoReply.client_created_id:type_name -> google.protobuf.StringValue
	20, // 14: epp.contact.ContactInfoReply.creation_date:type_name -> google.protobuf.Timestamp
	19, // 15: epp.contact.ContactInfoReply.last_updated_client:type_name -> google.protobuf.StringValue
	20, // 16: epp.contact.ContactInfoReply.last_updated_date:type_name -> google.protobuf.Timestamp
	20, // 17: epp.contact.ContactInfoReply.last_transfer_date:type_name -> google.protobuf.Timestamp
	0,  // 18: epp.contact.ContactInfoReply.entity_type:type_name -> epp.contact.EntityType
	19, // 19: epp.contact.ContactInfoReply.trading_name:type_name -> google.protobuf.StringValue
	19, // 20: epp.contact.ContactInfoReply.company_number:type_name -> google.protobuf.StringValue
	1,  // 21: epp.contact.ContactInfoReply.disclosure:type_name -> epp.contact.DisclosureType
	19, // 22: epp.contact.ContactInfoReply.auth_info:type_name -> google.protobuf.StringValue
	23, // 23: epp.contact.ContactInfoReply.nominet_data_quality:type_name -> epp.nominet_ext.DataQuality
	24, // 24: epp.contact.ContactInfoReply.eurid_info:type_name -> epp.eurid.ContactExtension
	21, // 25: epp.contact.ContactInfoReply.cmd_resp:type_name -> epp.common.CommandResponse
	25, // 26: epp.contact.ContactInfoReply.qualified_lawyer:type_name -> epp.contact.qualified_lawyer.QualifiedLawyer
	26, // 27: epp.contact.ContactInfoReply.isnic_info:type_name -> epp.isnic.ContactInfo
	3,  // 28: epp.contact.ContactCreateRequest.local_address:type_name -> epp.contact.PostalAddress
	3,  // 29: epp.contact.ContactCreateRequest.internationalised_address:type_name -> epp.contact.PostalAddress
	22, // 30: epp.contact.ContactCreateRequest.phone:type_name -> epp.common.Phone
	22, // 31: epp.contact.ContactCreateRequest.fax:type_name -> epp.common.Phone
	0,  // 32: epp.contact.ContactCreateRequest.entity_type:type_name -> epp.contact.EntityType
	19, // 33: epp.contact.ContactCreateRequest.trading_name:type_name -> google.protobuf.StringValue
	19, // 34: epp.contact.ContactCreateRequest.company_number:type_name -> google.protobuf.StringValue
	7,  // 35: epp.contact.ContactCreateRequest.disclosure:type_name -> epp.contact.Disclosure
	24, // 36: epp.contact.ContactCreateRequest.eurid_info:type_name -> epp.eurid.ContactExtension
	25, // 37: epp.contact.ContactCreateRequest.qualified_lawyer:type_name -> epp.contact.qualified_lawyer.QualifiedLawyer
	27, // 38: epp.contact.ContactCreateRequest.isnic_info:type_name -> epp.isnic.ContactCreate
	20, // 39: epp.contact.ContactCreateReply.creation_date:type_name -> google.protobuf.Timestamp
	21, // 40: epp.contact.ContactCreateReply.cmd_resp:type_name -> epp.common.CommandResponse
	21, // 41: epp.contact.ContactDeleteReply.cmd_resp:type_name -> epp.common.CommandResponse
	2,  // 42: epp.contact.ContactUpdateRequest.add_statuses:type_name -> epp.contact.ContactStatus
	2,  // 43: epp.contact.ContactUpdateRequest.remove_statuses:type_name -> epp.contact.ContactStatus
	3,  // 44: epp.contact.ContactUpdateRequest.new_local_address:type_name -> epp.contact.PostalAddress
	3,  // 45: epp.contact.ContactUpdateRequest.new_internationalised_address:type_name -> epp.contact.PostalAddress
	22, // 46: epp.contact.ContactUpdateRequest.new_phone:type_name -> epp.common.Phone
	22, // 47: epp.contact.ContactUpdateRequest.new_fax:type_name -> epp.common.Phone
	19, // 48: epp.contact.ContactUpdateRequest.new_email:type_name -> google.protobuf.StringValue
	0,  // 49: epp.contact.ContactUpdateRequest.new_entity_type:type_name -> epp.contact.EntityType
	19, // 50: epp.contact.ContactUpdateRequest.new_trading_name:type_name -> google.protobuf.StringValue
	19, // 51: epp.contact.ContactUpdateRequest.new_company_number:type_name -> google.protobuf.StringValue
	7,  // 52: epp.contact.ContactUpdateRequest.disclosure:type_name -> epp.contact.Disclosure
	19, // 53: epp.contact.ContactUpdateRequest.new_auth_info:type_name -> google.protobuf.StringValue
	28, // 54: epp.contact.ContactUpdateRequest.new_eurid_info:type_name -> epp.eurid.ContactUpdateExtension
	25, // 55: epp.contact.ContactUpdateRequest.qualified_lawyer:type_name -> epp.contact.qualified_lawyer.QualifiedLawyer
	29, // 56: epp.contact.ContactUpdateRequest.isnic_info:type_name -> epp.isnic.ContactUpdate
	21, // 57: epp.contact.ContactUpdateReply.cmd_resp:type_name -> epp.common.CommandResponse
	19, // 58: epp.contact.ContactTransferQueryRequest.auth_info:type_name -> google.protobuf.StringValue
	30, // 59: epp.contact.ContactTransferReply.status:type_name -> epp.common.TransferStatus
	20, // 60: epp.contact.ContactTransferReply.requested_date:type_name -> google.protobuf.Timestamp
	20, // 61: epp.contact.ContactTransferReply.act_date:type_name -> google.protobuf.Timestamp
	21, // 62: epp.contact.ContactTransferReply.cmd_resp:type_name -> epp.common.CommandResponse
	19, // 63: epp.contact.ContactPANReply.server_transaction_id:type_name -> google.protobuf.StringValue
	19, // 64: epp.contact.ContactPANReply.client_transaction_id:type_name -> google.protobuf.StringValue
	20, // 65: epp.contact.ContactPANReply.date:type_name -> google.protobuf.Timestamp
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_contact_contact_proto_init() }
func file_contact_contact_proto_init() {
	if File_contact_contact_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contact_contact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCheckReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disclosure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactTransferQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactTransferRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactTransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contact_contact_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPANReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contact_contact_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contact_contact_proto_goTypes,
		DependencyIndexes: file_contact_contact_proto_depIdxs,
		EnumInfos:         file_contact_contact_proto_enumTypes,
		MessageInfos:      file_contact_contact_proto_msgTypes,
	}.Build()
	File_contact_contact_proto = out.File
	file_contact_contact_proto_rawDesc = nil
	file_contact_contact_proto_goTypes = nil
	file_contact_contact_proto_depIdxs = nil
}

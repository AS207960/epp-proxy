// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: epp.proto

package epp

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	contact "github.com/as207960/epp-proxy/gen/go/epp/contact"
	dac "github.com/as207960/epp-proxy/gen/go/epp/dac"
	domain "github.com/as207960/epp-proxy/gen/go/epp/domain"
	eurid "github.com/as207960/epp-proxy/gen/go/epp/eurid"
	host "github.com/as207960/epp-proxy/gen/go/epp/host"
	maintenance "github.com/as207960/epp-proxy/gen/go/epp/maintenance"
	nominet "github.com/as207960/epp-proxy/gen/go/epp/nominet"
	rgp "github.com/as207960/epp-proxy/gen/go/epp/rgp"
	tmch "github.com/as207960/epp-proxy/gen/go/epp/tmch"
	traficom "github.com/as207960/epp-proxy/gen/go/epp/traficom"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChangeData_ChangeState int32

const (
	ChangeData_AFTER  ChangeData_ChangeState = 0
	ChangeData_BEFORE ChangeData_ChangeState = 1
)

// Enum value maps for ChangeData_ChangeState.
var (
	ChangeData_ChangeState_name = map[int32]string{
		0: "AFTER",
		1: "BEFORE",
	}
	ChangeData_ChangeState_value = map[string]int32{
		"AFTER":  0,
		"BEFORE": 1,
	}
)

func (x ChangeData_ChangeState) Enum() *ChangeData_ChangeState {
	p := new(ChangeData_ChangeState)
	*p = x
	return p
}

func (x ChangeData_ChangeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeData_ChangeState) Descriptor() protoreflect.EnumDescriptor {
	return file_epp_proto_enumTypes[0].Descriptor()
}

func (ChangeData_ChangeState) Type() protoreflect.EnumType {
	return &file_epp_proto_enumTypes[0]
}

func (x ChangeData_ChangeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeData_ChangeState.Descriptor instead.
func (ChangeData_ChangeState) EnumDescriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3, 0}
}

type ChangeData_ChangeOperation_ChangeOperationType int32

const (
	ChangeData_ChangeOperation_Custom     ChangeData_ChangeOperation_ChangeOperationType = 0
	ChangeData_ChangeOperation_Create     ChangeData_ChangeOperation_ChangeOperationType = 1
	ChangeData_ChangeOperation_Delete     ChangeData_ChangeOperation_ChangeOperationType = 2
	ChangeData_ChangeOperation_Renew      ChangeData_ChangeOperation_ChangeOperationType = 3
	ChangeData_ChangeOperation_Transfer   ChangeData_ChangeOperation_ChangeOperationType = 4
	ChangeData_ChangeOperation_Update     ChangeData_ChangeOperation_ChangeOperationType = 5
	ChangeData_ChangeOperation_Restore    ChangeData_ChangeOperation_ChangeOperationType = 6
	ChangeData_ChangeOperation_AutoRenew  ChangeData_ChangeOperation_ChangeOperationType = 7
	ChangeData_ChangeOperation_AutoDelete ChangeData_ChangeOperation_ChangeOperationType = 8
	ChangeData_ChangeOperation_AutoPurge  ChangeData_ChangeOperation_ChangeOperationType = 9
)

// Enum value maps for ChangeData_ChangeOperation_ChangeOperationType.
var (
	ChangeData_ChangeOperation_ChangeOperationType_name = map[int32]string{
		0: "Custom",
		1: "Create",
		2: "Delete",
		3: "Renew",
		4: "Transfer",
		5: "Update",
		6: "Restore",
		7: "AutoRenew",
		8: "AutoDelete",
		9: "AutoPurge",
	}
	ChangeData_ChangeOperation_ChangeOperationType_value = map[string]int32{
		"Custom":     0,
		"Create":     1,
		"Delete":     2,
		"Renew":      3,
		"Transfer":   4,
		"Update":     5,
		"Restore":    6,
		"AutoRenew":  7,
		"AutoDelete": 8,
		"AutoPurge":  9,
	}
)

func (x ChangeData_ChangeOperation_ChangeOperationType) Enum() *ChangeData_ChangeOperation_ChangeOperationType {
	p := new(ChangeData_ChangeOperation_ChangeOperationType)
	*p = x
	return p
}

func (x ChangeData_ChangeOperation_ChangeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeData_ChangeOperation_ChangeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_epp_proto_enumTypes[1].Descriptor()
}

func (ChangeData_ChangeOperation_ChangeOperationType) Type() protoreflect.EnumType {
	return &file_epp_proto_enumTypes[1]
}

func (x ChangeData_ChangeOperation_ChangeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeData_ChangeOperation_ChangeOperationType.Descriptor instead.
func (ChangeData_ChangeOperation_ChangeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3, 0, 0}
}

type ChangeData_CaseID_CaseIDType int32

const (
	ChangeData_CaseID_Custom ChangeData_CaseID_CaseIDType = 0
	ChangeData_CaseID_UDRP   ChangeData_CaseID_CaseIDType = 1
	ChangeData_CaseID_URS    ChangeData_CaseID_CaseIDType = 2
)

// Enum value maps for ChangeData_CaseID_CaseIDType.
var (
	ChangeData_CaseID_CaseIDType_name = map[int32]string{
		0: "Custom",
		1: "UDRP",
		2: "URS",
	}
	ChangeData_CaseID_CaseIDType_value = map[string]int32{
		"Custom": 0,
		"UDRP":   1,
		"URS":    2,
	}
)

func (x ChangeData_CaseID_CaseIDType) Enum() *ChangeData_CaseID_CaseIDType {
	p := new(ChangeData_CaseID_CaseIDType)
	*p = x
	return p
}

func (x ChangeData_CaseID_CaseIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeData_CaseID_CaseIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_epp_proto_enumTypes[2].Descriptor()
}

func (ChangeData_CaseID_CaseIDType) Type() protoreflect.EnumType {
	return &file_epp_proto_enumTypes[2]
}

func (x ChangeData_CaseID_CaseIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeData_CaseID_CaseIDType.Descriptor instead.
func (ChangeData_CaseID_CaseIDType) EnumDescriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3, 1, 0}
}

type RegistryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistryName string `protobuf:"bytes,1,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *RegistryInfo) Reset() {
	*x = RegistryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryInfo) ProtoMessage() {}

func (x *RegistryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryInfo.ProtoReflect.Descriptor instead.
func (*RegistryInfo) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{0}
}

func (x *RegistryInfo) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type PollAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *PollAck) Reset() {
	*x = PollAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollAck) ProtoMessage() {}

func (x *PollAck) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollAck.ProtoReflect.Descriptor instead.
func (*PollAck) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{1}
}

func (x *PollAck) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type PollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId       string                 `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	EnqueueDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=enqueue_date,json=enqueueDate,proto3" json:"enqueue_date,omitempty"`
	Message     string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are assignable to Data:
	//	*PollReply_DomainInfo
	//	*PollReply_DomainTransfer
	//	*PollReply_DomainCreate
	//	*PollReply_DomainRenew
	//	*PollReply_DomainPan
	//	*PollReply_ContactInfo
	//	*PollReply_ContactTransfer
	//	*PollReply_ContactPan
	//	*PollReply_NominetDomainCancel
	//	*PollReply_NominetDomainRelease
	//	*PollReply_NominetDomainRegistrarChange
	//	*PollReply_NominetHostCancel
	//	*PollReply_NominetProcess
	//	*PollReply_NominetSuspend
	//	*PollReply_NominetDomainFail
	//	*PollReply_NominetRegistrantTransfer
	//	*PollReply_TraficomTrn
	//	*PollReply_VerisignLowBalance
	//	*PollReply_MaintenanceInfo
	//	*PollReply_EuridPoll
	//	*PollReply_HostInfo
	Data       isPollReply_Data        `protobuf_oneof:"data"`
	ChangeData *ChangeData             `protobuf:"bytes,10,opt,name=change_data,json=changeData,proto3" json:"change_data,omitempty"`
	CmdResp    *common.CommandResponse `protobuf:"bytes,23,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *PollReply) Reset() {
	*x = PollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollReply) ProtoMessage() {}

func (x *PollReply) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollReply.ProtoReflect.Descriptor instead.
func (*PollReply) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{2}
}

func (x *PollReply) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *PollReply) GetEnqueueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueueDate
	}
	return nil
}

func (x *PollReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (m *PollReply) GetData() isPollReply_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *PollReply) GetDomainInfo() *domain.DomainInfoReply {
	if x, ok := x.GetData().(*PollReply_DomainInfo); ok {
		return x.DomainInfo
	}
	return nil
}

func (x *PollReply) GetDomainTransfer() *domain.DomainTransferReply {
	if x, ok := x.GetData().(*PollReply_DomainTransfer); ok {
		return x.DomainTransfer
	}
	return nil
}

func (x *PollReply) GetDomainCreate() *domain.DomainCreateReply {
	if x, ok := x.GetData().(*PollReply_DomainCreate); ok {
		return x.DomainCreate
	}
	return nil
}

func (x *PollReply) GetDomainRenew() *domain.DomainRenewReply {
	if x, ok := x.GetData().(*PollReply_DomainRenew); ok {
		return x.DomainRenew
	}
	return nil
}

func (x *PollReply) GetDomainPan() *domain.DomainPANReply {
	if x, ok := x.GetData().(*PollReply_DomainPan); ok {
		return x.DomainPan
	}
	return nil
}

func (x *PollReply) GetContactInfo() *contact.ContactInfoReply {
	if x, ok := x.GetData().(*PollReply_ContactInfo); ok {
		return x.ContactInfo
	}
	return nil
}

func (x *PollReply) GetContactTransfer() *contact.ContactTransferReply {
	if x, ok := x.GetData().(*PollReply_ContactTransfer); ok {
		return x.ContactTransfer
	}
	return nil
}

func (x *PollReply) GetContactPan() *contact.ContactPANReply {
	if x, ok := x.GetData().(*PollReply_ContactPan); ok {
		return x.ContactPan
	}
	return nil
}

func (x *PollReply) GetNominetDomainCancel() *nominet.DomainCancel {
	if x, ok := x.GetData().(*PollReply_NominetDomainCancel); ok {
		return x.NominetDomainCancel
	}
	return nil
}

func (x *PollReply) GetNominetDomainRelease() *nominet.DomainRelease {
	if x, ok := x.GetData().(*PollReply_NominetDomainRelease); ok {
		return x.NominetDomainRelease
	}
	return nil
}

func (x *PollReply) GetNominetDomainRegistrarChange() *nominet.DomainRegistrarChange {
	if x, ok := x.GetData().(*PollReply_NominetDomainRegistrarChange); ok {
		return x.NominetDomainRegistrarChange
	}
	return nil
}

func (x *PollReply) GetNominetHostCancel() *nominet.HostCancel {
	if x, ok := x.GetData().(*PollReply_NominetHostCancel); ok {
		return x.NominetHostCancel
	}
	return nil
}

func (x *PollReply) GetNominetProcess() *nominet.Process {
	if x, ok := x.GetData().(*PollReply_NominetProcess); ok {
		return x.NominetProcess
	}
	return nil
}

func (x *PollReply) GetNominetSuspend() *nominet.Suspend {
	if x, ok := x.GetData().(*PollReply_NominetSuspend); ok {
		return x.NominetSuspend
	}
	return nil
}

func (x *PollReply) GetNominetDomainFail() *nominet.DomainFail {
	if x, ok := x.GetData().(*PollReply_NominetDomainFail); ok {
		return x.NominetDomainFail
	}
	return nil
}

func (x *PollReply) GetNominetRegistrantTransfer() *nominet.RegistrantTransfer {
	if x, ok := x.GetData().(*PollReply_NominetRegistrantTransfer); ok {
		return x.NominetRegistrantTransfer
	}
	return nil
}

func (x *PollReply) GetTraficomTrn() *traficom.TrnData {
	if x, ok := x.GetData().(*PollReply_TraficomTrn); ok {
		return x.TraficomTrn
	}
	return nil
}

func (x *PollReply) GetVerisignLowBalance() *BalanceReply {
	if x, ok := x.GetData().(*PollReply_VerisignLowBalance); ok {
		return x.VerisignLowBalance
	}
	return nil
}

func (x *PollReply) GetMaintenanceInfo() *maintenance.MaintenanceInfoReply {
	if x, ok := x.GetData().(*PollReply_MaintenanceInfo); ok {
		return x.MaintenanceInfo
	}
	return nil
}

func (x *PollReply) GetEuridPoll() *eurid.PollReply {
	if x, ok := x.GetData().(*PollReply_EuridPoll); ok {
		return x.EuridPoll
	}
	return nil
}

func (x *PollReply) GetHostInfo() *host.HostInfoReply {
	if x, ok := x.GetData().(*PollReply_HostInfo); ok {
		return x.HostInfo
	}
	return nil
}

func (x *PollReply) GetChangeData() *ChangeData {
	if x != nil {
		return x.ChangeData
	}
	return nil
}

func (x *PollReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type isPollReply_Data interface {
	isPollReply_Data()
}

type PollReply_DomainInfo struct {
	DomainInfo *domain.DomainInfoReply `protobuf:"bytes,4,opt,name=domain_info,json=domainInfo,proto3,oneof"`
}

type PollReply_DomainTransfer struct {
	DomainTransfer *domain.DomainTransferReply `protobuf:"bytes,6,opt,name=domain_transfer,json=domainTransfer,proto3,oneof"`
}

type PollReply_DomainCreate struct {
	DomainCreate *domain.DomainCreateReply `protobuf:"bytes,7,opt,name=domain_create,json=domainCreate,proto3,oneof"`
}

type PollReply_DomainRenew struct {
	DomainRenew *domain.DomainRenewReply `protobuf:"bytes,8,opt,name=domain_renew,json=domainRenew,proto3,oneof"`
}

type PollReply_DomainPan struct {
	DomainPan *domain.DomainPANReply `protobuf:"bytes,9,opt,name=domain_pan,json=domainPan,proto3,oneof"`
}

type PollReply_ContactInfo struct {
	ContactInfo *contact.ContactInfoReply `protobuf:"bytes,5,opt,name=contact_info,json=contactInfo,proto3,oneof"`
}

type PollReply_ContactTransfer struct {
	ContactTransfer *contact.ContactTransferReply `protobuf:"bytes,20,opt,name=contact_transfer,json=contactTransfer,proto3,oneof"`
}

type PollReply_ContactPan struct {
	ContactPan *contact.ContactPANReply `protobuf:"bytes,21,opt,name=contact_pan,json=contactPan,proto3,oneof"`
}

type PollReply_NominetDomainCancel struct {
	NominetDomainCancel *nominet.DomainCancel `protobuf:"bytes,11,opt,name=nominet_domain_cancel,json=nominetDomainCancel,proto3,oneof"`
}

type PollReply_NominetDomainRelease struct {
	NominetDomainRelease *nominet.DomainRelease `protobuf:"bytes,12,opt,name=nominet_domain_release,json=nominetDomainRelease,proto3,oneof"`
}

type PollReply_NominetDomainRegistrarChange struct {
	NominetDomainRegistrarChange *nominet.DomainRegistrarChange `protobuf:"bytes,13,opt,name=nominet_domain_registrar_change,json=nominetDomainRegistrarChange,proto3,oneof"`
}

type PollReply_NominetHostCancel struct {
	NominetHostCancel *nominet.HostCancel `protobuf:"bytes,14,opt,name=nominet_host_cancel,json=nominetHostCancel,proto3,oneof"`
}

type PollReply_NominetProcess struct {
	NominetProcess *nominet.Process `protobuf:"bytes,15,opt,name=nominet_process,json=nominetProcess,proto3,oneof"`
}

type PollReply_NominetSuspend struct {
	NominetSuspend *nominet.Suspend `protobuf:"bytes,16,opt,name=nominet_suspend,json=nominetSuspend,proto3,oneof"`
}

type PollReply_NominetDomainFail struct {
	NominetDomainFail *nominet.DomainFail `protobuf:"bytes,17,opt,name=nominet_domain_fail,json=nominetDomainFail,proto3,oneof"`
}

type PollReply_NominetRegistrantTransfer struct {
	NominetRegistrantTransfer *nominet.RegistrantTransfer `protobuf:"bytes,18,opt,name=nominet_registrant_transfer,json=nominetRegistrantTransfer,proto3,oneof"`
}

type PollReply_TraficomTrn struct {
	TraficomTrn *traficom.TrnData `protobuf:"bytes,22,opt,name=traficom_trn,json=traficomTrn,proto3,oneof"`
}

type PollReply_VerisignLowBalance struct {
	VerisignLowBalance *BalanceReply `protobuf:"bytes,19,opt,name=verisign_low_balance,json=verisignLowBalance,proto3,oneof"`
}

type PollReply_MaintenanceInfo struct {
	MaintenanceInfo *maintenance.MaintenanceInfoReply `protobuf:"bytes,24,opt,name=maintenance_info,json=maintenanceInfo,proto3,oneof"`
}

type PollReply_EuridPoll struct {
	EuridPoll *eurid.PollReply `protobuf:"bytes,25,opt,name=eurid_poll,json=euridPoll,proto3,oneof"`
}

type PollReply_HostInfo struct {
	HostInfo *host.HostInfoReply `protobuf:"bytes,26,opt,name=host_info,json=hostInfo,proto3,oneof"`
}

func (*PollReply_DomainInfo) isPollReply_Data() {}

func (*PollReply_DomainTransfer) isPollReply_Data() {}

func (*PollReply_DomainCreate) isPollReply_Data() {}

func (*PollReply_DomainRenew) isPollReply_Data() {}

func (*PollReply_DomainPan) isPollReply_Data() {}

func (*PollReply_ContactInfo) isPollReply_Data() {}

func (*PollReply_ContactTransfer) isPollReply_Data() {}

func (*PollReply_ContactPan) isPollReply_Data() {}

func (*PollReply_NominetDomainCancel) isPollReply_Data() {}

func (*PollReply_NominetDomainRelease) isPollReply_Data() {}

func (*PollReply_NominetDomainRegistrarChange) isPollReply_Data() {}

func (*PollReply_NominetHostCancel) isPollReply_Data() {}

func (*PollReply_NominetProcess) isPollReply_Data() {}

func (*PollReply_NominetSuspend) isPollReply_Data() {}

func (*PollReply_NominetDomainFail) isPollReply_Data() {}

func (*PollReply_NominetRegistrantTransfer) isPollReply_Data() {}

func (*PollReply_TraficomTrn) isPollReply_Data() {}

func (*PollReply_VerisignLowBalance) isPollReply_Data() {}

func (*PollReply_MaintenanceInfo) isPollReply_Data() {}

func (*PollReply_EuridPoll) isPollReply_Data() {}

func (*PollReply_HostInfo) isPollReply_Data() {}

type ChangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeState         ChangeData_ChangeState      `protobuf:"varint,1,opt,name=change_state,json=changeState,proto3,enum=epp.ChangeData_ChangeState" json:"change_state,omitempty"`
	Operation           *ChangeData_ChangeOperation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Date                *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	ServerTransactionId string                      `protobuf:"bytes,4,opt,name=server_transaction_id,json=serverTransactionId,proto3" json:"server_transaction_id,omitempty"`
	Who                 string                      `protobuf:"bytes,5,opt,name=who,proto3" json:"who,omitempty"`
	CaseId              *ChangeData_CaseID          `protobuf:"bytes,6,opt,name=case_id,json=caseId,proto3" json:"case_id,omitempty"`
	Reason              *wrapperspb.StringValue     `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ChangeData) Reset() {
	*x = ChangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeData) ProtoMessage() {}

func (x *ChangeData) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeData.ProtoReflect.Descriptor instead.
func (*ChangeData) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeData) GetChangeState() ChangeData_ChangeState {
	if x != nil {
		return x.ChangeState
	}
	return ChangeData_AFTER
}

func (x *ChangeData) GetOperation() *ChangeData_ChangeOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *ChangeData) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ChangeData) GetServerTransactionId() string {
	if x != nil {
		return x.ServerTransactionId
	}
	return ""
}

func (x *ChangeData) GetWho() string {
	if x != nil {
		return x.Who
	}
	return ""
}

func (x *ChangeData) GetCaseId() *ChangeData_CaseID {
	if x != nil {
		return x.CaseId
	}
	return nil
}

func (x *ChangeData) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type BalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance         string                  `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency        string                  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	CreditLimit     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=credit_limit,json=creditLimit,proto3" json:"credit_limit,omitempty"`
	AvailableCredit *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=available_credit,json=availableCredit,proto3" json:"available_credit,omitempty"`
	// Types that are assignable to CreditThreshold:
	//	*BalanceReply_FixedCreditThreshold
	//	*BalanceReply_PercentageCreditThreshold
	CreditThreshold isBalanceReply_CreditThreshold `protobuf_oneof:"credit_threshold"`
	CmdResp         *common.CommandResponse        `protobuf:"bytes,7,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *BalanceReply) Reset() {
	*x = BalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceReply) ProtoMessage() {}

func (x *BalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceReply.ProtoReflect.Descriptor instead.
func (*BalanceReply) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{4}
}

func (x *BalanceReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *BalanceReply) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceReply) GetCreditLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.CreditLimit
	}
	return nil
}

func (x *BalanceReply) GetAvailableCredit() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailableCredit
	}
	return nil
}

func (m *BalanceReply) GetCreditThreshold() isBalanceReply_CreditThreshold {
	if m != nil {
		return m.CreditThreshold
	}
	return nil
}

func (x *BalanceReply) GetFixedCreditThreshold() *wrapperspb.StringValue {
	if x, ok := x.GetCreditThreshold().(*BalanceReply_FixedCreditThreshold); ok {
		return x.FixedCreditThreshold
	}
	return nil
}

func (x *BalanceReply) GetPercentageCreditThreshold() *wrapperspb.UInt32Value {
	if x, ok := x.GetCreditThreshold().(*BalanceReply_PercentageCreditThreshold); ok {
		return x.PercentageCreditThreshold
	}
	return nil
}

func (x *BalanceReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type isBalanceReply_CreditThreshold interface {
	isBalanceReply_CreditThreshold()
}

type BalanceReply_FixedCreditThreshold struct {
	FixedCreditThreshold *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=fixed_credit_threshold,json=fixedCreditThreshold,proto3,oneof"`
}

type BalanceReply_PercentageCreditThreshold struct {
	PercentageCreditThreshold *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=percentage_credit_threshold,json=percentageCreditThreshold,proto3,oneof"`
}

func (*BalanceReply_FixedCreditThreshold) isBalanceReply_CreditThreshold() {}

func (*BalanceReply_PercentageCreditThreshold) isBalanceReply_CreditThreshold() {}

type ChangeData_ChangeOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType ChangeData_ChangeOperation_ChangeOperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=epp.ChangeData_ChangeOperation_ChangeOperationType" json:"operation_type,omitempty"`
	Operation     *wrapperspb.StringValue                        `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ChangeData_ChangeOperation) Reset() {
	*x = ChangeData_ChangeOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeData_ChangeOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeData_ChangeOperation) ProtoMessage() {}

func (x *ChangeData_ChangeOperation) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeData_ChangeOperation.ProtoReflect.Descriptor instead.
func (*ChangeData_ChangeOperation) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ChangeData_ChangeOperation) GetOperationType() ChangeData_ChangeOperation_ChangeOperationType {
	if x != nil {
		return x.OperationType
	}
	return ChangeData_ChangeOperation_Custom
}

func (x *ChangeData_ChangeOperation) GetOperation() *wrapperspb.StringValue {
	if x != nil {
		return x.Operation
	}
	return nil
}

type ChangeData_CaseID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseIdType ChangeData_CaseID_CaseIDType `protobuf:"varint,1,opt,name=case_id_type,json=caseIdType,proto3,enum=epp.ChangeData_CaseID_CaseIDType" json:"case_id_type,omitempty"`
	Name       *wrapperspb.StringValue      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CaseId     string                       `protobuf:"bytes,3,opt,name=case_id,json=caseId,proto3" json:"case_id,omitempty"`
}

func (x *ChangeData_CaseID) Reset() {
	*x = ChangeData_CaseID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeData_CaseID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeData_CaseID) ProtoMessage() {}

func (x *ChangeData_CaseID) ProtoReflect() protoreflect.Message {
	mi := &file_epp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeData_CaseID.ProtoReflect.Descriptor instead.
func (*ChangeData_CaseID) Descriptor() ([]byte, []int) {
	return file_epp_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ChangeData_CaseID) GetCaseIdType() ChangeData_CaseID_CaseIDType {
	if x != nil {
		return x.CaseIdType
	}
	return ChangeData_CaseID_Custom
}

func (x *ChangeData_CaseID) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ChangeData_CaseID) GetCaseId() string {
	if x != nil {
		return x.CaseId
	}
	return ""
}

var File_epp_proto protoreflect.FileDescriptor

var file_epp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x65, 0x70, 0x70,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x6f, 0x73,
	0x74, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x67,
	0x70, 0x2f, 0x72, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x74, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x74, 0x72, 0x61, 0x66, 0x69, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61,
	0x66, 0x69, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x2f, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74,
	0x6d, 0x63, 0x68, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x64, 0x61, 0x63, 0x2f, 0x64, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x33, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x41,
	0x63, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xe7, 0x0d, 0x0a, 0x09, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x41, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x41, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x61, 0x6e, 0x12, 0x4f,
	0x0a, 0x15, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x52, 0x0a, 0x16, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x1c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x13, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x49, 0x0a,
	0x13, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x61, 0x0a, 0x1b, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x19, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x66, 0x69, 0x63, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x69, 0x63, 0x6f, 0x6d,
	0x2e, 0x54, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66,
	0x69, 0x63, 0x6f, 0x6d, 0x54, 0x72, 0x6e, 0x12, 0x45, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x73, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72,
	0x69, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x75, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9e, 0x07, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xc5,
	0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x10, 0x09, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x2e,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x2b, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x44, 0x52, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x53, 0x10, 0x02, 0x22, 0x24,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x22, 0xd0, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x1b, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x93, 0x38, 0x0a, 0x08, 0x45, 0x50, 0x50, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x6c, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x70, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x91,
	0x01, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x72, 0x67, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x72, 0x67,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x6a, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a,
	0x09, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f,
	0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x64, 0x0a, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68,
	0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x74, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x22, 0x23, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x48,
	0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x7a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x71, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x81, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x22, 0x21, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x22, 0x21, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x28, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x9f,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x22, 0x2b, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x9d, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x22, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x9d, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x22, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x71, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x37, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x0c, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x63, 0x6b, 0x1a, 0x0e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07,
	0x22, 0x05, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x28, 0x01, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x0e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x20, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8c, 0x01,
	0x0a, 0x0d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x23, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a,
	0x0d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x0e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x96, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x67,
	0x0a, 0x0d, 0x48, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x48,
	0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x7f, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x7e, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x65,
	0x75, 0x72, 0x69, 0x64, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x44, 0x4e, 0x53,
	0x53, 0x45, 0x43, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x44,
	0x4e, 0x53, 0x53, 0x45, 0x43, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75,
	0x72, 0x69, 0x64, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x45, 0x43, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x22, 0x2e, 0x2f, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x73, 0x65,
	0x63, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0d, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72,
	0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63,
	0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x79,
	0x0a, 0x0e, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x54, 0x4d, 0x43,
	0x48, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f,
	0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x7d,
	0x0a, 0x0f, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x4d, 0x44, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x4d, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x6d, 0x64, 0x12, 0x8c, 0x01,
	0x0a, 0x16, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x53, 0x4d, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74,
	0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x53, 0x4d, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x74, 0x6d, 0x63,
	0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6d, 0x64, 0x12, 0x7f, 0x0a, 0x10,
	0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x4d, 0x44, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7e, 0x0a,
	0x0e, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x22, 0x26, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a,
	0x0d, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x1a,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22,
	0x25, 0x2f, 0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x18, 0x54, 0x4d,
	0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63,
	0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f,
	0x74, 0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x10, 0x54, 0x4d, 0x43, 0x48, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x74, 0x6d, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x74,
	0x6d, 0x63, 0x68, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x09, 0x44, 0x41, 0x43,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x63,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x63, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12,
	0x30, 0x2f, 0x64, 0x61, 0x63, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x7d, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x6b, 0x0a, 0x08, 0x44, 0x41, 0x43, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x63, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x64, 0x61, 0x63, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6d,
	0x0a, 0x09, 0x44, 0x41, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x64, 0x61, 0x63, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x2a, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30,
	0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_epp_proto_rawDescOnce sync.Once
	file_epp_proto_rawDescData = file_epp_proto_rawDesc
)

func file_epp_proto_rawDescGZIP() []byte {
	file_epp_proto_rawDescOnce.Do(func() {
		file_epp_proto_rawDescData = protoimpl.X.CompressGZIP(file_epp_proto_rawDescData)
	})
	return file_epp_proto_rawDescData
}

var file_epp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_epp_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_epp_proto_goTypes = []interface{}{
	(ChangeData_ChangeState)(0),                         // 0: epp.ChangeData.ChangeState
	(ChangeData_ChangeOperation_ChangeOperationType)(0), // 1: epp.ChangeData.ChangeOperation.ChangeOperationType
	(ChangeData_CaseID_CaseIDType)(0),                   // 2: epp.ChangeData.CaseID.CaseIDType
	(*RegistryInfo)(nil),                                // 3: epp.RegistryInfo
	(*PollAck)(nil),                                     // 4: epp.PollAck
	(*PollReply)(nil),                                   // 5: epp.PollReply
	(*ChangeData)(nil),                                  // 6: epp.ChangeData
	(*BalanceReply)(nil),                                // 7: epp.BalanceReply
	(*ChangeData_ChangeOperation)(nil),                  // 8: epp.ChangeData.ChangeOperation
	(*ChangeData_CaseID)(nil),                           // 9: epp.ChangeData.CaseID
	(*timestamppb.Timestamp)(nil),                       // 10: google.protobuf.Timestamp
	(*domain.DomainInfoReply)(nil),                      // 11: epp.domain.DomainInfoReply
	(*domain.DomainTransferReply)(nil),                  // 12: epp.domain.DomainTransferReply
	(*domain.DomainCreateReply)(nil),                    // 13: epp.domain.DomainCreateReply
	(*domain.DomainRenewReply)(nil),                     // 14: epp.domain.DomainRenewReply
	(*domain.DomainPANReply)(nil),                       // 15: epp.domain.DomainPANReply
	(*contact.ContactInfoReply)(nil),                    // 16: epp.contact.ContactInfoReply
	(*contact.ContactTransferReply)(nil),                // 17: epp.contact.ContactTransferReply
	(*contact.ContactPANReply)(nil),                     // 18: epp.contact.ContactPANReply
	(*nominet.DomainCancel)(nil),                        // 19: epp.nominet.DomainCancel
	(*nominet.DomainRelease)(nil),                       // 20: epp.nominet.DomainRelease
	(*nominet.DomainRegistrarChange)(nil),               // 21: epp.nominet.DomainRegistrarChange
	(*nominet.HostCancel)(nil),                          // 22: epp.nominet.HostCancel
	(*nominet.Process)(nil),                             // 23: epp.nominet.Process
	(*nominet.Suspend)(nil),                             // 24: epp.nominet.Suspend
	(*nominet.DomainFail)(nil),                          // 25: epp.nominet.DomainFail
	(*nominet.RegistrantTransfer)(nil),                  // 26: epp.nominet.RegistrantTransfer
	(*traficom.TrnData)(nil),                            // 27: epp.traficom.TrnData
	(*maintenance.MaintenanceInfoReply)(nil),            // 28: epp.maintenance.MaintenanceInfoReply
	(*eurid.PollReply)(nil),                             // 29: epp.eurid.PollReply
	(*host.HostInfoReply)(nil),                          // 30: epp.host.HostInfoReply
	(*common.CommandResponse)(nil),                      // 31: epp.common.CommandResponse
	(*wrapperspb.StringValue)(nil),                      // 32: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                      // 33: google.protobuf.UInt32Value
	(*domain.DomainCheckRequest)(nil),                   // 34: epp.domain.DomainCheckRequest
	(*domain.DomainClaimsCheckRequest)(nil),             // 35: epp.domain.DomainClaimsCheckRequest
	(*domain.DomainTrademarkCheckRequest)(nil),          // 36: epp.domain.DomainTrademarkCheckRequest
	(*domain.DomainInfoRequest)(nil),                    // 37: epp.domain.DomainInfoRequest
	(*domain.DomainCreateRequest)(nil),                  // 38: epp.domain.DomainCreateRequest
	(*domain.DomainDeleteRequest)(nil),                  // 39: epp.domain.DomainDeleteRequest
	(*domain.DomainUpdateRequest)(nil),                  // 40: epp.domain.DomainUpdateRequest
	(*domain.DomainRenewRequest)(nil),                   // 41: epp.domain.DomainRenewRequest
	(*domain.DomainTransferQueryRequest)(nil),           // 42: epp.domain.DomainTransferQueryRequest
	(*domain.DomainTransferRequestRequest)(nil),         // 43: epp.domain.DomainTransferRequestRequest
	(*domain.DomainTransferAcceptRejectRequest)(nil),    // 44: epp.domain.DomainTransferAcceptRejectRequest
	(*rgp.RequestRequest)(nil),                          // 45: epp.rgp.RequestRequest
	(*domain.DomainSyncRequest)(nil),                    // 46: epp.domain.DomainSyncRequest
	(*host.HostCheckRequest)(nil),                       // 47: epp.host.HostCheckRequest
	(*host.HostInfoRequest)(nil),                        // 48: epp.host.HostInfoRequest
	(*host.HostCreateRequest)(nil),                      // 49: epp.host.HostCreateRequest
	(*host.HostDeleteRequest)(nil),                      // 50: epp.host.HostDeleteRequest
	(*host.HostUpdateRequest)(nil),                      // 51: epp.host.HostUpdateRequest
	(*contact.ContactCheckRequest)(nil),                 // 52: epp.contact.ContactCheckRequest
	(*contact.ContactInfoRequest)(nil),                  // 53: epp.contact.ContactInfoRequest
	(*contact.ContactCreateRequest)(nil),                // 54: epp.contact.ContactCreateRequest
	(*contact.ContactDeleteRequest)(nil),                // 55: epp.contact.ContactDeleteRequest
	(*contact.ContactUpdateRequest)(nil),                // 56: epp.contact.ContactUpdateRequest
	(*contact.ContactTransferQueryRequest)(nil),         // 57: epp.contact.ContactTransferQueryRequest
	(*contact.ContactTransferRequestRequest)(nil),       // 58: epp.contact.ContactTransferRequestRequest
	(*maintenance.MaintenanceInfoRequest)(nil),          // 59: epp.maintenance.MaintenanceInfoRequest
	(*nominet.HandshakeAcceptRequest)(nil),              // 60: epp.nominet.HandshakeAcceptRequest
	(*nominet.HandshakeRejectRequest)(nil),              // 61: epp.nominet.HandshakeRejectRequest
	(*nominet.ReleaseRequest)(nil),                      // 62: epp.nominet.ReleaseRequest
	(*nominet.ContactValidateRequest)(nil),              // 63: epp.nominet.ContactValidateRequest
	(*nominet.LockRequest)(nil),                         // 64: epp.nominet.LockRequest
	(*eurid.DNSQualityRequest)(nil),                     // 65: epp.eurid.DNSQualityRequest
	(*eurid.DNSSECEligibilityRequest)(nil),              // 66: epp.eurid.DNSSECEligibilityRequest
	(*tmch.MarkCheckRequest)(nil),                       // 67: epp.tmch.MarkCheckRequest
	(*tmch.MarkCreateRequest)(nil),                      // 68: epp.tmch.MarkCreateRequest
	(*tmch.MarkInfoRequest)(nil),                        // 69: epp.tmch.MarkInfoRequest
	(*tmch.MarkUpdateRequest)(nil),                      // 70: epp.tmch.MarkUpdateRequest
	(*tmch.MarkRenewRequest)(nil),                       // 71: epp.tmch.MarkRenewRequest
	(*tmch.MarkTransferInitiateRequest)(nil),            // 72: epp.tmch.MarkTransferInitiateRequest
	(*tmch.MarkTransferRequest)(nil),                    // 73: epp.tmch.MarkTransferRequest
	(*dac.DomainRequest)(nil),                           // 74: epp.dac.DomainRequest
	(*dac.UsageRequest)(nil),                            // 75: epp.dac.UsageRequest
	(*domain.DomainCheckReply)(nil),                     // 76: epp.domain.DomainCheckReply
	(*domain.DomainClaimsCheckReply)(nil),               // 77: epp.domain.DomainClaimsCheckReply
	(*domain.DomainDeleteReply)(nil),                    // 78: epp.domain.DomainDeleteReply
	(*domain.DomainUpdateReply)(nil),                    // 79: epp.domain.DomainUpdateReply
	(*rgp.RestoreReply)(nil),                            // 80: epp.rgp.RestoreReply
	(*host.HostCheckReply)(nil),                         // 81: epp.host.HostCheckReply
	(*host.HostCreateReply)(nil),                        // 82: epp.host.HostCreateReply
	(*host.HostDeleteReply)(nil),                        // 83: epp.host.HostDeleteReply
	(*host.HostUpdateReply)(nil),                        // 84: epp.host.HostUpdateReply
	(*contact.ContactCheckReply)(nil),                   // 85: epp.contact.ContactCheckReply
	(*contact.ContactCreateReply)(nil),                  // 86: epp.contact.ContactCreateReply
	(*contact.ContactDeleteReply)(nil),                  // 87: epp.contact.ContactDeleteReply
	(*contact.ContactUpdateReply)(nil),                  // 88: epp.contact.ContactUpdateReply
	(*maintenance.MaintenanceListReply)(nil),            // 89: epp.maintenance.MaintenanceListReply
	(*nominet.NominetTagListReply)(nil),                 // 90: epp.nominet.NominetTagListReply
	(*nominet.HandshakeReply)(nil),                      // 91: epp.nominet.HandshakeReply
	(*nominet.ReleaseReply)(nil),                        // 92: epp.nominet.ReleaseReply
	(*nominet.ContactValidateReply)(nil),                // 93: epp.nominet.ContactValidateReply
	(*nominet.LockReply)(nil),                           // 94: epp.nominet.LockReply
	(*eurid.HitPointsReply)(nil),                        // 95: epp.eurid.HitPointsReply
	(*eurid.RegistrationLimitReply)(nil),                // 96: epp.eurid.RegistrationLimitReply
	(*eurid.DNSQualityReply)(nil),                       // 97: epp.eurid.DNSQualityReply
	(*eurid.DNSSECEligibilityReply)(nil),                // 98: epp.eurid.DNSSECEligibilityReply
	(*tmch.MarkCheckResponse)(nil),                      // 99: epp.tmch.MarkCheckResponse
	(*tmch.MarkCreateResponse)(nil),                     // 100: epp.tmch.MarkCreateResponse
	(*tmch.MarkInfoResponse)(nil),                       // 101: epp.tmch.MarkInfoResponse
	(*tmch.MarkSMDInfoResponse)(nil),                    // 102: epp.tmch.MarkSMDInfoResponse
	(*tmch.MarkUpdateResponse)(nil),                     // 103: epp.tmch.MarkUpdateResponse
	(*tmch.MarkRenewResponse)(nil),                      // 104: epp.tmch.MarkRenewResponse
	(*tmch.MarkTransferInitiateResponse)(nil),           // 105: epp.tmch.MarkTransferInitiateResponse
	(*tmch.MarkTransferResponse)(nil),                   // 106: epp.tmch.MarkTransferResponse
	(*dac.DomainResponse)(nil),                          // 107: epp.dac.DomainResponse
	(*dac.UsageResponse)(nil),                           // 108: epp.dac.UsageResponse
}
var file_epp_proto_depIdxs = []int32{
	10,  // 0: epp.PollReply.enqueue_date:type_name -> google.protobuf.Timestamp
	11,  // 1: epp.PollReply.domain_info:type_name -> epp.domain.DomainInfoReply
	12,  // 2: epp.PollReply.domain_transfer:type_name -> epp.domain.DomainTransferReply
	13,  // 3: epp.PollReply.domain_create:type_name -> epp.domain.DomainCreateReply
	14,  // 4: epp.PollReply.domain_renew:type_name -> epp.domain.DomainRenewReply
	15,  // 5: epp.PollReply.domain_pan:type_name -> epp.domain.DomainPANReply
	16,  // 6: epp.PollReply.contact_info:type_name -> epp.contact.ContactInfoReply
	17,  // 7: epp.PollReply.contact_transfer:type_name -> epp.contact.ContactTransferReply
	18,  // 8: epp.PollReply.contact_pan:type_name -> epp.contact.ContactPANReply
	19,  // 9: epp.PollReply.nominet_domain_cancel:type_name -> epp.nominet.DomainCancel
	20,  // 10: epp.PollReply.nominet_domain_release:type_name -> epp.nominet.DomainRelease
	21,  // 11: epp.PollReply.nominet_domain_registrar_change:type_name -> epp.nominet.DomainRegistrarChange
	22,  // 12: epp.PollReply.nominet_host_cancel:type_name -> epp.nominet.HostCancel
	23,  // 13: epp.PollReply.nominet_process:type_name -> epp.nominet.Process
	24,  // 14: epp.PollReply.nominet_suspend:type_name -> epp.nominet.Suspend
	25,  // 15: epp.PollReply.nominet_domain_fail:type_name -> epp.nominet.DomainFail
	26,  // 16: epp.PollReply.nominet_registrant_transfer:type_name -> epp.nominet.RegistrantTransfer
	27,  // 17: epp.PollReply.traficom_trn:type_name -> epp.traficom.TrnData
	7,   // 18: epp.PollReply.verisign_low_balance:type_name -> epp.BalanceReply
	28,  // 19: epp.PollReply.maintenance_info:type_name -> epp.maintenance.MaintenanceInfoReply
	29,  // 20: epp.PollReply.eurid_poll:type_name -> epp.eurid.PollReply
	30,  // 21: epp.PollReply.host_info:type_name -> epp.host.HostInfoReply
	6,   // 22: epp.PollReply.change_data:type_name -> epp.ChangeData
	31,  // 23: epp.PollReply.cmd_resp:type_name -> epp.common.CommandResponse
	0,   // 24: epp.ChangeData.change_state:type_name -> epp.ChangeData.ChangeState
	8,   // 25: epp.ChangeData.operation:type_name -> epp.ChangeData.ChangeOperation
	10,  // 26: epp.ChangeData.date:type_name -> google.protobuf.Timestamp
	9,   // 27: epp.ChangeData.case_id:type_name -> epp.ChangeData.CaseID
	32,  // 28: epp.ChangeData.reason:type_name -> google.protobuf.StringValue
	32,  // 29: epp.BalanceReply.credit_limit:type_name -> google.protobuf.StringValue
	32,  // 30: epp.BalanceReply.available_credit:type_name -> google.protobuf.StringValue
	32,  // 31: epp.BalanceReply.fixed_credit_threshold:type_name -> google.protobuf.StringValue
	33,  // 32: epp.BalanceReply.percentage_credit_threshold:type_name -> google.protobuf.UInt32Value
	31,  // 33: epp.BalanceReply.cmd_resp:type_name -> epp.common.CommandResponse
	1,   // 34: epp.ChangeData.ChangeOperation.operation_type:type_name -> epp.ChangeData.ChangeOperation.ChangeOperationType
	32,  // 35: epp.ChangeData.ChangeOperation.operation:type_name -> google.protobuf.StringValue
	2,   // 36: epp.ChangeData.CaseID.case_id_type:type_name -> epp.ChangeData.CaseID.CaseIDType
	32,  // 37: epp.ChangeData.CaseID.name:type_name -> google.protobuf.StringValue
	34,  // 38: epp.EPPProxy.DomainCheck:input_type -> epp.domain.DomainCheckRequest
	35,  // 39: epp.EPPProxy.DomainClaimsCheck:input_type -> epp.domain.DomainClaimsCheckRequest
	36,  // 40: epp.EPPProxy.DomainTrademarkCheck:input_type -> epp.domain.DomainTrademarkCheckRequest
	37,  // 41: epp.EPPProxy.DomainInfo:input_type -> epp.domain.DomainInfoRequest
	38,  // 42: epp.EPPProxy.DomainCreate:input_type -> epp.domain.DomainCreateRequest
	39,  // 43: epp.EPPProxy.DomainDelete:input_type -> epp.domain.DomainDeleteRequest
	40,  // 44: epp.EPPProxy.DomainUpdate:input_type -> epp.domain.DomainUpdateRequest
	41,  // 45: epp.EPPProxy.DomainRenew:input_type -> epp.domain.DomainRenewRequest
	42,  // 46: epp.EPPProxy.DomainTransferQuery:input_type -> epp.domain.DomainTransferQueryRequest
	43,  // 47: epp.EPPProxy.DomainTransferRequest:input_type -> epp.domain.DomainTransferRequestRequest
	44,  // 48: epp.EPPProxy.DomainTransferCancel:input_type -> epp.domain.DomainTransferAcceptRejectRequest
	44,  // 49: epp.EPPProxy.DomainTransferAccept:input_type -> epp.domain.DomainTransferAcceptRejectRequest
	44,  // 50: epp.EPPProxy.DomainTransferReject:input_type -> epp.domain.DomainTransferAcceptRejectRequest
	45,  // 51: epp.EPPProxy.DomainRestoreRequest:input_type -> epp.rgp.RequestRequest
	46,  // 52: epp.EPPProxy.DomainSync:input_type -> epp.domain.DomainSyncRequest
	47,  // 53: epp.EPPProxy.HostCheck:input_type -> epp.host.HostCheckRequest
	48,  // 54: epp.EPPProxy.HostInfo:input_type -> epp.host.HostInfoRequest
	49,  // 55: epp.EPPProxy.HostCreate:input_type -> epp.host.HostCreateRequest
	50,  // 56: epp.EPPProxy.HostDelete:input_type -> epp.host.HostDeleteRequest
	51,  // 57: epp.EPPProxy.HostUpdate:input_type -> epp.host.HostUpdateRequest
	52,  // 58: epp.EPPProxy.ContactCheck:input_type -> epp.contact.ContactCheckRequest
	53,  // 59: epp.EPPProxy.ContactInfo:input_type -> epp.contact.ContactInfoRequest
	54,  // 60: epp.EPPProxy.ContactCreate:input_type -> epp.contact.ContactCreateRequest
	55,  // 61: epp.EPPProxy.ContactDelete:input_type -> epp.contact.ContactDeleteRequest
	56,  // 62: epp.EPPProxy.ContactUpdate:input_type -> epp.contact.ContactUpdateRequest
	57,  // 63: epp.EPPProxy.ContactTransferQuery:input_type -> epp.contact.ContactTransferQueryRequest
	58,  // 64: epp.EPPProxy.ContactTransferRequest:input_type -> epp.contact.ContactTransferRequestRequest
	58,  // 65: epp.EPPProxy.ContactTransferAccept:input_type -> epp.contact.ContactTransferRequestRequest
	58,  // 66: epp.EPPProxy.ContactTransferReject:input_type -> epp.contact.ContactTransferRequestRequest
	3,   // 67: epp.EPPProxy.MaintenanceList:input_type -> epp.RegistryInfo
	59,  // 68: epp.EPPProxy.MaintenanceInfo:input_type -> epp.maintenance.MaintenanceInfoRequest
	4,   // 69: epp.EPPProxy.Poll:input_type -> epp.PollAck
	3,   // 70: epp.EPPProxy.NominetTagList:input_type -> epp.RegistryInfo
	60,  // 71: epp.EPPProxy.NominetAccept:input_type -> epp.nominet.HandshakeAcceptRequest
	61,  // 72: epp.EPPProxy.NominetReject:input_type -> epp.nominet.HandshakeRejectRequest
	62,  // 73: epp.EPPProxy.NominetRelease:input_type -> epp.nominet.ReleaseRequest
	63,  // 74: epp.EPPProxy.NominetContactValidate:input_type -> epp.nominet.ContactValidateRequest
	64,  // 75: epp.EPPProxy.NominetLock:input_type -> epp.nominet.LockRequest
	64,  // 76: epp.EPPProxy.NominetUnlock:input_type -> epp.nominet.LockRequest
	3,   // 77: epp.EPPProxy.BalanceInfo:input_type -> epp.RegistryInfo
	3,   // 78: epp.EPPProxy.HitPointsInfo:input_type -> epp.RegistryInfo
	3,   // 79: epp.EPPProxy.RegistrationLimitInfo:input_type -> epp.RegistryInfo
	65,  // 80: epp.EPPProxy.DNSQualityInfo:input_type -> epp.eurid.DNSQualityRequest
	66,  // 81: epp.EPPProxy.DNSSECEligibilityInfo:input_type -> epp.eurid.DNSSECEligibilityRequest
	67,  // 82: epp.EPPProxy.TMCHMarkCheck:input_type -> epp.tmch.MarkCheckRequest
	68,  // 83: epp.EPPProxy.TMCHMarkCreate:input_type -> epp.tmch.MarkCreateRequest
	69,  // 84: epp.EPPProxy.TMCHMarkInfo:input_type -> epp.tmch.MarkInfoRequest
	69,  // 85: epp.EPPProxy.TMCHMarkSMDInfo:input_type -> epp.tmch.MarkInfoRequest
	69,  // 86: epp.EPPProxy.TMCHMarkEncodedSMDInfo:input_type -> epp.tmch.MarkInfoRequest
	69,  // 87: epp.EPPProxy.TMCHMarkFileInfo:input_type -> epp.tmch.MarkInfoRequest
	70,  // 88: epp.EPPProxy.TMCHMarkUpdate:input_type -> epp.tmch.MarkUpdateRequest
	71,  // 89: epp.EPPProxy.TMCHMarkRenew:input_type -> epp.tmch.MarkRenewRequest
	72,  // 90: epp.EPPProxy.TMCHMarkTransferInitiate:input_type -> epp.tmch.MarkTransferInitiateRequest
	73,  // 91: epp.EPPProxy.TMCHMarkTransfer:input_type -> epp.tmch.MarkTransferRequest
	74,  // 92: epp.EPPProxy.DACDomain:input_type -> epp.dac.DomainRequest
	75,  // 93: epp.EPPProxy.DACUsage:input_type -> epp.dac.UsageRequest
	75,  // 94: epp.EPPProxy.DACLimits:input_type -> epp.dac.UsageRequest
	76,  // 95: epp.EPPProxy.DomainCheck:output_type -> epp.domain.DomainCheckReply
	77,  // 96: epp.EPPProxy.DomainClaimsCheck:output_type -> epp.domain.DomainClaimsCheckReply
	77,  // 97: epp.EPPProxy.DomainTrademarkCheck:output_type -> epp.domain.DomainClaimsCheckReply
	11,  // 98: epp.EPPProxy.DomainInfo:output_type -> epp.domain.DomainInfoReply
	13,  // 99: epp.EPPProxy.DomainCreate:output_type -> epp.domain.DomainCreateReply
	78,  // 100: epp.EPPProxy.DomainDelete:output_type -> epp.domain.DomainDeleteReply
	79,  // 101: epp.EPPProxy.DomainUpdate:output_type -> epp.domain.DomainUpdateReply
	14,  // 102: epp.EPPProxy.DomainRenew:output_type -> epp.domain.DomainRenewReply
	12,  // 103: epp.EPPProxy.DomainTransferQuery:output_type -> epp.domain.DomainTransferReply
	12,  // 104: epp.EPPProxy.DomainTransferRequest:output_type -> epp.domain.DomainTransferReply
	12,  // 105: epp.EPPProxy.DomainTransferCancel:output_type -> epp.domain.DomainTransferReply
	12,  // 106: epp.EPPProxy.DomainTransferAccept:output_type -> epp.domain.DomainTransferReply
	12,  // 107: epp.EPPProxy.DomainTransferReject:output_type -> epp.domain.DomainTransferReply
	80,  // 108: epp.EPPProxy.DomainRestoreRequest:output_type -> epp.rgp.RestoreReply
	79,  // 109: epp.EPPProxy.DomainSync:output_type -> epp.domain.DomainUpdateReply
	81,  // 110: epp.EPPProxy.HostCheck:output_type -> epp.host.HostCheckReply
	30,  // 111: epp.EPPProxy.HostInfo:output_type -> epp.host.HostInfoReply
	82,  // 112: epp.EPPProxy.HostCreate:output_type -> epp.host.HostCreateReply
	83,  // 113: epp.EPPProxy.HostDelete:output_type -> epp.host.HostDeleteReply
	84,  // 114: epp.EPPProxy.HostUpdate:output_type -> epp.host.HostUpdateReply
	85,  // 115: epp.EPPProxy.ContactCheck:output_type -> epp.contact.ContactCheckReply
	16,  // 116: epp.EPPProxy.ContactInfo:output_type -> epp.contact.ContactInfoReply
	86,  // 117: epp.EPPProxy.ContactCreate:output_type -> epp.contact.ContactCreateReply
	87,  // 118: epp.EPPProxy.ContactDelete:output_type -> epp.contact.ContactDeleteReply
	88,  // 119: epp.EPPProxy.ContactUpdate:output_type -> epp.contact.ContactUpdateReply
	17,  // 120: epp.EPPProxy.ContactTransferQuery:output_type -> epp.contact.ContactTransferReply
	17,  // 121: epp.EPPProxy.ContactTransferRequest:output_type -> epp.contact.ContactTransferReply
	17,  // 122: epp.EPPProxy.ContactTransferAccept:output_type -> epp.contact.ContactTransferReply
	17,  // 123: epp.EPPProxy.ContactTransferReject:output_type -> epp.contact.ContactTransferReply
	89,  // 124: epp.EPPProxy.MaintenanceList:output_type -> epp.maintenance.MaintenanceListReply
	28,  // 125: epp.EPPProxy.MaintenanceInfo:output_type -> epp.maintenance.MaintenanceInfoReply
	5,   // 126: epp.EPPProxy.Poll:output_type -> epp.PollReply
	90,  // 127: epp.EPPProxy.NominetTagList:output_type -> epp.nominet.NominetTagListReply
	91,  // 128: epp.EPPProxy.NominetAccept:output_type -> epp.nominet.HandshakeReply
	91,  // 129: epp.EPPProxy.NominetReject:output_type -> epp.nominet.HandshakeReply
	92,  // 130: epp.EPPProxy.NominetRelease:output_type -> epp.nominet.ReleaseReply
	93,  // 131: epp.EPPProxy.NominetContactValidate:output_type -> epp.nominet.ContactValidateReply
	94,  // 132: epp.EPPProxy.NominetLock:output_type -> epp.nominet.LockReply
	94,  // 133: epp.EPPProxy.NominetUnlock:output_type -> epp.nominet.LockReply
	7,   // 134: epp.EPPProxy.BalanceInfo:output_type -> epp.BalanceReply
	95,  // 135: epp.EPPProxy.HitPointsInfo:output_type -> epp.eurid.HitPointsReply
	96,  // 136: epp.EPPProxy.RegistrationLimitInfo:output_type -> epp.eurid.RegistrationLimitReply
	97,  // 137: epp.EPPProxy.DNSQualityInfo:output_type -> epp.eurid.DNSQualityReply
	98,  // 138: epp.EPPProxy.DNSSECEligibilityInfo:output_type -> epp.eurid.DNSSECEligibilityReply
	99,  // 139: epp.EPPProxy.TMCHMarkCheck:output_type -> epp.tmch.MarkCheckResponse
	100, // 140: epp.EPPProxy.TMCHMarkCreate:output_type -> epp.tmch.MarkCreateResponse
	101, // 141: epp.EPPProxy.TMCHMarkInfo:output_type -> epp.tmch.MarkInfoResponse
	102, // 142: epp.EPPProxy.TMCHMarkSMDInfo:output_type -> epp.tmch.MarkSMDInfoResponse
	102, // 143: epp.EPPProxy.TMCHMarkEncodedSMDInfo:output_type -> epp.tmch.MarkSMDInfoResponse
	102, // 144: epp.EPPProxy.TMCHMarkFileInfo:output_type -> epp.tmch.MarkSMDInfoResponse
	103, // 145: epp.EPPProxy.TMCHMarkUpdate:output_type -> epp.tmch.MarkUpdateResponse
	104, // 146: epp.EPPProxy.TMCHMarkRenew:output_type -> epp.tmch.MarkRenewResponse
	105, // 147: epp.EPPProxy.TMCHMarkTransferInitiate:output_type -> epp.tmch.MarkTransferInitiateResponse
	106, // 148: epp.EPPProxy.TMCHMarkTransfer:output_type -> epp.tmch.MarkTransferResponse
	107, // 149: epp.EPPProxy.DACDomain:output_type -> epp.dac.DomainResponse
	108, // 150: epp.EPPProxy.DACUsage:output_type -> epp.dac.UsageResponse
	108, // 151: epp.EPPProxy.DACLimits:output_type -> epp.dac.UsageResponse
	95,  // [95:152] is the sub-list for method output_type
	38,  // [38:95] is the sub-list for method input_type
	38,  // [38:38] is the sub-list for extension type_name
	38,  // [38:38] is the sub-list for extension extendee
	0,   // [0:38] is the sub-list for field type_name
}

func init() { file_epp_proto_init() }
func file_epp_proto_init() {
	if File_epp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_epp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeData_ChangeOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeData_CaseID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_epp_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PollReply_DomainInfo)(nil),
		(*PollReply_DomainTransfer)(nil),
		(*PollReply_DomainCreate)(nil),
		(*PollReply_DomainRenew)(nil),
		(*PollReply_DomainPan)(nil),
		(*PollReply_ContactInfo)(nil),
		(*PollReply_ContactTransfer)(nil),
		(*PollReply_ContactPan)(nil),
		(*PollReply_NominetDomainCancel)(nil),
		(*PollReply_NominetDomainRelease)(nil),
		(*PollReply_NominetDomainRegistrarChange)(nil),
		(*PollReply_NominetHostCancel)(nil),
		(*PollReply_NominetProcess)(nil),
		(*PollReply_NominetSuspend)(nil),
		(*PollReply_NominetDomainFail)(nil),
		(*PollReply_NominetRegistrantTransfer)(nil),
		(*PollReply_TraficomTrn)(nil),
		(*PollReply_VerisignLowBalance)(nil),
		(*PollReply_MaintenanceInfo)(nil),
		(*PollReply_EuridPoll)(nil),
		(*PollReply_HostInfo)(nil),
	}
	file_epp_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*BalanceReply_FixedCreditThreshold)(nil),
		(*BalanceReply_PercentageCreditThreshold)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_epp_proto_goTypes,
		DependencyIndexes: file_epp_proto_depIdxs,
		EnumInfos:         file_epp_proto_enumTypes,
		MessageInfos:      file_epp_proto_msgTypes,
	}.Build()
	File_epp_proto = out.File
	file_epp_proto_rawDesc = nil
	file_epp_proto_goTypes = nil
	file_epp_proto_depIdxs = nil
}

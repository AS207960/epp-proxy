// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: launch/launch.proto

package launch

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusType int32

const (
	StatusType_Custom            StatusType = 0
	StatusType_PendingValidation StatusType = 1
	StatusType_Validated         StatusType = 2
	StatusType_Invalid           StatusType = 3
	StatusType_PendingAllocation StatusType = 4
	StatusType_Allocated         StatusType = 5
	StatusType_Rejected          StatusType = 6
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "Custom",
		1: "PendingValidation",
		2: "Validated",
		3: "Invalid",
		4: "PendingAllocation",
		5: "Allocated",
		6: "Rejected",
	}
	StatusType_value = map[string]int32{
		"Custom":            0,
		"PendingValidation": 1,
		"Validated":         2,
		"Invalid":           3,
		"PendingAllocation": 4,
		"Allocated":         5,
		"Rejected":          6,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_launch_launch_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_launch_launch_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{0}
}

type Phase_PhaseType int32

const (
	Phase_Open     Phase_PhaseType = 0
	Phase_Sunrise  Phase_PhaseType = 1
	Phase_Landrush Phase_PhaseType = 2
	Phase_Claims   Phase_PhaseType = 3
	Phase_Custom   Phase_PhaseType = 4
)

// Enum value maps for Phase_PhaseType.
var (
	Phase_PhaseType_name = map[int32]string{
		0: "Open",
		1: "Sunrise",
		2: "Landrush",
		3: "Claims",
		4: "Custom",
	}
	Phase_PhaseType_value = map[string]int32{
		"Open":     0,
		"Sunrise":  1,
		"Landrush": 2,
		"Claims":   3,
		"Custom":   4,
	}
)

func (x Phase_PhaseType) Enum() *Phase_PhaseType {
	p := new(Phase_PhaseType)
	*p = x
	return p
}

func (x Phase_PhaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase_PhaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_launch_launch_proto_enumTypes[1].Descriptor()
}

func (Phase_PhaseType) Type() protoreflect.EnumType {
	return &file_launch_launch_proto_enumTypes[1]
}

func (x Phase_PhaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase_PhaseType.Descriptor instead.
func (Phase_PhaseType) EnumDescriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{1, 0}
}

type LaunchCreate_CreateType int32

const (
	LaunchCreate_Registration LaunchCreate_CreateType = 0
	LaunchCreate_Application  LaunchCreate_CreateType = 1
)

// Enum value maps for LaunchCreate_CreateType.
var (
	LaunchCreate_CreateType_name = map[int32]string{
		0: "Registration",
		1: "Application",
	}
	LaunchCreate_CreateType_value = map[string]int32{
		"Registration": 0,
		"Application":  1,
	}
)

func (x LaunchCreate_CreateType) Enum() *LaunchCreate_CreateType {
	p := new(LaunchCreate_CreateType)
	*p = x
	return p
}

func (x LaunchCreate_CreateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchCreate_CreateType) Descriptor() protoreflect.EnumDescriptor {
	return file_launch_launch_proto_enumTypes[2].Descriptor()
}

func (LaunchCreate_CreateType) Type() protoreflect.EnumType {
	return &file_launch_launch_proto_enumTypes[2]
}

func (x LaunchCreate_CreateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchCreate_CreateType.Descriptor instead.
func (LaunchCreate_CreateType) EnumDescriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{7, 0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusType StatusType              `protobuf:"varint,1,opt,name=status_type,json=statusType,proto3,enum=epp.launch.StatusType" json:"status_type,omitempty"`
	StatusName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetStatusType() StatusType {
	if x != nil {
		return x.StatusType
	}
	return StatusType_Custom
}

func (x *Status) GetStatusName() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusName
	}
	return nil
}

func (x *Status) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseType Phase_PhaseType         `protobuf:"varint,1,opt,name=phase_type,json=phaseType,proto3,enum=epp.launch.Phase_PhaseType" json:"phase_type,omitempty"`
	PhaseName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phase_name,json=phaseName,proto3" json:"phase_name,omitempty"`
}

func (x *Phase) Reset() {
	*x = Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phase) ProtoMessage() {}

func (x *Phase) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phase.ProtoReflect.Descriptor instead.
func (*Phase) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{1}
}

func (x *Phase) GetPhaseType() Phase_PhaseType {
	if x != nil {
		return x.PhaseType
	}
	return Phase_Open
}

func (x *Phase) GetPhaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.PhaseName
	}
	return nil
}

type ClaimsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValidatorId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
}

func (x *ClaimsKey) Reset() {
	*x = ClaimsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsKey) ProtoMessage() {}

func (x *ClaimsKey) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimsKey.ProtoReflect.Descriptor instead.
func (*ClaimsKey) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{2}
}

func (x *ClaimsKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClaimsKey) GetValidatorId() *wrapperspb.StringValue {
	if x != nil {
		return x.ValidatorId
	}
	return nil
}

type LaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMark   bool                    `protobuf:"varint,1,opt,name=include_mark,json=includeMark,proto3" json:"include_mark,omitempty"`
	Phase         *Phase                  `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
	ApplicationId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *LaunchInfo) Reset() {
	*x = LaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchInfo) ProtoMessage() {}

func (x *LaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchInfo.ProtoReflect.Descriptor instead.
func (*LaunchInfo) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{3}
}

func (x *LaunchInfo) GetIncludeMark() bool {
	if x != nil {
		return x.IncludeMark
	}
	return false
}

func (x *LaunchInfo) GetPhase() *Phase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *LaunchInfo) GetApplicationId() *wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

type LaunchInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase         *Phase                  `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	ApplicationId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Status        *Status                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Mark          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *LaunchInfoData) Reset() {
	*x = LaunchInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchInfoData) ProtoMessage() {}

func (x *LaunchInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchInfoData.ProtoReflect.Descriptor instead.
func (*LaunchInfoData) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{4}
}

func (x *LaunchInfoData) GetPhase() *Phase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *LaunchInfoData) GetApplicationId() *wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *LaunchInfoData) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LaunchInfoData) GetMark() *wrapperspb.StringValue {
	if x != nil {
		return x.Mark
	}
	return nil
}

type CodeMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Validator *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Mark      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *CodeMark) Reset() {
	*x = CodeMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeMark) ProtoMessage() {}

func (x *CodeMark) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeMark.ProtoReflect.Descriptor instead.
func (*CodeMark) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{5}
}

func (x *CodeMark) GetCode() *wrapperspb.StringValue {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CodeMark) GetValidator() *wrapperspb.StringValue {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *CodeMark) GetMark() *wrapperspb.StringValue {
	if x != nil {
		return x.Mark
	}
	return nil
}

type Notice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeId      string                  `protobuf:"bytes,1,opt,name=notice_id,json=noticeId,proto3" json:"notice_id,omitempty"`
	Validator     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	NotAfter      *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	AcceptedAfter *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=accepted_after,json=acceptedAfter,proto3" json:"accepted_after,omitempty"`
}

func (x *Notice) Reset() {
	*x = Notice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notice) ProtoMessage() {}

func (x *Notice) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notice.ProtoReflect.Descriptor instead.
func (*Notice) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{6}
}

func (x *Notice) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *Notice) GetValidator() *wrapperspb.StringValue {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *Notice) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *Notice) GetAcceptedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptedAfter
	}
	return nil
}

type LaunchCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase                *Phase                    `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	CodeMark             []*CodeMark               `protobuf:"bytes,2,rep,name=code_mark,json=codeMark,proto3" json:"code_mark,omitempty"`
	Notices              []*Notice                 `protobuf:"bytes,5,rep,name=notices,proto3" json:"notices,omitempty"`
	SignedMark           *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=signed_mark,json=signedMark,proto3" json:"signed_mark,omitempty"`
	CreateType           LaunchCreate_CreateType   `protobuf:"varint,4,opt,name=create_type,json=createType,proto3,enum=epp.launch.LaunchCreate_CreateType" json:"create_type,omitempty"`
	CoreNicAugmentedMark []*CoreNICApplicationInfo `protobuf:"bytes,6,rep,name=core_nic_augmented_mark,json=coreNicAugmentedMark,proto3" json:"core_nic_augmented_mark,omitempty"`
}

func (x *LaunchCreate) Reset() {
	*x = LaunchCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchCreate) ProtoMessage() {}

func (x *LaunchCreate) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchCreate.ProtoReflect.Descriptor instead.
func (*LaunchCreate) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{7}
}

func (x *LaunchCreate) GetPhase() *Phase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *LaunchCreate) GetCodeMark() []*CodeMark {
	if x != nil {
		return x.CodeMark
	}
	return nil
}

func (x *LaunchCreate) GetNotices() []*Notice {
	if x != nil {
		return x.Notices
	}
	return nil
}

func (x *LaunchCreate) GetSignedMark() *wrapperspb.StringValue {
	if x != nil {
		return x.SignedMark
	}
	return nil
}

func (x *LaunchCreate) GetCreateType() LaunchCreate_CreateType {
	if x != nil {
		return x.CreateType
	}
	return LaunchCreate_Registration
}

func (x *LaunchCreate) GetCoreNicAugmentedMark() []*CoreNICApplicationInfo {
	if x != nil {
		return x.CoreNicAugmentedMark
	}
	return nil
}

type LaunchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase          *Phase                  `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Application_Id *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=application_Id,json=applicationId,proto3" json:"application_Id,omitempty"`
}

func (x *LaunchData) Reset() {
	*x = LaunchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchData) ProtoMessage() {}

func (x *LaunchData) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchData.ProtoReflect.Descriptor instead.
func (*LaunchData) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{8}
}

func (x *LaunchData) GetPhase() *Phase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *LaunchData) GetApplication_Id() *wrapperspb.StringValue {
	if x != nil {
		return x.Application_Id
	}
	return nil
}

type CoreNICApplicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info     string                  `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	InfoType *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=info_type,json=infoType,proto3" json:"info_type,omitempty"`
}

func (x *CoreNICApplicationInfo) Reset() {
	*x = CoreNICApplicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launch_launch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreNICApplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreNICApplicationInfo) ProtoMessage() {}

func (x *CoreNICApplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launch_launch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreNICApplicationInfo.ProtoReflect.Descriptor instead.
func (*CoreNICApplicationInfo) Descriptor() ([]byte, []int) {
	return file_launch_launch_proto_rawDescGZIP(), []int{9}
}

func (x *CoreNICApplicationInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CoreNICApplicationInfo) GetInfoType() *wrapperspb.StringValue {
	if x != nil {
		return x.InfoType
	}
	return nil
}

var File_launch_launch_proto protoreflect.FileDescriptor

var file_launch_launch_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x09, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x6e, 0x72, 0x69,
	0x73, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x72, 0x75, 0x73, 0x68,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x04, 0x22, 0x5e, 0x0a, 0x09, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x43, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xdd, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x03, 0x0a, 0x0c, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e,
	0x69, 0x63, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x49, 0x43, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x72,
	0x65, 0x4e, 0x69, 0x63, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x22, 0x2f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x22, 0x7a, 0x0a, 0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x67,
	0x0a, 0x16, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x49, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x7f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x06, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f,
	0x65, 0x70, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x65, 0x70, 0x70, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_launch_launch_proto_rawDescOnce sync.Once
	file_launch_launch_proto_rawDescData = file_launch_launch_proto_rawDesc
)

func file_launch_launch_proto_rawDescGZIP() []byte {
	file_launch_launch_proto_rawDescOnce.Do(func() {
		file_launch_launch_proto_rawDescData = protoimpl.X.CompressGZIP(file_launch_launch_proto_rawDescData)
	})
	return file_launch_launch_proto_rawDescData
}

var file_launch_launch_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_launch_launch_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_launch_launch_proto_goTypes = []interface{}{
	(StatusType)(0),                // 0: epp.launch.StatusType
	(Phase_PhaseType)(0),           // 1: epp.launch.Phase.PhaseType
	(LaunchCreate_CreateType)(0),   // 2: epp.launch.LaunchCreate.CreateType
	(*Status)(nil),                 // 3: epp.launch.Status
	(*Phase)(nil),                  // 4: epp.launch.Phase
	(*ClaimsKey)(nil),              // 5: epp.launch.ClaimsKey
	(*LaunchInfo)(nil),             // 6: epp.launch.LaunchInfo
	(*LaunchInfoData)(nil),         // 7: epp.launch.LaunchInfoData
	(*CodeMark)(nil),               // 8: epp.launch.CodeMark
	(*Notice)(nil),                 // 9: epp.launch.Notice
	(*LaunchCreate)(nil),           // 10: epp.launch.LaunchCreate
	(*LaunchData)(nil),             // 11: epp.launch.LaunchData
	(*CoreNICApplicationInfo)(nil), // 12: epp.launch.CoreNICApplicationInfo
	(*wrapperspb.StringValue)(nil), // 13: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 14: google.protobuf.Timestamp
}
var file_launch_launch_proto_depIdxs = []int32{
	0,  // 0: epp.launch.Status.status_type:type_name -> epp.launch.StatusType
	13, // 1: epp.launch.Status.status_name:type_name -> google.protobuf.StringValue
	13, // 2: epp.launch.Status.message:type_name -> google.protobuf.StringValue
	1,  // 3: epp.launch.Phase.phase_type:type_name -> epp.launch.Phase.PhaseType
	13, // 4: epp.launch.Phase.phase_name:type_name -> google.protobuf.StringValue
	13, // 5: epp.launch.ClaimsKey.validator_id:type_name -> google.protobuf.StringValue
	4,  // 6: epp.launch.LaunchInfo.phase:type_name -> epp.launch.Phase
	13, // 7: epp.launch.LaunchInfo.application_id:type_name -> google.protobuf.StringValue
	4,  // 8: epp.launch.LaunchInfoData.phase:type_name -> epp.launch.Phase
	13, // 9: epp.launch.LaunchInfoData.application_id:type_name -> google.protobuf.StringValue
	3,  // 10: epp.launch.LaunchInfoData.status:type_name -> epp.launch.Status
	13, // 11: epp.launch.LaunchInfoData.mark:type_name -> google.protobuf.StringValue
	13, // 12: epp.launch.CodeMark.code:type_name -> google.protobuf.StringValue
	13, // 13: epp.launch.CodeMark.validator:type_name -> google.protobuf.StringValue
	13, // 14: epp.launch.CodeMark.mark:type_name -> google.protobuf.StringValue
	13, // 15: epp.launch.Notice.validator:type_name -> google.protobuf.StringValue
	14, // 16: epp.launch.Notice.not_after:type_name -> google.protobuf.Timestamp
	14, // 17: epp.launch.Notice.accepted_after:type_name -> google.protobuf.Timestamp
	4,  // 18: epp.launch.LaunchCreate.phase:type_name -> epp.launch.Phase
	8,  // 19: epp.launch.LaunchCreate.code_mark:type_name -> epp.launch.CodeMark
	9,  // 20: epp.launch.LaunchCreate.notices:type_name -> epp.launch.Notice
	13, // 21: epp.launch.LaunchCreate.signed_mark:type_name -> google.protobuf.StringValue
	2,  // 22: epp.launch.LaunchCreate.create_type:type_name -> epp.launch.LaunchCreate.CreateType
	12, // 23: epp.launch.LaunchCreate.core_nic_augmented_mark:type_name -> epp.launch.CoreNICApplicationInfo
	4,  // 24: epp.launch.LaunchData.phase:type_name -> epp.launch.Phase
	13, // 25: epp.launch.LaunchData.application_Id:type_name -> google.protobuf.StringValue
	13, // 26: epp.launch.CoreNICApplicationInfo.info_type:type_name -> google.protobuf.StringValue
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_launch_launch_proto_init() }
func file_launch_launch_proto_init() {
	if File_launch_launch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_launch_launch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launch_launch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreNICApplicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_launch_launch_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_launch_launch_proto_goTypes,
		DependencyIndexes: file_launch_launch_proto_depIdxs,
		EnumInfos:         file_launch_launch_proto_enumTypes,
		MessageInfos:      file_launch_launch_proto_msgTypes,
	}.Build()
	File_launch_launch_proto = out.File
	file_launch_launch_proto_rawDesc = nil
	file_launch_launch_proto_goTypes = nil
	file_launch_launch_proto_depIdxs = nil
}

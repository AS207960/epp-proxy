// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: eurid/eurid.proto

package eurid

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	domain_common "github.com/as207960/epp-proxy/gen/go/epp/domain_common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContactType int32

const (
	ContactType_Registrant ContactType = 0
	ContactType_Billing    ContactType = 1
	ContactType_Tech       ContactType = 2
	ContactType_OnSite     ContactType = 3
	ContactType_Reseller   ContactType = 4
)

// Enum value maps for ContactType.
var (
	ContactType_name = map[int32]string{
		0: "Registrant",
		1: "Billing",
		2: "Tech",
		3: "OnSite",
		4: "Reseller",
	}
	ContactType_value = map[string]int32{
		"Registrant": 0,
		"Billing":    1,
		"Tech":       2,
		"OnSite":     3,
		"Reseller":   4,
	}
)

func (x ContactType) Enum() *ContactType {
	p := new(ContactType)
	*p = x
	return p
}

func (x ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_eurid_eurid_proto_enumTypes[0].Descriptor()
}

func (ContactType) Type() protoreflect.EnumType {
	return &file_eurid_eurid_proto_enumTypes[0]
}

func (x ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactType.Descriptor instead.
func (ContactType) EnumDescriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{0}
}

type IDN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ace     string `protobuf:"bytes,1,opt,name=ace,proto3" json:"ace,omitempty"`
	Unicode string `protobuf:"bytes,2,opt,name=unicode,proto3" json:"unicode,omitempty"`
}

func (x *IDN) Reset() {
	*x = IDN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDN) ProtoMessage() {}

func (x *IDN) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDN.ProtoReflect.Descriptor instead.
func (*IDN) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{0}
}

func (x *IDN) GetAce() string {
	if x != nil {
		return x.Ace
	}
	return ""
}

func (x *IDN) GetUnicode() string {
	if x != nil {
		return x.Unicode
	}
	return ""
}

type ContactExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactType        ContactType             `protobuf:"varint,1,opt,name=contact_type,json=contactType,proto3,enum=epp.eurid.ContactType" json:"contact_type,omitempty"`
	WhoisEmail         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=whois_email,json=whoisEmail,proto3" json:"whois_email,omitempty"`
	Vat                *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vat,proto3" json:"vat,omitempty"`
	CitizenshipCountry *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=citizenship_country,json=citizenshipCountry,proto3" json:"citizenship_country,omitempty"`
	Language           string                  `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ContactExtension) Reset() {
	*x = ContactExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactExtension) ProtoMessage() {}

func (x *ContactExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactExtension.ProtoReflect.Descriptor instead.
func (*ContactExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{1}
}

func (x *ContactExtension) GetContactType() ContactType {
	if x != nil {
		return x.ContactType
	}
	return ContactType_Registrant
}

func (x *ContactExtension) GetWhoisEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.WhoisEmail
	}
	return nil
}

func (x *ContactExtension) GetVat() *wrapperspb.StringValue {
	if x != nil {
		return x.Vat
	}
	return nil
}

func (x *ContactExtension) GetCitizenshipCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.CitizenshipCountry
	}
	return nil
}

func (x *ContactExtension) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ContactUpdateExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewWhoisEmail         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=new_whois_email,json=newWhoisEmail,proto3" json:"new_whois_email,omitempty"`
	NewVat                *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=new_vat,json=newVat,proto3" json:"new_vat,omitempty"`
	NewCitizenshipCountry *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=new_citizenship_country,json=newCitizenshipCountry,proto3" json:"new_citizenship_country,omitempty"`
	NewLanguage           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=new_language,json=newLanguage,proto3" json:"new_language,omitempty"`
}

func (x *ContactUpdateExtension) Reset() {
	*x = ContactUpdateExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUpdateExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUpdateExtension) ProtoMessage() {}

func (x *ContactUpdateExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUpdateExtension.ProtoReflect.Descriptor instead.
func (*ContactUpdateExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{2}
}

func (x *ContactUpdateExtension) GetNewWhoisEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.NewWhoisEmail
	}
	return nil
}

func (x *ContactUpdateExtension) GetNewVat() *wrapperspb.StringValue {
	if x != nil {
		return x.NewVat
	}
	return nil
}

func (x *ContactUpdateExtension) GetNewCitizenshipCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.NewCitizenshipCountry
	}
	return nil
}

func (x *ContactUpdateExtension) GetNewLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.NewLanguage
	}
	return nil
}

type DomainCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableDate *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=available_date,json=availableDate,proto3" json:"available_date,omitempty"`
	Status        []domain_common.DomainStatus `protobuf:"varint,2,rep,packed,name=status,proto3,enum=epp.domain_common.DomainStatus" json:"status,omitempty"`
}

func (x *DomainCheckData) Reset() {
	*x = DomainCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCheckData) ProtoMessage() {}

func (x *DomainCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCheckData.ProtoReflect.Descriptor instead.
func (*DomainCheckData) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{3}
}

func (x *DomainCheckData) GetAvailableDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailableDate
	}
	return nil
}

func (x *DomainCheckData) GetStatus() []domain_common.DomainStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnHold                         bool                    `protobuf:"varint,1,opt,name=on_hold,json=onHold,proto3" json:"on_hold,omitempty"`
	Quarantined                    bool                    `protobuf:"varint,2,opt,name=quarantined,proto3" json:"quarantined,omitempty"`
	Suspended                      bool                    `protobuf:"varint,3,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Delayed                        bool                    `protobuf:"varint,4,opt,name=delayed,proto3" json:"delayed,omitempty"`
	Seized                         bool                    `protobuf:"varint,5,opt,name=seized,proto3" json:"seized,omitempty"`
	DeletionDate                   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
	OnSite                         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=on_site,json=onSite,proto3" json:"on_site,omitempty"`
	Reseller                       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reseller,proto3" json:"reseller,omitempty"`
	MaxExtensionPeriod             uint32                  `protobuf:"varint,9,opt,name=max_extension_period,json=maxExtensionPeriod,proto3" json:"max_extension_period,omitempty"`
	RegistrantCountry              string                  `protobuf:"bytes,10,opt,name=registrant_country,json=registrantCountry,proto3" json:"registrant_country,omitempty"`
	RegistrantCountryOfCitizenship *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=registrant_country_of_citizenship,json=registrantCountryOfCitizenship,proto3" json:"registrant_country_of_citizenship,omitempty"`
	AuthInfoValidUntil             *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=auth_info_valid_until,json=authInfoValidUntil,proto3" json:"auth_info_valid_until,omitempty"`
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{4}
}

func (x *DomainInfo) GetOnHold() bool {
	if x != nil {
		return x.OnHold
	}
	return false
}

func (x *DomainInfo) GetQuarantined() bool {
	if x != nil {
		return x.Quarantined
	}
	return false
}

func (x *DomainInfo) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

func (x *DomainInfo) GetDelayed() bool {
	if x != nil {
		return x.Delayed
	}
	return false
}

func (x *DomainInfo) GetSeized() bool {
	if x != nil {
		return x.Seized
	}
	return false
}

func (x *DomainInfo) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

func (x *DomainInfo) GetOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.OnSite
	}
	return nil
}

func (x *DomainInfo) GetReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.Reseller
	}
	return nil
}

func (x *DomainInfo) GetMaxExtensionPeriod() uint32 {
	if x != nil {
		return x.MaxExtensionPeriod
	}
	return 0
}

func (x *DomainInfo) GetRegistrantCountry() string {
	if x != nil {
		return x.RegistrantCountry
	}
	return ""
}

func (x *DomainInfo) GetRegistrantCountryOfCitizenship() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistrantCountryOfCitizenship
	}
	return nil
}

func (x *DomainInfo) GetAuthInfoValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.AuthInfoValidUntil
	}
	return nil
}

type DomainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthInfo:
	//	*DomainInfoRequest_Request
	//	*DomainInfoRequest_Cancel
	AuthInfo isDomainInfoRequest_AuthInfo `protobuf_oneof:"auth_info"`
}

func (x *DomainInfoRequest) Reset() {
	*x = DomainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfoRequest) ProtoMessage() {}

func (x *DomainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfoRequest.ProtoReflect.Descriptor instead.
func (*DomainInfoRequest) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{5}
}

func (m *DomainInfoRequest) GetAuthInfo() isDomainInfoRequest_AuthInfo {
	if m != nil {
		return m.AuthInfo
	}
	return nil
}

func (x *DomainInfoRequest) GetRequest() bool {
	if x, ok := x.GetAuthInfo().(*DomainInfoRequest_Request); ok {
		return x.Request
	}
	return false
}

func (x *DomainInfoRequest) GetCancel() bool {
	if x, ok := x.GetAuthInfo().(*DomainInfoRequest_Cancel); ok {
		return x.Cancel
	}
	return false
}

type isDomainInfoRequest_AuthInfo interface {
	isDomainInfoRequest_AuthInfo()
}

type DomainInfoRequest_Request struct {
	Request bool `protobuf:"varint,1,opt,name=request,proto3,oneof"`
}

type DomainInfoRequest_Cancel struct {
	Cancel bool `protobuf:"varint,2,opt,name=cancel,proto3,oneof"`
}

func (*DomainInfoRequest_Request) isDomainInfoRequest_AuthInfo() {}

func (*DomainInfoRequest_Cancel) isDomainInfoRequest_AuthInfo() {}

type DomainTransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnHold      bool                    `protobuf:"varint,1,opt,name=on_hold,json=onHold,proto3" json:"on_hold,omitempty"`
	Quarantined bool                    `protobuf:"varint,2,opt,name=quarantined,proto3" json:"quarantined,omitempty"`
	Delayed     bool                    `protobuf:"varint,3,opt,name=delayed,proto3" json:"delayed,omitempty"`
	Reason      string                  `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Registrant  string                  `protobuf:"bytes,5,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Billing     string                  `protobuf:"bytes,6,opt,name=billing,proto3" json:"billing,omitempty"`
	OnSite      *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=on_site,json=onSite,proto3" json:"on_site,omitempty"`
	Technical   *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=technical,proto3" json:"technical,omitempty"`
	Reseller    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=reseller,proto3" json:"reseller,omitempty"`
}

func (x *DomainTransferInfo) Reset() {
	*x = DomainTransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferInfo) ProtoMessage() {}

func (x *DomainTransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferInfo.ProtoReflect.Descriptor instead.
func (*DomainTransferInfo) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{6}
}

func (x *DomainTransferInfo) GetOnHold() bool {
	if x != nil {
		return x.OnHold
	}
	return false
}

func (x *DomainTransferInfo) GetQuarantined() bool {
	if x != nil {
		return x.Quarantined
	}
	return false
}

func (x *DomainTransferInfo) GetDelayed() bool {
	if x != nil {
		return x.Delayed
	}
	return false
}

func (x *DomainTransferInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DomainTransferInfo) GetRegistrant() string {
	if x != nil {
		return x.Registrant
	}
	return ""
}

func (x *DomainTransferInfo) GetBilling() string {
	if x != nil {
		return x.Billing
	}
	return ""
}

func (x *DomainTransferInfo) GetOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.OnSite
	}
	return nil
}

func (x *DomainTransferInfo) GetTechnical() *wrapperspb.StringValue {
	if x != nil {
		return x.Technical
	}
	return nil
}

func (x *DomainTransferInfo) GetReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.Reseller
	}
	return nil
}

type DomainRenewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedDeletion bool `protobuf:"varint,1,opt,name=removed_deletion,json=removedDeletion,proto3" json:"removed_deletion,omitempty"`
}

func (x *DomainRenewInfo) Reset() {
	*x = DomainRenewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainRenewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainRenewInfo) ProtoMessage() {}

func (x *DomainRenewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainRenewInfo.ProtoReflect.Descriptor instead.
func (*DomainRenewInfo) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{7}
}

func (x *DomainRenewInfo) GetRemovedDeletion() bool {
	if x != nil {
		return x.RemovedDeletion
	}
	return false
}

type DomainCreateExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnSite   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=on_site,json=onSite,proto3" json:"on_site,omitempty"`
	Reseller *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reseller,proto3" json:"reseller,omitempty"`
}

func (x *DomainCreateExtension) Reset() {
	*x = DomainCreateExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCreateExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateExtension) ProtoMessage() {}

func (x *DomainCreateExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateExtension.ProtoReflect.Descriptor instead.
func (*DomainCreateExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{8}
}

func (x *DomainCreateExtension) GetOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.OnSite
	}
	return nil
}

func (x *DomainCreateExtension) GetReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.Reseller
	}
	return nil
}

type DomainUpdateExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddOnSite      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=add_on_site,json=addOnSite,proto3" json:"add_on_site,omitempty"`
	AddReseller    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=add_reseller,json=addReseller,proto3" json:"add_reseller,omitempty"`
	RemoveOnSite   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=remove_on_site,json=removeOnSite,proto3" json:"remove_on_site,omitempty"`
	RemoveReseller *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=remove_reseller,json=removeReseller,proto3" json:"remove_reseller,omitempty"`
}

func (x *DomainUpdateExtension) Reset() {
	*x = DomainUpdateExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainUpdateExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainUpdateExtension) ProtoMessage() {}

func (x *DomainUpdateExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainUpdateExtension.ProtoReflect.Descriptor instead.
func (*DomainUpdateExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{9}
}

func (x *DomainUpdateExtension) GetAddOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.AddOnSite
	}
	return nil
}

func (x *DomainUpdateExtension) GetAddReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.AddReseller
	}
	return nil
}

func (x *DomainUpdateExtension) GetRemoveOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoveOnSite
	}
	return nil
}

func (x *DomainUpdateExtension) GetRemoveReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoveReseller
	}
	return nil
}

type DomainDeleteExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Delete:
	//	*DomainDeleteExtension_Schedule
	//	*DomainDeleteExtension_Cancel
	Delete isDomainDeleteExtension_Delete `protobuf_oneof:"delete"`
}

func (x *DomainDeleteExtension) Reset() {
	*x = DomainDeleteExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDeleteExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDeleteExtension) ProtoMessage() {}

func (x *DomainDeleteExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDeleteExtension.ProtoReflect.Descriptor instead.
func (*DomainDeleteExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{10}
}

func (m *DomainDeleteExtension) GetDelete() isDomainDeleteExtension_Delete {
	if m != nil {
		return m.Delete
	}
	return nil
}

func (x *DomainDeleteExtension) GetSchedule() *timestamppb.Timestamp {
	if x, ok := x.GetDelete().(*DomainDeleteExtension_Schedule); ok {
		return x.Schedule
	}
	return nil
}

func (x *DomainDeleteExtension) GetCancel() bool {
	if x, ok := x.GetDelete().(*DomainDeleteExtension_Cancel); ok {
		return x.Cancel
	}
	return false
}

type isDomainDeleteExtension_Delete interface {
	isDomainDeleteExtension_Delete()
}

type DomainDeleteExtension_Schedule struct {
	Schedule *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=schedule,proto3,oneof"`
}

type DomainDeleteExtension_Cancel struct {
	Cancel bool `protobuf:"varint,2,opt,name=cancel,proto3,oneof"`
}

func (*DomainDeleteExtension_Schedule) isDomainDeleteExtension_Delete() {}

func (*DomainDeleteExtension_Cancel) isDomainDeleteExtension_Delete() {}

type DomainTransferExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrant string                  `protobuf:"bytes,1,opt,name=registrant,proto3" json:"registrant,omitempty"`
	Billing    string                  `protobuf:"bytes,2,opt,name=billing,proto3" json:"billing,omitempty"`
	Technical  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=technical,proto3" json:"technical,omitempty"`
	Reseller   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=reseller,proto3" json:"reseller,omitempty"`
	OnSite     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=on_site,json=onSite,proto3" json:"on_site,omitempty"`
}

func (x *DomainTransferExtension) Reset() {
	*x = DomainTransferExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTransferExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTransferExtension) ProtoMessage() {}

func (x *DomainTransferExtension) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTransferExtension.ProtoReflect.Descriptor instead.
func (*DomainTransferExtension) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{11}
}

func (x *DomainTransferExtension) GetRegistrant() string {
	if x != nil {
		return x.Registrant
	}
	return ""
}

func (x *DomainTransferExtension) GetBilling() string {
	if x != nil {
		return x.Billing
	}
	return ""
}

func (x *DomainTransferExtension) GetTechnical() *wrapperspb.StringValue {
	if x != nil {
		return x.Technical
	}
	return nil
}

func (x *DomainTransferExtension) GetReseller() *wrapperspb.StringValue {
	if x != nil {
		return x.Reseller
	}
	return nil
}

func (x *DomainTransferExtension) GetOnSite() *wrapperspb.StringValue {
	if x != nil {
		return x.OnSite
	}
	return nil
}

type HitPointsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HitPoints    uint64                  `protobuf:"varint,1,opt,name=hit_points,json=hitPoints,proto3" json:"hit_points,omitempty"`
	MaxHitPoints uint64                  `protobuf:"varint,2,opt,name=max_hit_points,json=maxHitPoints,proto3" json:"max_hit_points,omitempty"`
	BlockedUntil *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=blocked_until,json=blockedUntil,proto3" json:"blocked_until,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *HitPointsReply) Reset() {
	*x = HitPointsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitPointsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitPointsReply) ProtoMessage() {}

func (x *HitPointsReply) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitPointsReply.ProtoReflect.Descriptor instead.
func (*HitPointsReply) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{12}
}

func (x *HitPointsReply) GetHitPoints() uint64 {
	if x != nil {
		return x.HitPoints
	}
	return 0
}

func (x *HitPointsReply) GetMaxHitPoints() uint64 {
	if x != nil {
		return x.MaxHitPoints
	}
	return 0
}

func (x *HitPointsReply) GetBlockedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedUntil
	}
	return nil
}

func (x *HitPointsReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type RegistrationLimitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthlyRegistrations    uint64                  `protobuf:"varint,1,opt,name=monthly_registrations,json=monthlyRegistrations,proto3" json:"monthly_registrations,omitempty"`
	MaxMonthlyRegistrations *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max_monthly_registrations,json=maxMonthlyRegistrations,proto3" json:"max_monthly_registrations,omitempty"`
	LimitedUntil            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=limited_until,json=limitedUntil,proto3" json:"limited_until,omitempty"`
	CmdResp                 *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
}

func (x *RegistrationLimitReply) Reset() {
	*x = RegistrationLimitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationLimitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationLimitReply) ProtoMessage() {}

func (x *RegistrationLimitReply) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationLimitReply.ProtoReflect.Descriptor instead.
func (*RegistrationLimitReply) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{13}
}

func (x *RegistrationLimitReply) GetMonthlyRegistrations() uint64 {
	if x != nil {
		return x.MonthlyRegistrations
	}
	return 0
}

func (x *RegistrationLimitReply) GetMaxMonthlyRegistrations() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxMonthlyRegistrations
	}
	return nil
}

func (x *RegistrationLimitReply) GetLimitedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.LimitedUntil
	}
	return nil
}

func (x *RegistrationLimitReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

type DNSSECEligibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DNSSECEligibilityRequest) Reset() {
	*x = DNSSECEligibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSSECEligibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSSECEligibilityRequest) ProtoMessage() {}

func (x *DNSSECEligibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSSECEligibilityRequest.ProtoReflect.Descriptor instead.
func (*DNSSECEligibilityRequest) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{14}
}

func (x *DNSSECEligibilityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSSECEligibilityRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DNSSECEligibilityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eligible     bool                    `protobuf:"varint,1,opt,name=eligible,proto3" json:"eligible,omitempty"`
	Message      string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code         uint32                  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,4,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	RegistryName string                  `protobuf:"bytes,5,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DNSSECEligibilityReply) Reset() {
	*x = DNSSECEligibilityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSSECEligibilityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSSECEligibilityReply) ProtoMessage() {}

func (x *DNSSECEligibilityReply) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSSECEligibilityReply.ProtoReflect.Descriptor instead.
func (*DNSSECEligibilityReply) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{15}
}

func (x *DNSSECEligibilityReply) GetEligible() bool {
	if x != nil {
		return x.Eligible
	}
	return false
}

func (x *DNSSECEligibilityReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DNSSECEligibilityReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DNSSECEligibilityReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DNSSECEligibilityReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type DNSQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DNSQualityRequest) Reset() {
	*x = DNSQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSQualityRequest) ProtoMessage() {}

func (x *DNSQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSQualityRequest.ProtoReflect.Descriptor instead.
func (*DNSQualityRequest) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{16}
}

func (x *DNSQualityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSQualityRequest) GetRegistryName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistryName
	}
	return nil
}

type DNSQualityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score        string                  `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	CheckTime    *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=check_time,json=checkTime,proto3" json:"check_time,omitempty"`
	CmdResp      *common.CommandResponse `protobuf:"bytes,3,opt,name=cmd_resp,json=cmdResp,proto3" json:"cmd_resp,omitempty"`
	RegistryName string                  `protobuf:"bytes,4,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
}

func (x *DNSQualityReply) Reset() {
	*x = DNSQualityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSQualityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSQualityReply) ProtoMessage() {}

func (x *DNSQualityReply) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSQualityReply.ProtoReflect.Descriptor instead.
func (*DNSQualityReply) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{17}
}

func (x *DNSQualityReply) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *DNSQualityReply) GetCheckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckTime
	}
	return nil
}

func (x *DNSQualityReply) GetCmdResp() *common.CommandResponse {
	if x != nil {
		return x.CmdResp
	}
	return nil
}

func (x *DNSQualityReply) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type PollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context       string                  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	ObjectType    string                  `protobuf:"bytes,2,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Object        string                  `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	ObjectUnicode *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=object_unicode,json=objectUnicode,proto3" json:"object_unicode,omitempty"`
	Action        string                  `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Code          uint32                  `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
	Detail        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty"`
	Registrar     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=registrar,proto3" json:"registrar,omitempty"`
}

func (x *PollReply) Reset() {
	*x = PollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eurid_eurid_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollReply) ProtoMessage() {}

func (x *PollReply) ProtoReflect() protoreflect.Message {
	mi := &file_eurid_eurid_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollReply.ProtoReflect.Descriptor instead.
func (*PollReply) Descriptor() ([]byte, []int) {
	return file_eurid_eurid_proto_rawDescGZIP(), []int{18}
}

func (x *PollReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *PollReply) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *PollReply) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *PollReply) GetObjectUnicode() *wrapperspb.StringValue {
	if x != nil {
		return x.ObjectUnicode
	}
	return nil
}

func (x *PollReply) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PollReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PollReply) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *PollReply) GetRegistrar() *wrapperspb.StringValue {
	if x != nil {
		return x.Registrar
	}
	return nil
}

var File_eurid_eurid_proto protoreflect.FileDescriptor

var file_eurid_eurid_proto_rawDesc = []byte{
	0x0a, 0x11, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2f, 0x65, 0x75, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69, 0x64, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x03, 0x49, 0x44, 0x4e, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x65, 0x75, 0x72, 0x69,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x68,
	0x6f, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77,
	0x68, 0x6f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x57, 0x68, 0x6f, 0x69, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x17,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6e, 0x65, 0x77,
	0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x67, 0x0a, 0x21, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x43, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xe8, 0x02, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x0f, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x80, 0x02, 0x0a, 0x17, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x53, 0x69,
	0x74, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x69, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x48, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33,
	0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x71, 0x0a, 0x18, 0x44, 0x4e, 0x53, 0x53, 0x45, 0x43,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x44, 0x4e,
	0x53, 0x53, 0x45, 0x43, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x44,
	0x4e, 0x53, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x2a, 0x4e, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x63,
	0x68, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x04, 0x42, 0x30, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30,
	0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70, 0x70, 0x2f, 0x65, 0x75, 0x72, 0x69, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eurid_eurid_proto_rawDescOnce sync.Once
	file_eurid_eurid_proto_rawDescData = file_eurid_eurid_proto_rawDesc
)

func file_eurid_eurid_proto_rawDescGZIP() []byte {
	file_eurid_eurid_proto_rawDescOnce.Do(func() {
		file_eurid_eurid_proto_rawDescData = protoimpl.X.CompressGZIP(file_eurid_eurid_proto_rawDescData)
	})
	return file_eurid_eurid_proto_rawDescData
}

var file_eurid_eurid_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eurid_eurid_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_eurid_eurid_proto_goTypes = []interface{}{
	(ContactType)(0),                 // 0: epp.eurid.ContactType
	(*IDN)(nil),                      // 1: epp.eurid.IDN
	(*ContactExtension)(nil),         // 2: epp.eurid.ContactExtension
	(*ContactUpdateExtension)(nil),   // 3: epp.eurid.ContactUpdateExtension
	(*DomainCheckData)(nil),          // 4: epp.eurid.DomainCheckData
	(*DomainInfo)(nil),               // 5: epp.eurid.DomainInfo
	(*DomainInfoRequest)(nil),        // 6: epp.eurid.DomainInfoRequest
	(*DomainTransferInfo)(nil),       // 7: epp.eurid.DomainTransferInfo
	(*DomainRenewInfo)(nil),          // 8: epp.eurid.DomainRenewInfo
	(*DomainCreateExtension)(nil),    // 9: epp.eurid.DomainCreateExtension
	(*DomainUpdateExtension)(nil),    // 10: epp.eurid.DomainUpdateExtension
	(*DomainDeleteExtension)(nil),    // 11: epp.eurid.DomainDeleteExtension
	(*DomainTransferExtension)(nil),  // 12: epp.eurid.DomainTransferExtension
	(*HitPointsReply)(nil),           // 13: epp.eurid.HitPointsReply
	(*RegistrationLimitReply)(nil),   // 14: epp.eurid.RegistrationLimitReply
	(*DNSSECEligibilityRequest)(nil), // 15: epp.eurid.DNSSECEligibilityRequest
	(*DNSSECEligibilityReply)(nil),   // 16: epp.eurid.DNSSECEligibilityReply
	(*DNSQualityRequest)(nil),        // 17: epp.eurid.DNSQualityRequest
	(*DNSQualityReply)(nil),          // 18: epp.eurid.DNSQualityReply
	(*PollReply)(nil),                // 19: epp.eurid.PollReply
	(*wrapperspb.StringValue)(nil),   // 20: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
	(domain_common.DomainStatus)(0),  // 22: epp.domain_common.DomainStatus
	(*common.CommandResponse)(nil),   // 23: epp.common.CommandResponse
	(*wrapperspb.UInt64Value)(nil),   // 24: google.protobuf.UInt64Value
}
var file_eurid_eurid_proto_depIdxs = []int32{
	0,  // 0: epp.eurid.ContactExtension.contact_type:type_name -> epp.eurid.ContactType
	20, // 1: epp.eurid.ContactExtension.whois_email:type_name -> google.protobuf.StringValue
	20, // 2: epp.eurid.ContactExtension.vat:type_name -> google.protobuf.StringValue
	20, // 3: epp.eurid.ContactExtension.citizenship_country:type_name -> google.protobuf.StringValue
	20, // 4: epp.eurid.ContactUpdateExtension.new_whois_email:type_name -> google.protobuf.StringValue
	20, // 5: epp.eurid.ContactUpdateExtension.new_vat:type_name -> google.protobuf.StringValue
	20, // 6: epp.eurid.ContactUpdateExtension.new_citizenship_country:type_name -> google.protobuf.StringValue
	20, // 7: epp.eurid.ContactUpdateExtension.new_language:type_name -> google.protobuf.StringValue
	21, // 8: epp.eurid.DomainCheckData.available_date:type_name -> google.protobuf.Timestamp
	22, // 9: epp.eurid.DomainCheckData.status:type_name -> epp.domain_common.DomainStatus
	21, // 10: epp.eurid.DomainInfo.deletion_date:type_name -> google.protobuf.Timestamp
	20, // 11: epp.eurid.DomainInfo.on_site:type_name -> google.protobuf.StringValue
	20, // 12: epp.eurid.DomainInfo.reseller:type_name -> google.protobuf.StringValue
	20, // 13: epp.eurid.DomainInfo.registrant_country_of_citizenship:type_name -> google.protobuf.StringValue
	21, // 14: epp.eurid.DomainInfo.auth_info_valid_until:type_name -> google.protobuf.Timestamp
	20, // 15: epp.eurid.DomainTransferInfo.on_site:type_name -> google.protobuf.StringValue
	20, // 16: epp.eurid.DomainTransferInfo.technical:type_name -> google.protobuf.StringValue
	20, // 17: epp.eurid.DomainTransferInfo.reseller:type_name -> google.protobuf.StringValue
	20, // 18: epp.eurid.DomainCreateExtension.on_site:type_name -> google.protobuf.StringValue
	20, // 19: epp.eurid.DomainCreateExtension.reseller:type_name -> google.protobuf.StringValue
	20, // 20: epp.eurid.DomainUpdateExtension.add_on_site:type_name -> google.protobuf.StringValue
	20, // 21: epp.eurid.DomainUpdateExtension.add_reseller:type_name -> google.protobuf.StringValue
	20, // 22: epp.eurid.DomainUpdateExtension.remove_on_site:type_name -> google.protobuf.StringValue
	20, // 23: epp.eurid.DomainUpdateExtension.remove_reseller:type_name -> google.protobuf.StringValue
	21, // 24: epp.eurid.DomainDeleteExtension.schedule:type_name -> google.protobuf.Timestamp
	20, // 25: epp.eurid.DomainTransferExtension.technical:type_name -> google.protobuf.StringValue
	20, // 26: epp.eurid.DomainTransferExtension.reseller:type_name -> google.protobuf.StringValue
	20, // 27: epp.eurid.DomainTransferExtension.on_site:type_name -> google.protobuf.StringValue
	21, // 28: epp.eurid.HitPointsReply.blocked_until:type_name -> google.protobuf.Timestamp
	23, // 29: epp.eurid.HitPointsReply.cmd_resp:type_name -> epp.common.CommandResponse
	24, // 30: epp.eurid.RegistrationLimitReply.max_monthly_registrations:type_name -> google.protobuf.UInt64Value
	21, // 31: epp.eurid.RegistrationLimitReply.limited_until:type_name -> google.protobuf.Timestamp
	23, // 32: epp.eurid.RegistrationLimitReply.cmd_resp:type_name -> epp.common.CommandResponse
	20, // 33: epp.eurid.DNSSECEligibilityRequest.registry_name:type_name -> google.protobuf.StringValue
	23, // 34: epp.eurid.DNSSECEligibilityReply.cmd_resp:type_name -> epp.common.CommandResponse
	20, // 35: epp.eurid.DNSQualityRequest.registry_name:type_name -> google.protobuf.StringValue
	21, // 36: epp.eurid.DNSQualityReply.check_time:type_name -> google.protobuf.Timestamp
	23, // 37: epp.eurid.DNSQualityReply.cmd_resp:type_name -> epp.common.CommandResponse
	20, // 38: epp.eurid.PollReply.object_unicode:type_name -> google.protobuf.StringValue
	20, // 39: epp.eurid.PollReply.detail:type_name -> google.protobuf.StringValue
	20, // 40: epp.eurid.PollReply.registrar:type_name -> google.protobuf.StringValue
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_eurid_eurid_proto_init() }
func file_eurid_eurid_proto_init() {
	if File_eurid_eurid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eurid_eurid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUpdateExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainRenewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCreateExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainUpdateExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDeleteExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTransferExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitPointsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationLimitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSSECEligibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSSECEligibilityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSQualityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eurid_eurid_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eurid_eurid_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DomainInfoRequest_Request)(nil),
		(*DomainInfoRequest_Cancel)(nil),
	}
	file_eurid_eurid_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*DomainDeleteExtension_Schedule)(nil),
		(*DomainDeleteExtension_Cancel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eurid_eurid_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eurid_eurid_proto_goTypes,
		DependencyIndexes: file_eurid_eurid_proto_depIdxs,
		EnumInfos:         file_eurid_eurid_proto_enumTypes,
		MessageInfos:      file_eurid_eurid_proto_msgTypes,
	}.Build()
	File_eurid_eurid_proto = out.File
	file_eurid_eurid_proto_rawDesc = nil
	file_eurid_eurid_proto_goTypes = nil
	file_eurid_eurid_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: fee/fee.proto

package fee

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command int32

const (
	Command_Create   Command = 0
	Command_Renew    Command = 1
	Command_Transfer Command = 2
	Command_Delete   Command = 4
	Command_Restore  Command = 3
	Command_Update   Command = 5
	Command_Check    Command = 6
	Command_Info     Command = 7
	Command_Custom   Command = 8
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0: "Create",
		1: "Renew",
		2: "Transfer",
		4: "Delete",
		3: "Restore",
		5: "Update",
		6: "Check",
		7: "Info",
		8: "Custom",
	}
	Command_value = map[string]int32{
		"Create":   0,
		"Renew":    1,
		"Transfer": 2,
		"Delete":   4,
		"Restore":  3,
		"Update":   5,
		"Check":    6,
		"Info":     7,
		"Custom":   8,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_fee_fee_proto_enumTypes[0].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_fee_fee_proto_enumTypes[0]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{0}
}

type Applied int32

const (
	Applied_Immediate   Applied = 0
	Applied_Delayed     Applied = 1
	Applied_Unspecified Applied = 2
)

// Enum value maps for Applied.
var (
	Applied_name = map[int32]string{
		0: "Immediate",
		1: "Delayed",
		2: "Unspecified",
	}
	Applied_value = map[string]int32{
		"Immediate":   0,
		"Delayed":     1,
		"Unspecified": 2,
	}
)

func (x Applied) Enum() *Applied {
	p := new(Applied)
	*p = x
	return p
}

func (x Applied) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Applied) Descriptor() protoreflect.EnumDescriptor {
	return file_fee_fee_proto_enumTypes[1].Descriptor()
}

func (Applied) Type() protoreflect.EnumType {
	return &file_fee_fee_proto_enumTypes[1]
}

func (x Applied) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Applied.Descriptor instead.
func (Applied) EnumDescriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{1}
}

type DonutsFeeType_FeeTypes int32

const (
	DonutsFeeType_Custom DonutsFeeType_FeeTypes = 0
	DonutsFeeType_Fee    DonutsFeeType_FeeTypes = 1
	DonutsFeeType_Price  DonutsFeeType_FeeTypes = 2
)

// Enum value maps for DonutsFeeType_FeeTypes.
var (
	DonutsFeeType_FeeTypes_name = map[int32]string{
		0: "Custom",
		1: "Fee",
		2: "Price",
	}
	DonutsFeeType_FeeTypes_value = map[string]int32{
		"Custom": 0,
		"Fee":    1,
		"Price":  2,
	}
)

func (x DonutsFeeType_FeeTypes) Enum() *DonutsFeeType_FeeTypes {
	p := new(DonutsFeeType_FeeTypes)
	*p = x
	return p
}

func (x DonutsFeeType_FeeTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DonutsFeeType_FeeTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_fee_fee_proto_enumTypes[2].Descriptor()
}

func (DonutsFeeType_FeeTypes) Type() protoreflect.EnumType {
	return &file_fee_fee_proto_enumTypes[2]
}

func (x DonutsFeeType_FeeTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DonutsFeeType_FeeTypes.Descriptor instead.
func (DonutsFeeType_FeeTypes) EnumDescriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{9, 0}
}

type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Refundable  *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=refundable,proto3" json:"refundable,omitempty"`
	GracePeriod *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	Applied     Applied                 `protobuf:"varint,5,opt,name=applied,proto3,enum=epp.fee.Applied" json:"applied,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Fee) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Fee) GetRefundable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Refundable
	}
	return nil
}

func (x *Fee) GetGracePeriod() *wrapperspb.StringValue {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *Fee) GetApplied() Applied {
	if x != nil {
		return x.Applied
	}
	return Applied_Immediate
}

type Credit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Credit) Reset() {
	*x = Credit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credit) ProtoMessage() {}

func (x *Credit) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credit.ProtoReflect.Descriptor instead.
func (*Credit) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{1}
}

func (x *Credit) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Credit) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type FeeCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Commands []*FeeCommand           `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *FeeCheck) Reset() {
	*x = FeeCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeCheck) ProtoMessage() {}

func (x *FeeCheck) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeCheck.ProtoReflect.Descriptor instead.
func (*FeeCheck) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{2}
}

func (x *FeeCheck) GetCurrency() *wrapperspb.StringValue {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *FeeCheck) GetCommands() []*FeeCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type FeeAgreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Fees     []*Fee                  `protobuf:"bytes,2,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (x *FeeAgreement) Reset() {
	*x = FeeAgreement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeAgreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeAgreement) ProtoMessage() {}

func (x *FeeAgreement) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeAgreement.ProtoReflect.Descriptor instead.
func (*FeeAgreement) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{3}
}

func (x *FeeAgreement) GetCurrency() *wrapperspb.StringValue {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *FeeAgreement) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

type FeeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command Command        `protobuf:"varint,1,opt,name=command,proto3,enum=epp.fee.Command" json:"command,omitempty"`
	Period  *common.Period `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *FeeCommand) Reset() {
	*x = FeeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeCommand) ProtoMessage() {}

func (x *FeeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeCommand.ProtoReflect.Descriptor instead.
func (*FeeCommand) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{4}
}

func (x *FeeCommand) GetCommand() Command {
	if x != nil {
		return x.Command
	}
	return Command_Create
}

func (x *FeeCommand) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

type FeeCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool                       `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Commands  []*FeeCheckData_FeeCommand `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	Reason    *wrapperspb.StringValue    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FeeCheckData) Reset() {
	*x = FeeCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeCheckData) ProtoMessage() {}

func (x *FeeCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeCheckData.ProtoReflect.Descriptor instead.
func (*FeeCheckData) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{5}
}

func (x *FeeCheckData) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *FeeCheckData) GetCommands() []*FeeCheckData_FeeCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *FeeCheckData) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type FeeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency    string                  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Period      *common.Period          `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Fees        []*Fee                  `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees,omitempty"`
	Credits     []*Credit               `protobuf:"bytes,4,rep,name=credits,proto3" json:"credits,omitempty"`
	Balance     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	CreditLimit *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=credit_limit,json=creditLimit,proto3" json:"credit_limit,omitempty"`
}

func (x *FeeData) Reset() {
	*x = FeeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeData) ProtoMessage() {}

func (x *FeeData) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeData.ProtoReflect.Descriptor instead.
func (*FeeData) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{6}
}

func (x *FeeData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FeeData) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *FeeData) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *FeeData) GetCredits() []*Credit {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *FeeData) GetBalance() *wrapperspb.StringValue {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *FeeData) GetCreditLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.CreditLimit
	}
	return nil
}

type DonutsCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Name  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DonutsCategory) Reset() {
	*x = DonutsCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonutsCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonutsCategory) ProtoMessage() {}

func (x *DonutsCategory) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonutsCategory.ProtoReflect.Descriptor instead.
func (*DonutsCategory) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{7}
}

func (x *DonutsCategory) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DonutsCategory) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type DonutsAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Name    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Command Command                 `protobuf:"varint,3,opt,name=command,proto3,enum=epp.fee.Command" json:"command,omitempty"`
}

func (x *DonutsAmount) Reset() {
	*x = DonutsAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonutsAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonutsAmount) ProtoMessage() {}

func (x *DonutsAmount) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonutsAmount.ProtoReflect.Descriptor instead.
func (*DonutsAmount) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{8}
}

func (x *DonutsAmount) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DonutsAmount) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DonutsAmount) GetCommand() Command {
	if x != nil {
		return x.Command
	}
	return Command_Create
}

type DonutsFeeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeType DonutsFeeType_FeeTypes  `protobuf:"varint,1,opt,name=fee_type,json=feeType,proto3,enum=epp.fee.DonutsFeeType_FeeTypes" json:"fee_type,omitempty"`
	Name    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DonutsFeeType) Reset() {
	*x = DonutsFeeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonutsFeeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonutsFeeType) ProtoMessage() {}

func (x *DonutsFeeType) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonutsFeeType.ProtoReflect.Descriptor instead.
func (*DonutsFeeType) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{9}
}

func (x *DonutsFeeType) GetFeeType() DonutsFeeType_FeeTypes {
	if x != nil {
		return x.FeeType
	}
	return DonutsFeeType_Custom
}

func (x *DonutsFeeType) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type DonutsFeeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fees     []*DonutsAmount `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	FeeType  *DonutsFeeType  `protobuf:"bytes,2,opt,name=fee_type,json=feeType,proto3" json:"fee_type,omitempty"`
	Category *DonutsCategory `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *DonutsFeeSet) Reset() {
	*x = DonutsFeeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonutsFeeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonutsFeeSet) ProtoMessage() {}

func (x *DonutsFeeSet) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonutsFeeSet.ProtoReflect.Descriptor instead.
func (*DonutsFeeSet) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{10}
}

func (x *DonutsFeeSet) GetFees() []*DonutsAmount {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *DonutsFeeSet) GetFeeType() *DonutsFeeType {
	if x != nil {
		return x.FeeType
	}
	return nil
}

func (x *DonutsFeeSet) GetCategory() *DonutsCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

type DonutsFeeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fees []*DonutsFeeSet `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (x *DonutsFeeData) Reset() {
	*x = DonutsFeeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonutsFeeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonutsFeeData) ProtoMessage() {}

func (x *DonutsFeeData) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonutsFeeData.ProtoReflect.Descriptor instead.
func (*DonutsFeeData) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{11}
}

func (x *DonutsFeeData) GetFees() []*DonutsFeeSet {
	if x != nil {
		return x.Fees
	}
	return nil
}

type FeeCheckData_FeeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  Command                 `protobuf:"varint,1,opt,name=command,proto3,enum=epp.fee.Command" json:"command,omitempty"`
	Standard *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=standard,proto3" json:"standard,omitempty"`
	Period   *common.Period          `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	Currency string                  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Fees     []*Fee                  `protobuf:"bytes,5,rep,name=fees,proto3" json:"fees,omitempty"`
	Credits  []*Credit               `protobuf:"bytes,6,rep,name=credits,proto3" json:"credits,omitempty"`
	Class    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=class,proto3" json:"class,omitempty"`
	Reason   *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FeeCheckData_FeeCommand) Reset() {
	*x = FeeCheckData_FeeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_fee_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeCheckData_FeeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeCheckData_FeeCommand) ProtoMessage() {}

func (x *FeeCheckData_FeeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_fee_fee_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeCheckData_FeeCommand.ProtoReflect.Descriptor instead.
func (*FeeCheckData_FeeCommand) Descriptor() ([]byte, []int) {
	return file_fee_fee_proto_rawDescGZIP(), []int{5, 0}
}

func (x *FeeCheckData_FeeCommand) GetCommand() Command {
	if x != nil {
		return x.Command
	}
	return Command_Create
}

func (x *FeeCheckData_FeeCommand) GetStandard() *wrapperspb.BoolValue {
	if x != nil {
		return x.Standard
	}
	return nil
}

func (x *FeeCheckData_FeeCommand) GetPeriod() *common.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *FeeCheckData_FeeCommand) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FeeCheckData_FeeCommand) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *FeeCheckData_FeeCommand) GetCredits() []*Credit {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *FeeCheckData_FeeCommand) GetClass() *wrapperspb.StringValue {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *FeeCheckData_FeeCommand) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

var File_fee_fee_proto protoreflect.FileDescriptor

var file_fee_fee_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x65, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x02,
	0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x38, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x46,
	0x65, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x92, 0x04,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0xef, 0x02, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x0e,
	0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x6e, 0x75, 0x74,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0d,
	0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x46,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x6e, 0x75,
	0x74, 0x73, 0x46, 0x65, 0x65, 0x53, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66, 0x65, 0x65, 0x2e,
	0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x0d, 0x44,
	0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x04,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x73, 0x46, 0x65, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x2a, 0x74, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x08, 0x2a, 0x36, 0x0a,
	0x07, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x02, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70,
	0x70, 0x2f, 0x66, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fee_fee_proto_rawDescOnce sync.Once
	file_fee_fee_proto_rawDescData = file_fee_fee_proto_rawDesc
)

func file_fee_fee_proto_rawDescGZIP() []byte {
	file_fee_fee_proto_rawDescOnce.Do(func() {
		file_fee_fee_proto_rawDescData = protoimpl.X.CompressGZIP(file_fee_fee_proto_rawDescData)
	})
	return file_fee_fee_proto_rawDescData
}

var file_fee_fee_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fee_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_fee_fee_proto_goTypes = []interface{}{
	(Command)(0),                    // 0: epp.fee.Command
	(Applied)(0),                    // 1: epp.fee.Applied
	(DonutsFeeType_FeeTypes)(0),     // 2: epp.fee.DonutsFeeType.FeeTypes
	(*Fee)(nil),                     // 3: epp.fee.Fee
	(*Credit)(nil),                  // 4: epp.fee.Credit
	(*FeeCheck)(nil),                // 5: epp.fee.FeeCheck
	(*FeeAgreement)(nil),            // 6: epp.fee.FeeAgreement
	(*FeeCommand)(nil),              // 7: epp.fee.FeeCommand
	(*FeeCheckData)(nil),            // 8: epp.fee.FeeCheckData
	(*FeeData)(nil),                 // 9: epp.fee.FeeData
	(*DonutsCategory)(nil),          // 10: epp.fee.DonutsCategory
	(*DonutsAmount)(nil),            // 11: epp.fee.DonutsAmount
	(*DonutsFeeType)(nil),           // 12: epp.fee.DonutsFeeType
	(*DonutsFeeSet)(nil),            // 13: epp.fee.DonutsFeeSet
	(*DonutsFeeData)(nil),           // 14: epp.fee.DonutsFeeData
	(*FeeCheckData_FeeCommand)(nil), // 15: epp.fee.FeeCheckData.FeeCommand
	(*wrapperspb.StringValue)(nil),  // 16: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),    // 17: google.protobuf.BoolValue
	(*common.Period)(nil),           // 18: epp.common.Period
}
var file_fee_fee_proto_depIdxs = []int32{
	16, // 0: epp.fee.Fee.description:type_name -> google.protobuf.StringValue
	17, // 1: epp.fee.Fee.refundable:type_name -> google.protobuf.BoolValue
	16, // 2: epp.fee.Fee.grace_period:type_name -> google.protobuf.StringValue
	1,  // 3: epp.fee.Fee.applied:type_name -> epp.fee.Applied
	16, // 4: epp.fee.Credit.description:type_name -> google.protobuf.StringValue
	16, // 5: epp.fee.FeeCheck.currency:type_name -> google.protobuf.StringValue
	7,  // 6: epp.fee.FeeCheck.commands:type_name -> epp.fee.FeeCommand
	16, // 7: epp.fee.FeeAgreement.currency:type_name -> google.protobuf.StringValue
	3,  // 8: epp.fee.FeeAgreement.fees:type_name -> epp.fee.Fee
	0,  // 9: epp.fee.FeeCommand.command:type_name -> epp.fee.Command
	18, // 10: epp.fee.FeeCommand.period:type_name -> epp.common.Period
	15, // 11: epp.fee.FeeCheckData.commands:type_name -> epp.fee.FeeCheckData.FeeCommand
	16, // 12: epp.fee.FeeCheckData.reason:type_name -> google.protobuf.StringValue
	18, // 13: epp.fee.FeeData.period:type_name -> epp.common.Period
	3,  // 14: epp.fee.FeeData.fees:type_name -> epp.fee.Fee
	4,  // 15: epp.fee.FeeData.credits:type_name -> epp.fee.Credit
	16, // 16: epp.fee.FeeData.balance:type_name -> google.protobuf.StringValue
	16, // 17: epp.fee.FeeData.credit_limit:type_name -> google.protobuf.StringValue
	16, // 18: epp.fee.DonutsCategory.name:type_name -> google.protobuf.StringValue
	16, // 19: epp.fee.DonutsAmount.name:type_name -> google.protobuf.StringValue
	0,  // 20: epp.fee.DonutsAmount.command:type_name -> epp.fee.Command
	2,  // 21: epp.fee.DonutsFeeType.fee_type:type_name -> epp.fee.DonutsFeeType.FeeTypes
	16, // 22: epp.fee.DonutsFeeType.name:type_name -> google.protobuf.StringValue
	11, // 23: epp.fee.DonutsFeeSet.fees:type_name -> epp.fee.DonutsAmount
	12, // 24: epp.fee.DonutsFeeSet.fee_type:type_name -> epp.fee.DonutsFeeType
	10, // 25: epp.fee.DonutsFeeSet.category:type_name -> epp.fee.DonutsCategory
	13, // 26: epp.fee.DonutsFeeData.fees:type_name -> epp.fee.DonutsFeeSet
	0,  // 27: epp.fee.FeeCheckData.FeeCommand.command:type_name -> epp.fee.Command
	17, // 28: epp.fee.FeeCheckData.FeeCommand.standard:type_name -> google.protobuf.BoolValue
	18, // 29: epp.fee.FeeCheckData.FeeCommand.period:type_name -> epp.common.Period
	3,  // 30: epp.fee.FeeCheckData.FeeCommand.fees:type_name -> epp.fee.Fee
	4,  // 31: epp.fee.FeeCheckData.FeeCommand.credits:type_name -> epp.fee.Credit
	16, // 32: epp.fee.FeeCheckData.FeeCommand.class:type_name -> google.protobuf.StringValue
	16, // 33: epp.fee.FeeCheckData.FeeCommand.reason:type_name -> google.protobuf.StringValue
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_fee_fee_proto_init() }
func file_fee_fee_proto_init() {
	if File_fee_fee_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fee_fee_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeAgreement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonutsCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonutsAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonutsFeeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonutsFeeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonutsFeeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_fee_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeCheckData_FeeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fee_fee_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fee_fee_proto_goTypes,
		DependencyIndexes: file_fee_fee_proto_depIdxs,
		EnumInfos:         file_fee_fee_proto_enumTypes,
		MessageInfos:      file_fee_fee_proto_msgTypes,
	}.Build()
	File_fee_fee_proto = out.File
	file_fee_fee_proto_rawDesc = nil
	file_fee_fee_proto_goTypes = nil
	file_fee_fee_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: marks/marks.proto

package marks

import (
	common "github.com/as207960/epp-proxy/gen/go/epp/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Entitlement int32

const (
	Entitlement_Owner    Entitlement = 0
	Entitlement_Assignee Entitlement = 1
	Entitlement_Licensee Entitlement = 2
)

// Enum value maps for Entitlement.
var (
	Entitlement_name = map[int32]string{
		0: "Owner",
		1: "Assignee",
		2: "Licensee",
	}
	Entitlement_value = map[string]int32{
		"Owner":    0,
		"Assignee": 1,
		"Licensee": 2,
	}
)

func (x Entitlement) Enum() *Entitlement {
	p := new(Entitlement)
	*p = x
	return p
}

func (x Entitlement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entitlement) Descriptor() protoreflect.EnumDescriptor {
	return file_marks_marks_proto_enumTypes[0].Descriptor()
}

func (Entitlement) Type() protoreflect.EnumType {
	return &file_marks_marks_proto_enumTypes[0]
}

func (x Entitlement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Entitlement.Descriptor instead.
func (Entitlement) EnumDescriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{0}
}

type ContactType int32

const (
	ContactType_OwnerContact ContactType = 0
	ContactType_Agent        ContactType = 1
	ContactType_ThirdParty   ContactType = 2
)

// Enum value maps for ContactType.
var (
	ContactType_name = map[int32]string{
		0: "OwnerContact",
		1: "Agent",
		2: "ThirdParty",
	}
	ContactType_value = map[string]int32{
		"OwnerContact": 0,
		"Agent":        1,
		"ThirdParty":   2,
	}
)

func (x ContactType) Enum() *ContactType {
	p := new(ContactType)
	*p = x
	return p
}

func (x ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_marks_marks_proto_enumTypes[1].Descriptor()
}

func (ContactType) Type() protoreflect.EnumType {
	return &file_marks_marks_proto_enumTypes[1]
}

func (x ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactType.Descriptor instead.
func (ContactType) EnumDescriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{1}
}

type Mark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mark:
	//	*Mark_Trademark
	//	*Mark_TreatyOrStatute
	//	*Mark_Court
	Mark isMark_Mark `protobuf_oneof:"mark"`
}

func (x *Mark) Reset() {
	*x = Mark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mark) ProtoMessage() {}

func (x *Mark) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mark.ProtoReflect.Descriptor instead.
func (*Mark) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{0}
}

func (m *Mark) GetMark() isMark_Mark {
	if m != nil {
		return m.Mark
	}
	return nil
}

func (x *Mark) GetTrademark() *TradeMark {
	if x, ok := x.GetMark().(*Mark_Trademark); ok {
		return x.Trademark
	}
	return nil
}

func (x *Mark) GetTreatyOrStatute() *TreatyOrStatute {
	if x, ok := x.GetMark().(*Mark_TreatyOrStatute); ok {
		return x.TreatyOrStatute
	}
	return nil
}

func (x *Mark) GetCourt() *Court {
	if x, ok := x.GetMark().(*Mark_Court); ok {
		return x.Court
	}
	return nil
}

type isMark_Mark interface {
	isMark_Mark()
}

type Mark_Trademark struct {
	Trademark *TradeMark `protobuf:"bytes,1,opt,name=trademark,proto3,oneof"`
}

type Mark_TreatyOrStatute struct {
	TreatyOrStatute *TreatyOrStatute `protobuf:"bytes,2,opt,name=treaty_or_statute,json=treatyOrStatute,proto3,oneof"`
}

type Mark_Court struct {
	Court *Court `protobuf:"bytes,3,opt,name=court,proto3,oneof"`
}

func (*Mark_Trademark) isMark_Mark() {}

func (*Mark_TreatyOrStatute) isMark_Mark() {}

func (*Mark_Court) isMark_Mark() {}

type TradeMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MarkName         string                  `protobuf:"bytes,2,opt,name=mark_name,json=markName,proto3" json:"mark_name,omitempty"`
	Holders          []*Holder               `protobuf:"bytes,3,rep,name=holders,proto3" json:"holders,omitempty"`
	Contacts         []*Contact              `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Jurisdiction     string                  `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	Classes          []uint32                `protobuf:"varint,6,rep,packed,name=classes,proto3" json:"classes,omitempty"`
	Labels           []string                `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	GoodsAndServices string                  `protobuf:"bytes,8,opt,name=goods_and_services,json=goodsAndServices,proto3" json:"goods_and_services,omitempty"`
	ApplicationId    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationDate  *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=application_date,json=applicationDate,proto3" json:"application_date,omitempty"`
	RegistrationId   string                  `protobuf:"bytes,11,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	RegistrationDate *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	ExpiryDate       *timestamppb.Timestamp  `protobuf:"bytes,13,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
}

func (x *TradeMark) Reset() {
	*x = TradeMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeMark) ProtoMessage() {}

func (x *TradeMark) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeMark.ProtoReflect.Descriptor instead.
func (*TradeMark) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{1}
}

func (x *TradeMark) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TradeMark) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *TradeMark) GetHolders() []*Holder {
	if x != nil {
		return x.Holders
	}
	return nil
}

func (x *TradeMark) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *TradeMark) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *TradeMark) GetClasses() []uint32 {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *TradeMark) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TradeMark) GetGoodsAndServices() string {
	if x != nil {
		return x.GoodsAndServices
	}
	return ""
}

func (x *TradeMark) GetApplicationId() *wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *TradeMark) GetApplicationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplicationDate
	}
	return nil
}

func (x *TradeMark) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *TradeMark) GetRegistrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistrationDate
	}
	return nil
}

func (x *TradeMark) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type TreatyOrStatute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MarkName         string                 `protobuf:"bytes,2,opt,name=mark_name,json=markName,proto3" json:"mark_name,omitempty"`
	Holders          []*Holder              `protobuf:"bytes,3,rep,name=holders,proto3" json:"holders,omitempty"`
	Contacts         []*Contact             `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Protections      []*Protection          `protobuf:"bytes,5,rep,name=protections,proto3" json:"protections,omitempty"`
	Labels           []string               `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	GoodsAndServices string                 `protobuf:"bytes,8,opt,name=goods_and_services,json=goodsAndServices,proto3" json:"goods_and_services,omitempty"`
	ReferenceNumber  string                 `protobuf:"bytes,9,opt,name=reference_number,json=referenceNumber,proto3" json:"reference_number,omitempty"`
	ProtectionDate   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=protection_date,json=protectionDate,proto3" json:"protection_date,omitempty"`
	Title            string                 `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	ExecutionDate    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`
}

func (x *TreatyOrStatute) Reset() {
	*x = TreatyOrStatute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreatyOrStatute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreatyOrStatute) ProtoMessage() {}

func (x *TreatyOrStatute) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreatyOrStatute.ProtoReflect.Descriptor instead.
func (*TreatyOrStatute) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{2}
}

func (x *TreatyOrStatute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreatyOrStatute) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *TreatyOrStatute) GetHolders() []*Holder {
	if x != nil {
		return x.Holders
	}
	return nil
}

func (x *TreatyOrStatute) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *TreatyOrStatute) GetProtections() []*Protection {
	if x != nil {
		return x.Protections
	}
	return nil
}

func (x *TreatyOrStatute) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TreatyOrStatute) GetGoodsAndServices() string {
	if x != nil {
		return x.GoodsAndServices
	}
	return ""
}

func (x *TreatyOrStatute) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *TreatyOrStatute) GetProtectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ProtectionDate
	}
	return nil
}

func (x *TreatyOrStatute) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TreatyOrStatute) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

type Protection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string                  `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Region      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Ruling      []string                `protobuf:"bytes,3,rep,name=ruling,proto3" json:"ruling,omitempty"`
}

func (x *Protection) Reset() {
	*x = Protection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protection) ProtoMessage() {}

func (x *Protection) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protection.ProtoReflect.Descriptor instead.
func (*Protection) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{3}
}

func (x *Protection) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Protection) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Protection) GetRuling() []string {
	if x != nil {
		return x.Ruling
	}
	return nil
}

type Court struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MarkName         string                 `protobuf:"bytes,2,opt,name=mark_name,json=markName,proto3" json:"mark_name,omitempty"`
	Holders          []*Holder              `protobuf:"bytes,3,rep,name=holders,proto3" json:"holders,omitempty"`
	Contacts         []*Contact             `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Labels           []string               `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	GoodsAndServices string                 `protobuf:"bytes,8,opt,name=goods_and_services,json=goodsAndServices,proto3" json:"goods_and_services,omitempty"`
	ReferenceNumber  string                 `protobuf:"bytes,9,opt,name=reference_number,json=referenceNumber,proto3" json:"reference_number,omitempty"`
	ProtectionDate   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=protection_date,json=protectionDate,proto3" json:"protection_date,omitempty"`
	CountryCode      string                 `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Regions          []string               `protobuf:"bytes,12,rep,name=regions,proto3" json:"regions,omitempty"`
	CourtName        string                 `protobuf:"bytes,13,opt,name=court_name,json=courtName,proto3" json:"court_name,omitempty"`
}

func (x *Court) Reset() {
	*x = Court{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Court) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Court) ProtoMessage() {}

func (x *Court) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Court.ProtoReflect.Descriptor instead.
func (*Court) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{4}
}

func (x *Court) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Court) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *Court) GetHolders() []*Holder {
	if x != nil {
		return x.Holders
	}
	return nil
}

func (x *Court) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Court) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Court) GetGoodsAndServices() string {
	if x != nil {
		return x.GoodsAndServices
	}
	return ""
}

func (x *Court) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *Court) GetProtectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ProtectionDate
	}
	return nil
}

func (x *Court) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Court) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Court) GetCourtName() string {
	if x != nil {
		return x.CourtName
	}
	return ""
}

type Holder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organisation *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=organisation,proto3" json:"organisation,omitempty"`
	Address      *Address                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Voice        *common.Phone           `protobuf:"bytes,4,opt,name=voice,proto3" json:"voice,omitempty"`
	Fax          *common.Phone           `protobuf:"bytes,5,opt,name=fax,proto3" json:"fax,omitempty"`
	Email        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Entitlement  Entitlement             `protobuf:"varint,7,opt,name=entitlement,proto3,enum=epp.marks.Entitlement" json:"entitlement,omitempty"`
}

func (x *Holder) Reset() {
	*x = Holder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder) ProtoMessage() {}

func (x *Holder) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder.ProtoReflect.Descriptor instead.
func (*Holder) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{5}
}

func (x *Holder) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Holder) GetOrganisation() *wrapperspb.StringValue {
	if x != nil {
		return x.Organisation
	}
	return nil
}

func (x *Holder) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Holder) GetVoice() *common.Phone {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *Holder) GetFax() *common.Phone {
	if x != nil {
		return x.Fax
	}
	return nil
}

func (x *Holder) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Holder) GetEntitlement() Entitlement {
	if x != nil {
		return x.Entitlement
	}
	return Entitlement_Owner
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organisation *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=organisation,proto3" json:"organisation,omitempty"`
	Address      *Address                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Voice        *common.Phone           `protobuf:"bytes,4,opt,name=voice,proto3" json:"voice,omitempty"`
	Fax          *common.Phone           `protobuf:"bytes,5,opt,name=fax,proto3" json:"fax,omitempty"`
	Email        string                  `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ContactType  ContactType             `protobuf:"varint,7,opt,name=contact_type,json=contactType,proto3,enum=epp.marks.ContactType" json:"contact_type,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{6}
}

func (x *Contact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contact) GetOrganisation() *wrapperspb.StringValue {
	if x != nil {
		return x.Organisation
	}
	return nil
}

func (x *Contact) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Contact) GetVoice() *common.Phone {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *Contact) GetFax() *common.Phone {
	if x != nil {
		return x.Fax
	}
	return nil
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Contact) GetContactType() ContactType {
	if x != nil {
		return x.ContactType
	}
	return ContactType_OwnerContact
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street1     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=street1,proto3" json:"street1,omitempty"`
	Street2     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=street2,proto3" json:"street2,omitempty"`
	Street3     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=street3,proto3" json:"street3,omitempty"`
	City        string                  `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Province    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	PostalCode  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	CountryCode string                  `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marks_marks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_marks_marks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_marks_marks_proto_rawDescGZIP(), []int{7}
}

func (x *Address) GetStreet1() *wrapperspb.StringValue {
	if x != nil {
		return x.Street1
	}
	return nil
}

func (x *Address) GetStreet2() *wrapperspb.StringValue {
	if x != nil {
		return x.Street2
	}
	return nil
}

func (x *Address) GetStreet3() *wrapperspb.StringValue {
	if x != nil {
		return x.Street3
	}
	return nil
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetProvince() *wrapperspb.StringValue {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *Address) GetPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

var File_marks_marks_proto protoreflect.FileDescriptor

var file_marks_marks_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x04, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x34, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x79, 0x5f, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x79, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x79, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xd4, 0x04, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70,
	0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x79, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x03, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe6, 0x02, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x39,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x70, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x32, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x33,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x33, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x34, 0x0a,
	0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x65, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x02, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73,
	0x32, 0x30, 0x37, 0x39, 0x36, 0x30, 0x2f, 0x65, 0x70, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x70, 0x70, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_marks_marks_proto_rawDescOnce sync.Once
	file_marks_marks_proto_rawDescData = file_marks_marks_proto_rawDesc
)

func file_marks_marks_proto_rawDescGZIP() []byte {
	file_marks_marks_proto_rawDescOnce.Do(func() {
		file_marks_marks_proto_rawDescData = protoimpl.X.CompressGZIP(file_marks_marks_proto_rawDescData)
	})
	return file_marks_marks_proto_rawDescData
}

var file_marks_marks_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_marks_marks_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_marks_marks_proto_goTypes = []interface{}{
	(Entitlement)(0),               // 0: epp.marks.Entitlement
	(ContactType)(0),               // 1: epp.marks.ContactType
	(*Mark)(nil),                   // 2: epp.marks.Mark
	(*TradeMark)(nil),              // 3: epp.marks.TradeMark
	(*TreatyOrStatute)(nil),        // 4: epp.marks.TreatyOrStatute
	(*Protection)(nil),             // 5: epp.marks.Protection
	(*Court)(nil),                  // 6: epp.marks.Court
	(*Holder)(nil),                 // 7: epp.marks.Holder
	(*Contact)(nil),                // 8: epp.marks.Contact
	(*Address)(nil),                // 9: epp.marks.Address
	(*wrapperspb.StringValue)(nil), // 10: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*common.Phone)(nil),           // 12: epp.common.Phone
}
var file_marks_marks_proto_depIdxs = []int32{
	3,  // 0: epp.marks.Mark.trademark:type_name -> epp.marks.TradeMark
	4,  // 1: epp.marks.Mark.treaty_or_statute:type_name -> epp.marks.TreatyOrStatute
	6,  // 2: epp.marks.Mark.court:type_name -> epp.marks.Court
	7,  // 3: epp.marks.TradeMark.holders:type_name -> epp.marks.Holder
	8,  // 4: epp.marks.TradeMark.contacts:type_name -> epp.marks.Contact
	10, // 5: epp.marks.TradeMark.application_id:type_name -> google.protobuf.StringValue
	11, // 6: epp.marks.TradeMark.application_date:type_name -> google.protobuf.Timestamp
	11, // 7: epp.marks.TradeMark.registration_date:type_name -> google.protobuf.Timestamp
	11, // 8: epp.marks.TradeMark.expiry_date:type_name -> google.protobuf.Timestamp
	7,  // 9: epp.marks.TreatyOrStatute.holders:type_name -> epp.marks.Holder
	8,  // 10: epp.marks.TreatyOrStatute.contacts:type_name -> epp.marks.Contact
	5,  // 11: epp.marks.TreatyOrStatute.protections:type_name -> epp.marks.Protection
	11, // 12: epp.marks.TreatyOrStatute.protection_date:type_name -> google.protobuf.Timestamp
	11, // 13: epp.marks.TreatyOrStatute.execution_date:type_name -> google.protobuf.Timestamp
	10, // 14: epp.marks.Protection.region:type_name -> google.protobuf.StringValue
	7,  // 15: epp.marks.Court.holders:type_name -> epp.marks.Holder
	8,  // 16: epp.marks.Court.contacts:type_name -> epp.marks.Contact
	11, // 17: epp.marks.Court.protection_date:type_name -> google.protobuf.Timestamp
	10, // 18: epp.marks.Holder.name:type_name -> google.protobuf.StringValue
	10, // 19: epp.marks.Holder.organisation:type_name -> google.protobuf.StringValue
	9,  // 20: epp.marks.Holder.address:type_name -> epp.marks.Address
	12, // 21: epp.marks.Holder.voice:type_name -> epp.common.Phone
	12, // 22: epp.marks.Holder.fax:type_name -> epp.common.Phone
	10, // 23: epp.marks.Holder.email:type_name -> google.protobuf.StringValue
	0,  // 24: epp.marks.Holder.entitlement:type_name -> epp.marks.Entitlement
	10, // 25: epp.marks.Contact.organisation:type_name -> google.protobuf.StringValue
	9,  // 26: epp.marks.Contact.address:type_name -> epp.marks.Address
	12, // 27: epp.marks.Contact.voice:type_name -> epp.common.Phone
	12, // 28: epp.marks.Contact.fax:type_name -> epp.common.Phone
	1,  // 29: epp.marks.Contact.contact_type:type_name -> epp.marks.ContactType
	10, // 30: epp.marks.Address.street1:type_name -> google.protobuf.StringValue
	10, // 31: epp.marks.Address.street2:type_name -> google.protobuf.StringValue
	10, // 32: epp.marks.Address.street3:type_name -> google.protobuf.StringValue
	10, // 33: epp.marks.Address.province:type_name -> google.protobuf.StringValue
	10, // 34: epp.marks.Address.postal_code:type_name -> google.protobuf.StringValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_marks_marks_proto_init() }
func file_marks_marks_proto_init() {
	if File_marks_marks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_marks_marks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreatyOrStatute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Court); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marks_marks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_marks_marks_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Mark_Trademark)(nil),
		(*Mark_TreatyOrStatute)(nil),
		(*Mark_Court)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_marks_marks_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_marks_marks_proto_goTypes,
		DependencyIndexes: file_marks_marks_proto_depIdxs,
		EnumInfos:         file_marks_marks_proto_enumTypes,
		MessageInfos:      file_marks_marks_proto_msgTypes,
	}.Build()
	File_marks_marks_proto = out.File
	file_marks_marks_proto_rawDesc = nil
	file_marks_marks_proto_goTypes = nil
	file_marks_marks_proto_depIdxs = nil
}
